#!/bin/sh
#
# Shell script for configuring Makefile.config needed to build the DALTON
# quantum chemistry code. 
#
# It tries to determine what platform we are on (although allowing builds 
# for other platforms, as needed for crosscompiling), as well as detect any
# interesting mathematical libraries on the present computer.
#
#
# Known problems: The parallelization installation is rudimentary
#                 The checks for compilers and libraries hopefully works
#
# Written by K.Ruud, Dec-1 1996
# Revised 970401 hjaaj
# Linux support added 970414 by Konrad Hinsen.
# HP revisions 970505-ekd/Konrad Hinsen. Combined by kr 080597
# Fixed strange echo behaviour for linux 990830-pavel salek
# Check specific processor for optimization flags for linux machines 
# (uname -m) -mpentiumpro for i686, -mpentium for i586, and -m486 otherwise
# 990831-ekd
# Defined new VAR-PGF77 for Portland Group compiler on Linux systems (has 
# POINTER statement, so memory allocation is easier) and VAR_G77 for g77 gnu
# compiler 990831-ekd
# More intelligent attempts at including pdpack files according to available
# machine libraries
# For Red Hat 7.0 the shipped compiler (gcc-g77-2.96-54) does not 
# work properly ... test and issue warning. kh010302
#

# set the target def 
set_parallel_def() {
    if [ "$1" = "mpi" ]; then
       def='parallel.x'
    else
       def='dalpvm.x'
    fi
}

if [ "$2" = "" ]; then pref=dalton; else pref="$2"; fi
def="$pref.x"

blas="false"
blas2="false"
blas3="false"
MACHTYPE=`uname -s`
if [ `uname` = 'Linux' ]; then
    ECHO='echo -e'
    prc=`uname -m`
else
    ECHO=echo
fi

$ECHO ''
$ECHO '------------------------------------------------------------------'
$ECHO '   Configuring the DALTON Makefile.config and DALTON run script'
$ECHO '------------------------------------------------------------------'
$ECHO ''

arclist='aix convex cray cray-t3d cray-t3e dec-alpha linux-alpha linux paragon sgi sun hp hal cray-t90 nec'

#
# Attempting auto-configuration. The list of replies from uname should be
# extended!
#
if [ -z "$1" ]; then
    case $MACHTYPE in
        AIX ) ARCH="-aix";;
        IRIX|IRIX64 ) ARCH="-sgi";;
	Linux|FreeBSD ) if [ "`uname -m`" = alpha ]; then
		ARCH="-linux-alpha"
		$ECHO "* linux alpha tested only with COMPAQ fort compiler *\n"
	    else 
		ARCH="-linux"
	    fi ;;
	OSF1 ) ARCH="-dec-alpha";;
 	HP-UX ) ARCH="-hp";;
    * ) $ECHO "Error: No architecture specified.\nPlease enter architecture on command line as 'configure -architecture'\n\nThe following architectures are allowed:\n    $arclist"
        exit;;
    esac
    $ECHO "No architecture specified, attempting auto-configuration:"
    answer=
    while [ "$answer" != "y" -a "$answer" != "n" ]
    do
      $ECHO "This appears to be a $ARCH architecture. Is this correct? [y/n] \c"
      read answer
    done
    if [ "$answer" = "n" ]; then
        $ECHO "\nPlease configure manually from command line: 'configure -architecture'\n\nThe following architectures are allowed:\n    $arclist"
        exit
    else
	$ECHO ""
    fi
else
    ARCH="$1"
fi
$ECHO "   Installing DALTON on a $ARCH computer\n"
case $ARCH in
    -aix|-rs6000 ) WHICH="rs6000";;
    -sgi|-iris4d|-irix ) WHICH="iris4d";;
    -paragon ) WHICH="paragon";;
    -cray ) WHICH="cray";;
    -cray-t90 ) WHICH="cray_t90";;
    -cray-t3d ) WHICH="cray";;
    -cray-t3e ) WHICH="cray_t3e";;
    -nec ) WHICH="nec";;
    -convex ) WHICH="convex";;
    -sun|-sun4 ) WHICH="sun4";;
    -dec-alpha|-alpha|-ultrix ) WHICH="alpha";;
    -linux-alpha ) WHICH="linux-alpha";;
    -hp ) WHICH="hp";;
    -linux ) WHICH="linux";;
    -hal ) WHICH="hal";;
    -?|-help ) $ECHO " Run from command line: 'configure -architecture'\n\n The following architectures are allowed:\n    $arclist"
        exit;;
    * ) $ECHO "$1 is an unsupported architecture. Choose one of\n   $arclist\n\n NOTE: The syntax is 'configure -architecture'\n"
        exit;;
esac
#
# Now we try to check the compiler and find some mathematical libraries. 
# I don't think I will find more than two possible libraries of interest, 
# thus define only two for each computer type
#
dirlist='/lib /usr/lib /usr/local/lib'
case $WHICH in
    rs6000)   liblist='libessl.a libesslp2.a libblas.a'
              complist='xlf f77 f90'
              ccmplist='xlc cc';;
    iris4d)   liblist='libcomplib.sgimath.a libblas.a'
              complist='f77 f90'
              ccmplist='cc';;
    convex)   liblist='libveclib.a libblas.a'
              complist='fc f77 f90'
              ccmplist='cc';;
    cray)     liblist=''
              complist='cf77 f77 cf90 f90'
              ccmplist='cc';;
    cray_t90) liblist=''
              complist='f90 cf90'
              ccmplist='cc';;
    cray_t3e) liblist=''
              complist='f90 cf90 cf77 f77'
              ccmplist='cc';;
    nec)      liblist='libblas0_640.a libeispack0_640.a liblinpack0_640.a'
              complist='f77sx'
              ccmplist='ccsx';;
    alpha)    liblist='libblas.a libdxml.a'
              complist='f77 f90'
              ccmplist='cc';;
    linux-alpha) liblist='libcxml.a'
              complist='fort'
              ccmplist='ccc';;
    sun4)     liblist='libblas.a'
              complist='f77 f90'
              ccmplist='cc';;
    paragon)  liblist='libmath.a libblas.a'
              complist='if77 if90 f77 f90'
              ccmplist='cc';;
    linux)    liblist='libblas.a'
              complist='pgf77 g77'
              ccmplist='pgcc gcc';;
    hal)      liblist='libblas.a'
              complist='frt'
              ccmplist='cc';;
    hp)       liblist='libblas.a libveclib.a'
              complist='fort77 f77 f90'
              ccmplist='cc'
esac
#
if [ $WHICH = "linux" ]; then
    if [ ! -z $PGI ]; then
	if [ $PGI != "" ]; then
	    dirlist="$dirlist $PGI/linux86/lib"
	fi
    fi
fi
#
# For AIX systems we need to know which version of the operating system we
# have.
#
opsys=
if [ $WHICH = 'rs6000' ]; then
   opsys=`uname -v`
   $ECHO 'The version of the AIX operating system found is '$opsys'\n'
   $ECHO '\n   NOTE: There appears to be a bug in the newest compiler of IBM'
   $ECHO '         If the code does not perform correctly on your system'
   $ECHO '         either reinstall an older compiler or turn off all optimization\n'
fi

#
# For SGI we need to know if this is a 64 or 32 bits computer
#

if [ $WHICH = 'iris4d' ]; then
    opsys=`uname -s`
    if [ $opsys = 'IRIX' ]; then
      bit='32'
    else
      bit='64'
    fi
    answer=
    while [ "$answer" != "y" -a "$answer" != "n" ]
    do
      $ECHO "This appears to be a $bit-bit architecture. Is this correct? [y/n] \c"
      read answer
    done
    if [ "$answer" = "n" ]; then
      if [ $bit = '64' ]; then
        opsys='IRIX'
      else
        opsys='IRIX64'
      fi
    fi
fi

#
# Compile the coupled-cluster code as well?
#
#cc='false'
#if [ -e cc ]; then
#    answer=
#    cc='dummy'
#    while [ "$answer" != "y" -a "$answer" != "n" ]
#    do
#	$ECHO 'Do you want to install the coupled-cluster program? [y/n] \c'
#	read answer
#    done
#    if [ "$answer" = "y" ]; then
#	cc='true'
#    fi
#fi
#
# Parallel Dalton?
#

answer=
mesp='dummy'
while [ "$answer" != "y" -a "$answer" != "n" ]
do
    $ECHO 'Do you want to install the program in a parallel version? [y/n] \c'
    read answer
done
if [ "$answer" = "y" ]; then
#
# Determine message passing protocol to be used
#

    mesp=
    while [ "$mesp" != "mpi" -a "$mesp" != "pvm" ]
    do
        $ECHO 'Do you want to use "mpi" or "pvm" for message passing? \c'
        read mesp
    done
    parinc=
    parlib=
    parlibp=
    parnod=
    parnodp=
#
    if [ "$mesp" = "mpi" ]; then
        $ECHO "\n   WARNING: Makefiles for mpi architecture are difficult to guess"
        $ECHO "   Please compare the generated Makefile.config with local documentation."
#
# The only computer I can think of with a separate compiler for parallel
# MPI code is IBMs xlf
#
        if [ "$WHICH" = "rs6000" ]; then
            complist='mpxlf'
            parlib='no'
        elif [ "$WHICH" = "cray_t3e" ]; then
            parlib='no'
        else
            parlib='yes'
        fi
#
        pardir=dirlist
        incdir='/usr/include /usr/local/include /local/include'

#
# Modify for SGI that may have both 32 and 64 bit architectures
#
        if [ $WHICH = 'iris4d' ]; then
            if [ $opsys = 'IRIX64' ]; then
                pardir="$dirlist /usr/lib64 /usr/lib64/mips4/"
            else
                pardir="$dirlist /usr/lib32"
            fi
        fi
#
# MPI settings, first we do the mpi-library
#
        if [ $parlib = 'yes' ]; then
            parlib=
    	    tmplib='libmpi.a libmpi.so'
	    incfile='mpif.h'
	    for testdir in $pardir; do
	        for testlib in $tmplib; do
       	            if test -f $testdir/$tmplib; then
	                parlib='-lmpi'
		        parlibp=$testdir
		        break
	            fi
                done
	        test -n "$parlib" && break
	    done
#
# Now we try to find an include directory
#
	    for testdir in $incdir; do
	        if test -f $testdir/$incfile; then
	            parinc=$testdir
		    break
	        fi
	    done
        elif [ "$parlib" = "no" ]; then
	    parlib=
        fi
#
# PVM settings, we need two PVM library files
#
    elif [ $mesp = 'pvm' ]; then
	parinc='-I$(PVM_ROOT)/include'
	parlibp='-L$(PVM_ROOT)/lib/$(PVM_ARCH)'
	parlib='-lfpvm3 -lpvm3'
	parnodp='$(HOME)/pvm3/bin/$(PVM_ARCH)'
	parnod='node.x'
    fi
fi
#
# Parallel information finished setting
#
#
# Test for the existence of the compiler
#
$ECHO "\n   Checking for Fortran compiler ...\c"

for comp in $complist; do
    set dummy $comp; ac_word=$2
    $ECHO " $comp\c"
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
	if test -f $ac_dir/$ac_word; then
	    ac_cv_prog_F77=$ac_word
     	    break
        fi  
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_F77" && ac_cv_prog_F77=""
    F77="$ac_cv_prog_F77"
    if test -n "$F77"; then
	$ECHO "\n   Compiler $F77 found"
        break
    fi
done
if test -z "$F77"; then
    $ECHO "\n   No compiler found on this computer"
    $ECHO "   Cannot proceed without a Fortran compiler in path"
    exit
fi
$ECHO "   Checking for C compiler ...\c"
for comp in $ccmplist; do
    set dummy $comp; ac_word=$2
    $ECHO " $comp\c"
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
	if test -f $ac_dir/$ac_word; then
	    ac_cv_prog_C=$ac_word
     	    break
	fi  
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_C" && ac_cv_prog_C=""
    CC="$ac_cv_prog_C"
    if test -n "$CC"; then
        $ECHO "\n   Compiler $CC found"
        break
    fi
done
if test -z "$CC"; then
    $ECHO "\n   No C compiler found on this computer"
    $ECHO "   Cannot proceed without a C compiler in path"
    exit
fi
#
# Check out mathematical libraries. May have to expand library list?
#
# For rs6000 we first try ESSL, then BLAS
#

LIB=''
for testdir in $dirlist; do
  if [ -n "$liblist" ]; then
    for testlib in $liblist; do
      if test -f $testdir/$testlib; then
         case $testlib in
	    libessl.a) LIB='-lessl'
      	               blas3="true";;
	    libesslp2.a) LIB='-lesslp2'
      	               blas3="true";;
            libcomplib.sgimath.a) LIB='-lcomplib.sgimath'
	                          blas3='false';;
	    libcxml.a) LIB="$LIB -lcxml"
	               blas3="true"
	               cpp="$cpp -DVAR_DXML";;
	    libdxml.a) LIB='-ldxml'
	               blas3="true"
	               cpp='-DVAR_DXML';;
            libblas.a) LIB='-lblas'
	               if nm $testdir/$testlib | grep "gemm" > /dev/null
		       then
		          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
		          then
		          blas2="true"
		       else
		          blas="true"
		       fi;;
            libveclib.a) LIB='-lveclib'
	               if nm $testdir/$testlib | grep "gemm" > /dev/null 
		       then
		          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
		       then
		          blas2="true"
		       else
		          blas="true"
		       fi;;
            libmath.a) LIB='-lmath -lm -nx';;
	    libblas0_640.a) LIB="-l-lblas0_640 -l-leispack0_640 -l-llinpack0_640";;
         esac
	 break
      fi
    done
    test -n "$LIB" && break
  fi
done

if [ -z "$LIB" -a -n "$liblist" ]; then
    $ECHO '   No mathematical libraries seem to be available'
    $ECHO '   I will proceed without them\n'
elif [ -n "$LIB" ]; then
    $ECHO '   I have found the following mathematical library(ies): '$LIB'\n'
fi      

#
# If necessary, we ask the user if he/she would like Dalton to split the files 
# for him (if his/her filesystem only files less than 2Gb in size).
#

split="false"
if [ $WHICH = 'rs6000' -o $WHICH = 'sun4' -o $WHICH = 'iris4d' ] ; then
    answer=
    while [ "$answer" != "y" -a "$answer" != "n" ]
    do
      $ECHO "Does your file system allow files bigger than 2 Gb? [y/n] \c"
      read answer
    done
    if [ "$answer" = "n" ]; then
       split="true"
    fi
fi

#
# Determine memory size. 
#

$ECHO 'DALTON uses approximately 800000 words of static allocations'
$ECHO 'How many words to use as default for scratch memory ?'
$ECHO '(we do not recommend going below 1000000 words)'
$ECHO 'Note that scratch memory can be changed through the shell variable WRKMEM'
read memsiz
while [ "$memsiz" = "" ]
do
    $ECHO 'How many words to use as default for scratch memory? \c'
    read memsiz
done
$ECHO '\n   Program will be installed with a default scratch memory of '$memsiz' words\n'

#
# Determine location for executable and run script
#

curr=`pwd`
$ECHO '   Current directory is '$curr'\n'

INSTALL_DIR=$curr
answer=
while [ "$answer" != "y" -a "$answer" != "n" ]
do
    $ECHO 'Use current directory as installation directory for binaries and scripts? [y/n] \c'
    read answer
done

while [ "$answer" = "n" ]
do
    $ECHO 'Please enter installation directory: \c'
    read INSTALL_DIR
    $ECHO '\n   DALTON executable and script will be placed in '$INSTALL_DIR' directory\n'
    if [ ! -d "$INSTALL_DIR" ]; then
        $ECHO "ERROR: $INSTALL_DIR does not exist"
	answer2=
	while [ "$answer2" != "y" -a "$answer2" != "n" ]
	do
	   $ECHO 'Do you want me to creat this directory? [y/n] \c'
	   read answer2
	done
        if [ "$answer2" = "y" ]; then
	   mkdir "$INSTALL_DIR"
	else
	   $ECHO "Note that the final copying of the dalton executables may fail"
	   $ECHO "during installation if you do not create this directory before"
	   $ECHO "building the program"
	fi
    else
        answer="ok"
    fi
done

if [ "$curr" = "$INSTALL_DIR" ]; then
    sed '/mv dalton.x/d' Makefile.in > Makefile1
    sed '/mv dalpar.x/d' Makefile1 > Makefile2
    sed '/mv dalpvm.x/d' Makefile2 > Makefile
    rm -f Makefile[1-2]
else
    cp Makefile.in Makefile
fi

#
# Determine default basis set library location
#

answer=
basdir=$curr'/basis/'
while [ "$answer" != "y" -a "$answer" != "n" ]
do
    $ECHO 'Use '$basdir' as default basis set directory? [y/n] \c'
    read answer
done
if [ "$answer" = "n" ];  then
    $ECHO 'Please enter default basis set directory (must end with /) \c'
    read basdir
    $ECHO '\n   Default basis set directory will be '$basdir'\n'
fi

#
# Determine default scratch disk space for calculations
#

if [ -d '/work' ]; then
    worksp='/work'
elif [ -d '/scratch' ]; then
    worksp='/scratch'
elif [ -d '/scr' ]; then
    worksp='/scr'
elif [ -d '/temp' ]; then
    worksp='/temp'
else
    $ECHO '\nI did not find /work, /scratch, /scr or /temp. I will use /tmp'
    worksp='/tmp/'
fi

answer=
while [ "$answer" != "y" -a "$answer" != "n" ]
do
    $ECHO '\n   Job specific directories under '$worksp'/$USER\n   will be used for temporary files when running DALTON\n'
    $ECHO 'Use '$worksp' as default root scratch space in DALTON run script? [y/n] \c'
    read answer
done
if [ "$answer" = "n" ];  then
    $ECHO 'Please enter default root scratch directory: \c'
    read worksp
fi

#
# Figure out list of needed numerical libraries.
#

if [ $WHICH = "nec" ]; then
    pdpackextras=""
else
    pdpackextras="linpack.o eispack.o"
fi
if [ "$blas3" != "true" ] ; then
    pdpackextras="$pdpackextras gp_dblas3.o"
    if [ "$blas2" != "true" ] ; then
       pdpackextras="$pdpackextras gp_dblas2.o"
       if [ "$blas" != "true" ] ; then
          pdpackextras="$pdpackextras gp_dblas1.o"
       fi
    fi
fi

#
#
# We are beginning to see the end of the installation requirements
#
# We will now dump machine specific things to Makefile.config
#
tab=`$ECHO "\t"`

$ECHO '   Updating Makefile.config'

if [ -f Makefile.config ]; then
    $ECHO '   Ooops. Makefile.config exists. I take a backup as Makefile.config.orig'
    if [ -f Makefile.config.orig -a ! -w Makefile.config.orig ]; then
        $ECHO '   Makefile.config.orig is write-protected.'
	answer=
        while [ "$answer" != "y" -a "$answer" != "n" ]
        do
           $ECHO 'Do you want me to overwrite Makefile.config.orig anyway? [y/n]\c'
           read answer
        done
        if [ "$answer" = "n" ];  then
            $ECHO 'I do not take a backup of Makefile.config. This file will be overwritten'
        else
            exec `chmod u+w Makefile.config.orig`
            exec `mv Makefile.config Makefile.config.orig`
            exec `chmod u-w Makefile.config.orig`
        fi
    else   
        exec `mv Makefile.config Makefile.config.orig`
        exec `chmod u-w Makefile.config.orig`
    fi
fi

#
# Parallel preprocessor directive need to be set
#

if [ "$mesp" = "mpi" ]; then
    parop='VAR_MPI'
elif [ "$mesp" = "pvm" ]; then
    parop='VAR_PVM'
else
    parop=
fi

case $WHICH in
    rs6000) case $opsys in
		2) if [ "$mesp" = "dummy" ]; then
		   if [ $split = 'true' ] ; then
                       cpp="-w -P -DSYS_AIX -DVAR_SIRBIG -DSYS_AIX23 -DVAR_SPLITFILES -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
		   else
                       cpp="-w -P -DSYS_AIX -DVAR_SIRBIG -DSYS_AIX23 -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
		    fi
                   else
		      if [ $split = 'true' ] ; then
                         cpp="-w -P -DSYS_AIX -DVAR_SIRBIG -DSYS_AIX23 -DVAR_SPLITFILES -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
                      else
                         cpp="-w -P -DSYS_AIX -DVAR_SIRBIG -DSYS_AIX23 -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
                      fi
                       if [ "$mesp" = "mpi" ]; then
                          def='parallel.x'
                       else
                          def='dalpvm.x'
		       fi
		   fi
                   inc='-I../include -I../include_cc'
                   cpp=${cpp}" -DIMPLICIT_NONE";;
                *) if [ "$mesp" = "dummy" ]; then
		     if [ $split = 'true' ] ; then
                       cpp="-WF,-DSYS_AIX,-DVAR_SIRBIG,-DVAR_MFDS,-DVAR_SPLITFILES,-D'INSTALL_WRKMEM=$memsiz',-D'INSTALL_BASDIR=\"$basdir\"'"
		     else
                       cpp="-WF,-DSYS_AIX,-DVAR_SIRBIG,-DVAR_MFDS,-D'INSTALL_WRKMEM=$memsiz',-D'INSTALL_BASDIR=\"$basdir\"'"
		     fi
                   else
		      if [ $split = 'true' ] ; then
                        cpp="-WF,-DSYS_AIX,-DVAR_SIRBIG,-DVAR_MFDS,-DVAR_SPLITFILES,-D'INSTALL_WRKMEM=$memsiz',-D'INSTALL_BASDIR=\"$basdir\"',-D$parop"
		      else
                        cpp="-WF,-DSYS_AIX,-DVAR_SIRBIG,-DVAR_MFDS,-D'INSTALL_WRKMEM=$memsiz',-D'INSTALL_BASDIR=\"$basdir\"',-D$parop"
		      fi
		      set_parallel_def $mesp
		   fi
		   inc='-WF,-I../include,-I../include_cc'
                   cpp=${cpp}",-DIMPLICIT_NONE"
            esac
            copt="-I../include -I../include_cc -DSYS_AIX"
            opt='-O3 -qstrict -qarch=auto -qtune=auto -qmaxmem=-1 -bmaxdata:0x40000000 -bmaxstack:0x10000000';;
    iris4d) case $opsys in
               IRIX64) opt='-O2 -64 -mips4 -G 0 -OPT:Olimit=0';;
	       *) opt='-O2 -32 -mips2 -G 0 -Olimit 2000';;
            esac
            if [ "$mesp" = "dummy" ]; then
	       if [ $split = 'true' ] ; then
		    cpp="-DSYS_IRIX -DNO_F90 -DVAR_SIRBIG -DVAR_SPLITFILES -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
	       else
                   cpp="-DSYS_IRIX -DNO_F90 -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
		fi
	    else
	       if [ $split = 'true' ] ; then
                   cpp="-DSYS_IRIX -DNO_F90 -DVAR_SIRBIG -DVAR_SPLITFILES -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
		else
                   cpp="-DSYS_IRIX -DNO_F90 -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
		fi
		set_parallel_def $mesp
	    fi
	    copt="$opt"
	    inc='-I../include -I../include_cc'
            cpp=${cpp}" -DIMPLICIT_NONE";;
    convex) if [ "$mesp" = "dummy" ]; then
                cpp="-P -DSYS_CONVEX -DNO_F90 -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
	    else
                cpp="-P -DSYS_CONVEX -DNO_F90 -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
                def='parallel.x'
	    fi
            cpp=${cpp}" -DIMPLICIT_NONE"
            opt="-O2 -link \"-W\""
	    inc='-I../include -I../include_cc';;
    cray)   if [ "$mesp" = "dummy" ]; then
                cpp="-DSYS_CRAY -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -DVAR_VECTOR"
	    else
                cpp="-DSYS_CRAY -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -DVAR_VECTOR $parop"
	    fi
	    inc='-I../include -I../include_cc'
	    cpp=${cpp}" -DIMPLICIT_NONE"
            opt="-Wf\"-i 64 -a stack -dp\" -Wl\"-i ./equivalences\" -Wp\"-F\""
            def='cray.x';;
    cray_t90) if [ "$mesp" = "dummy" ]; then
                cpp="-DSYS_T90 -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -DVAR_VECTOR"
            else
                cpp="-DSYS_T90 -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -DVAR_VECTOR $parop"
            fi
            inc='-I../include -I../include_cc'
	    cpp=${cpp}" -DIMPLICIT_NONE"
            opt="-O nofastint -d p -Wl\"-i ./equivalences\" -Wp\"-F\""
            def='t90.x';;
    cray_t3e) if [ "$mesp" = "dummy" ]; then
                cpp="-DSYS_T3D -DVAR_SIRBIG -DVAR_NONAMELIST -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
	    else
                cpp="-DSYS_T3D -DVAR_SIRBIG -DVAR_NONAMELIST -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
	    fi
	    inc='-I../include -I/opt/ctl/mpt/mpt/include -I../include_cc'
            cpp=${cpp}" -DIMPLICIT_NONE"
            opt="-dp -F -Oaggress,scalar3,vector3,unroll2,msgs,negmsgs"
            def='t3d.x'
            LIB="crilib.cld -Wl,-Dstreams=on -lmfastv";;
    nec) if [ "$mesp" = "dummy" ]; then
           cpp="-cpp DSYS_NEC DVAR_SIRBIG D'INSTALL_WRKMEM=$memsiz' D'INSTALL_BASDIR=\"$basdir\"' USX DVAR_MFDS DVAR_REAL DVAR_VECTOR"
	else
           cpp="DSYS_NEC DVAR_SIRBIG D'INSTALL_WRKMEM=$memsiz' D'INSTALL_BASDIR=\"$basdir\"' USX DVAR_MFDS DVAR_REAL DVAR_VECTOR"
	   set_parallel_def $mesp
	fi
        inc='-I../include -I../include_cc'
        cpp=${cpp}" DIMPLICIT_NONE"
	opt='-float0 -w double8 -ptr byte -b -pvctl noassume loopcnt=10000000 -fopp';;
    alpha)  if [ "$mesp" = "dummy" ]; then
                cpp="$cpp -DSYS_DEC -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
	    else
                cpp="$cpp -DSYS_DEC -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
		set_parallel_def $cc
	    fi
	    inc='-I../include -I../include_cc'
            cpp=${cpp}" -DIMPLICIT_NONE"
            opt='-O4 -fpe2';;
    sun4) if [ "$mesp" = "dummy" ]; then
           if [ $split = 'true' ] ; then
              cpp="-DSYS_SUN -DNO_F90 -DVAR_SPLITFILES -DVAR_SIRBIG -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR= \"$basdir\"'"
	   else
              cpp="-DSYS_SUN -DNO_F90 -DVAR_SIRBIG -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR= \"$basdir\"'"
	   fi
          else
	     if [ $split = 'true' ] ; then
              cpp="-DSYS_SUN -DNO_F90 -DVAR_SPLITFILES -DVAR_SIRBIG -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR= \"$basdir\"' -D$parop"
	     else
              cpp="-DSYS_SUN -DNO_F90 -DVAR_SIRBIG -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR= \"$basdir\"' -D$parop"
	     fi
	     set_parallel_def $mesp
              fi
              inc='-I../include -I../include_cc'
              cpp=${cpp}" -DIMPLICIT_NONE"
              opt='-O5 -Nc50';;
    hp) if [ "$mesp" = "dummy" ]; then
              cpp="-DSYS_HPUX -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
          else
              cpp="-DSYS_HPUX -DVAR_SIRBIG -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
	      set_parallel_def $mesp
          fi
          inc='-I../include -I../include_cc'
          cpp=${cpp}" -DIMPLICIT_NONE"
          if [ $F77 = 'f90' ]; then
              opt='+O2 +U77'
              safe_opt='+O1 +U77'
          else
              opt='+O2 +U77 +E4 +E5'
              safe_opt='+O1 +U77 +E4 +E5'
          fi
          LIB="-lV7 $LIB";;
     linux-alpha)  
	  if [ "$mesp" = "dummy" ]; then
              cpp="$cpp -DHAVE_GCPP -DSYS_DEC -DVAR_SIRBIG -DVAR_64BITS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
 	  else
              cpp="$cpp -DHAVE_GCPP -DSYS_DEC -DVAR_SIRBIG -DVAR_64BITS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
 	      set_def $mesp
 	  fi
          opt='-fast'
	  inc='-I../include -I../include_cc'
          cpp=${cpp}" -DIMPLICIT_NONE"
          copt='-fast';;
    linux) if [ "$mesp" = "dummy" ]; then
              cpp="-DSYS_LINUX -DVAR_SIRBIG -DNO_F90 -DVAR_MFDS -DVAR_SPLITFILES -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"'"
          else
              cpp="-DSYS_LINUX -DVAR_SIRBIG -DNO_F90 -DVAR_MFDS -DVAR_SPLITFILES -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop"
	      set_parallel_def $mesp
          fi
              if [ $F77 = 'pgf77' ]; then
                  if [ $prc = 'i686' ]; then
                      proc='-tp p6'
                  elif [ $prc = 'i586' ]; then
                      proc='-tp p5'
                  else
                      proc=''
                  fi
                  cpp="-DVAR_PGF77 $cpp"
                  copt="-O3"
                  opt="-O3 $proc -Munroll"; safe_opt="$proc"
              else
                  test_linux_g77=false
                  if [ -s /etc/redhat-release ]; then
                     if [ `grep "Red Hat Linux 7\.0" /etc/redhat-release | wc -l ` != 0 ]; then
                        test_linux_g77="true"
                     fi
                  elif [ -d /proc ]; then
                     if [ `cat /proc/version | grep "Red Hat Linux 7\.0" | wc -l` != "0" ]; then
                        test_linux_g77="true"
                     fi
                  fi
                  if [ $test_linux_g77 != "false" ]; then
                     if [ `which rpm | wc -l ` != 0 ]; then
                        if [ `rpm -q gcc-g77 | grep '2.96.54' | wc -l` != 0 ]; then
                          $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
                          $ECHO "There are problems with the native Red Hat 7.0 compiler."
                          $ECHO "You should upgrade your gcc and gcc-g77-2.96.54 compiler to version 2.96.69 or later."
                          $ECHO "Dalton does NOT run correct with the current compiler."
                          $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
                        fi
                     else
                          $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
                          $ECHO "I cannot determine if you use the original g77 compiler from Red Hat Linux 7.0."
                          $ECHO "If you do, upgrade gcc & gcc-g77 to version 2.96.69 or later."
                          $ECHO "Dalton does NOT run correct with the gcc-g77 2.96.54 compiler"
                     fi
                  fi
                  if [ $prc = 'i686' ]; then
                      proc=pentiumpro
                  elif [ $prc = 'i586' ]; then
                      proc=pentium
                  else
                      proc=486
                  fi
                  cpp="-DVAR_G77 $cpp"
                  copt='-malign-double'
                  opt="-O3 -m$proc -ffast-math -fexpensive-optimizations -malign-double -funroll-loops -fno-globals -Wno-globals"
              fi
	      def='linux.x'
              inc='-I../include -I../include_cc'
              cpp=${cpp}" -DIMPLICIT_NONE";;
    hal) if [ "$mesp" = "dummy" ]; then
                cpp="-DSYS_HAL -DVAR_SIRBIG -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -Wp,-P"
            else
                cpp="-DSYS_HAL -DVAR_SIRBIG -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_BASDIR=\"$basdir\"' -D$parop -Wp,-P"
                def='parallel.x'
            fi
            inc='-I../include -I../include_cc'
            cpp=${cpp}" -DIMPLICIT_NONE"
            opt="-Kfast,gs,V8PLUS,eval -fs"
            LIB="$LIB -L/usr/ucblib -lucb"
esac

# for safe compilers, set safe_opt to opt
if [ -z "$safe_opt" ]; then safe_opt="$opt"; fi

cat <<EOF > Makefile.config
ARCH        = $WHICH
#
#
CPP_FLAGS     = $cpp
F77           = $F77
CC            = $CC
RM            = rm -f
OPTFLAGS      = $opt
SAFEOPTFLAGS  = $safe_opt
CFLAGS        = $copt
INCLUDE_DIR   = $inc $parinc
LIB_LIST      = $LIB
INSTALLDIR    = $INSTALL_DIR
PDPACK_EXTRAS = $pdpackextras
AR            = ar
ARFLAGS       = rvs
#
default : $def
EOF

#
# Insert necessary additional features for parallel calculations
#

if [ "$mesp" = "mpi" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
MPI_INCLUDE_DIR = $parinc
MPI_LIB_PATH    = $parlibp
MPI_LIB         = $parlib
#
EOF
elif [ "$mesp" = "pvm" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
PVM_LIB_PATH = $parlibp
PVM_LIB_LIST = $parlib
PVM_NOD_PATH = $parnodp
PVM_NOD_PROG = $parnod
#
EOF
fi
#
# Include the rule for building the object files
#
cppuse=
if [ $WHICH = 'convex' ]; then
    cpptry='cpp'
#
#  On the Convex accesible to us, cpp is very oddly placed. If we can't
#  find cpp, we try to see if this is a general Convex installation
#
    set dummy $cpptry; ac_word=$2
    $ECHO "checking for preprocessor""... $cpptry\c"
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
	if test -f $ac_dir/$ac_word; then
	    ac_cv_prog_cpp=$ac_word
     	    break
        fi  
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_cpp" && ac_cv_prog_cpp=""
    cppuse="$ac_cv_prog_cpp"
    $ECHO "cppuse $cppuse cpptry $cpptry"
    if test -z "$cppuse"; then
#
#   Try /usr/lib/cc as a last resort
#
        if [ -x /usr/lib/cc/cpp ]; then
	   cppuse='/usr/lib/cc/cpp'
	fi
    fi
    if test -n "$cppuse"; then
       $ECHO "Preprocessor $cppuse found"
    else
       $ECHO "Preprocessor $cpptry not found"
    fi
    
fi
if [ "$WHICH" = "rs6000" -a "$opsys" = "2" ]; then
    cppuse='cc'
fi


if [ $WHICH = 'hal' ]; then
   cat <<EOF >> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .f .o .c

.F.o:
$tab\$(F77) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(OPTFLAGS) -c \$*.F 
$tab\$(RM) \$*.f

.c.o:
$tab\$(CC) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(CFLAGS) -c \$*.F 
EOF
elif [ $WHICH = 'rs6000' ]; then
   if [ $opsys = '2' ]; then
cat <<EOF>> Makefile.config
CPP        = $cppuse
#
# Suffix rules
#
.SUFFIXES : .F .o .c 

.F.o:
$tab\$(CPP) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$*.F
$tab mv \$*.i \$*.f
$tab\$(F77) \$(OPTFLAGS) -c \$*.f 
$tab\$(RM) \$*.f

.c.o:
$tab\$(CC) \$(CFLAGS) \$(OPTFLAGS) -c \$*.c
EOF
    else cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .o .c

.F.o:
$tab\$(F77) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(OPTFLAGS) -c \$*.F 

.c.o:
$tab\$(CC) \$(CFLAGS) \$(OPTFLAGS) -c \$*.c 
EOF
    fi
elif [ $WHICH = 'linux' ]; then
cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .o .c

.F.o:
$tab\$(F77) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(OPTFLAGS) -c \$*.F 

.c.o:
$tab\$(CC) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(CFLAGS) -c \$*.c 
EOF
else cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .o .c

.F.o:
$tab\$(F77) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(OPTFLAGS) -c \$*.F 

.c.o:
$tab\$(CC) \$(INCLUDE_DIR) \$(CPP_FLAGS) \$(CFLAGS) -c \$*.c 
EOF
fi
#
# Update the DALTON run-script
#

$ECHO
$ECHO '\n   Updating the DALTON run-script in '$INSTALL_DIR

#
# When using PVM the name of the executable is renamed
#
DALEXE="dalton.x"
if [ $mesp = 'pvm' ]; then
    DALEXE="dalpvm.x"
fi

cat <<EOF > $INSTALL_DIR/dalton
#!/bin/sh
################################################################################
#                                                                              #
# Shell-script for running DALTON                                              #
#                                                                              #
# by T. Enevoldsen, Odense University                                          #
#                                                                              #
# Last change feb. 18 1997                                                     #
# Converted to sh on February 23 by K.Ruud
#                                                                              #
################################################################################
#
# location of executeables
DALTON="$INSTALL_DIR/$DALEXE"
DALMPI="$INSTALL_DIR/dalpar.x"
MPIRUN="mpirun"
# set TMPDIR (if not defined by e.g. NQS) and WRKDIR
[ -z "\$TMPDIR" ] && TMPDIR="$worksp/\$USER"
EOF
cat dalton.gnr >> $INSTALL_DIR/dalton

chmod 700 $INSTALL_DIR/dalton

$ECHO '\n   The configuration of DALTON has finished succesfully.'
$ECHO '   Check compiler flags etc. in Makefile.config and run "make" to get executable.\n'

exit
