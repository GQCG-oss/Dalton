#!/bin/sh
#
# Shell script for configuring Makefile.config needed to build the DALTON
# quantum chemistry code. 
#
# It tries to determine what platform we are on (although allowing builds 
# for other platforms, as needed for crosscompiling), as well as detect any
# interesting mathematical libraries on the present computer.
#
#
# Known problems: The parallelization installation is rudimentary
#                 The checks for compilers and libraries hopefully works
#
# Written by K.Ruud, Dec-1 1996
# Revised 970401 hjaaj
# Linux support added 970414 by Konrad Hinsen.
# HP revisions 970505-ekd/Konrad Hinsen. Combined by kr 080597
# Fixed strange echo behaviour for linux 990830-pawel salek
# Check specific processor for optimization flags for linux machines 
# (uname -m) -mpentiumpro for i686, -mpentium for i586, and -m486 otherwise
# 990831-ekd
# Defined new VAR_PGF77 for Portland Group compiler on Linux systems (has 
# POINTER statement, so memory allocation is easier) and VAR_G77 for g77 gnu
# compiler 990831-ekd
# More intelligent attempts at including pdpack files according to available
# machine libraries
# For Red Hat 7.0 the shipped compiler (gcc-g77-2.96-54) does not 
# work properly ... test and issue warning. kh010302
# Darwin (OS X) g77 support added 151202 tuh 
# Darwin (OS X) Absoft f77 support added 030503 tuh 
#

# defaults section for quick config
do_quick_config=n

# set the target def 
set_parallel_def() {
    if [ "$1" = "mpi" ]; then
       def='parallel.x'
    else
       $ECHO ERROR: $mesp is not working for this version of Dalton
       exit 1
       def='dalpvm.x'
    fi
}

# Read of yes/no answer, the output in standardized to 'y' or 'n'. /hjaaj
get_yes_or_no() {
    if test "$do_quick_config" = y; then
        answer="$2"
    else
        answer=
    fi
    while [ "$answer" != "y" -a "$answer" != "n" ]
    do
        if [ "$2" = "y" ]; then $ECHO "$1 [Y/n] \c"
      elif [ "$2" = "n" ]; then $ECHO "$1 [y/N] \c"
      else  $ECHO "$1 [y/n] \c"; fi
      
      read answer
      if [ "$answer" = "" ]; then answer="$2"; fi
#     standardize answer
      case $answer in
	y* | Y*) answer="y" ;;
	n* | N*) answer="n" ;;
      esac
    done
}
#
# Define backup function /hjaaj
#
backup () {
  if [ "$1" = "-v" ]; then ekko=1; shift
  else ekko=0;
  fi
  for i in $* ; do
     if [ -f "${i}" ]; then
        for j in 6 5 4 3 2 1 0 ; do
           jp=`expr $j + 1`
           if [ -f "${i}.${j}" ]; then
              [ $ekko -eq 1 ] && echo "Backup: renaming ${i}.${j} to ${i}.${jp}"
              mv -f "${i}.${j}" "${i}.${jp}"
           fi
        done
        if [ $ekko -eq 1 ]; then echo "Backup: renaming ${i} to ${i}.0"; fi
        mv -f "${i}" "${i}.0"
     fi
  done
}


if [ "$2" = "" ]; then pref=dalton; else pref="$2"; fi
def="$pref.x"

blas="false"
blas2="false"
blas3="false"
lapack="false"
MACHTYPE=`uname -s`
if [ "$MACHTYPE" = 'Linux' -o "$MACHTYPE" = Darwin ]; then
    ECHO='echo -e'
    if [ "$ECHO" = '-e' ]; then ECHO=echo; fi
    prc=`uname -m`
else
    ECHO=echo
fi
$ECHO ''
$ECHO '------------------------------------------------------------------'
$ECHO '   Configuring the DALTON Makefile.config and "dalton" run script'
$ECHO '------------------------------------------------------------------'
$ECHO ''

arclist='aix cray cray-t3d cray-t3e dec-alpha linux-alpha linux paragon sgi sun hp hal cray-t90 nec darwin'

#
# Attempting auto-configuration. The list of replies from uname should be
# extended!
#
if test x"$1" = x-q -o x"$1" = x--quick; then
   do_quick_config=y
   shift
fi

if [ -z "$1" ]; then
    case $MACHTYPE in
        AIX ) ARCH="-aix";;
	Darwin ) ARCH="-darwin" ;;
        IRIX|IRIX64 ) ARCH="-sgi";;
	Linux|FreeBSD ) if [ "`uname -m`" = alpha ]; then
		ARCH="-linux-alpha"
		$ECHO "* linux alpha tested only with COMPAQ fort compiler *\n"
	    else 
		ARCH="-linux"
	    fi ;;
	OSF1 ) ARCH="-dec-alpha";;
	HP-UX ) ARCH="-hp";;
	SunOS ) ARCH="-sun";;
        Darwin ) ARCH="-darwin";;
    * ) $ECHO "Error: No architecture specified.\nPlease enter architecture on command line as 'configure -architecture'\n\nThe following architectures are allowed:\n    $arclist"
        exit 1;;
    esac
    $ECHO "No architecture specified, attempting auto-configuration:"
    get_yes_or_no "This appears to be a $ARCH architecture. Is this correct?" y
    if [ "$answer" = "n" ]; then
        $ECHO "\nPlease configure manually from command line: 'configure -architecture'\n\nThe following architectures are allowed:\n    $arclist"
        exit 1
    else
	$ECHO ""
    fi
else
    ARCH="$1"
fi
$ECHO "-->Installing DALTON on a $ARCH computer\n"
case $ARCH in
    -aix|-rs6000 ) WHICH="rs6000";;
    -sgi|-iris4d|-irix ) WHICH="iris4d";;
    -paragon ) WHICH="paragon";;
    -cray ) WHICH="cray";;
    -cray-t90 ) WHICH="cray_t90";;
    -cray-t3d ) WHICH="cray";;
    -cray-t3e ) WHICH="cray_t3e";;
    -nec ) WHICH="nec";;
    -sun|-sun4 ) WHICH="sun4";;
    -dec-alpha|-alpha|-ultrix ) WHICH="alpha";;
    -linux-alpha ) WHICH="linux-alpha";;
    -hp ) WHICH="hp";;
    -linux ) WHICH="linux";;
    -hal ) WHICH="hal";;
    -darwin ) WHICH="darwin";;  
    -?|-help ) $ECHO " Run from command line: 'configure -architecture'\n\n The following architectures are allowed:\n    $arclist"
        exit 1;;
    * ) $ECHO "$1 is an unsupported architecture. Choose one of\n   $arclist\n\n NOTE: The syntax is 'configure -architecture'\n"
        exit 1;;
esac
#
# Now we try to check the compiler and find some mathematical libraries. 
# I don't think I will find more than two possible libraries of interest, 
# thus define only two for each computer type.
# Check first local libraries (hoping they were installed there for a
# reason), then system-provided libraries.
dirlist='/lib /usr/local/lib /usr/lib /usr/local/lib/ATLAS /lib64 /usr/lib64 /usr/local/lib64'

case $WHICH in
    rs6000)   liblist='libessl.a libesslp2.a libblas.a'
              complist='xlf f90 f77 g77'
              ccmplist='xlc cc gcc';;
    iris4d)   liblist='libcomplib.sgimath.a libblas.a'
              complist='f90 f77 g77'
              ccmplist='cc gcc';;
    cray)     liblist=''
              complist='cf90 f90 cf77 f77'
              ccmplist='cc';;
    cray_t90) liblist=''
              complist='f90 cf90'
              ccmplist='cc';;
    cray_t3e) liblist=''
              complist='f90 cf90 cf77 f77'
              ccmplist='cc';;
    nec)      liblist='libblas0_640.a libeispack0_640.a liblinpack0_640.a'
              complist='f77sx'
              ccmplist='ccsx';;
    alpha)    liblist='libblas.a libdxml.a'
              complist='f90 f77 g77'
              ccmplist='cc gcc';;
    linux-alpha) liblist='libcxml.a'
              complist='fort g77'
              ccmplist='ccc gcc';;
    sun4)     liblist='libblas.a'
              complist='f90 f77 g77'
              ccmplist='cc gcc';;
    paragon)  liblist='libmath.a libblas.a'
              complist='if90 if77 f90 f77'
              ccmplist='cc';;
    linux)    liblist='libacml.a libmkl.so libmkl_p3.a libatlas.a libblas.a'
              complist='ifort ifc efc pgf77 gfortran g77'
              ccmplist='icc ecc pgcc gcc';;
    darwin)   liblist='libatlas.a libblas.a'
              complist='xlf g77 gfortran'
#             complist='xlf g77 f77'
#                       f77 is the Absoft v8.0 compiler
              ccmplist='xlc gcc';;
    hal)      liblist='libblas.a'
              complist='frt'
              ccmplist='cc';;
    hp)       liblist='libblas.a libveclib.a'
              complist='f90 fort77 f77'
              ccmplist='cc'
esac
#
# For AIX systems we need to know which version of the operating system we
# have.
#
opsys=
if [ $WHICH = 'rs6000' ]; then
   opsys=`uname -v`
fi
#
# For SGI and HP we need to know if this is a 64 or 32 bits computer
# If one wants 32-bit code on a 64-bit machine, just answer 'n' to
# the question.
#

if [ $WHICH = 'iris4d' ]; then
    opsys=`uname -s`
    if [ $opsys = 'IRIX' ]; then
      bit='32'
    else
      bit='64'
    fi
    get_yes_or_no "This appears to be a $bit-bit architecture. Is this correct?" y
    if [ "$answer" = "n" ]; then
      if [ $bit = '64' ]; then
        opsys='IRIX'
      else
        opsys='IRIX64'
      fi
    fi
elif [ $WHICH = 'hp' ]; then
    spec=`uname -m`
    if [ $spec = '9000/800' ]; then
      bit='64'
      arch='hpux'
    elif [ $spec = "ia64" ]; then
      bit='64'
      arch='ia64/hpux'
    else
      bit='32'
      arch='hpux'
    fi
    if [ $arch = "hpux" ]; then
       get_yes_or_no "This appears to be a $bit-bit architecture. Is this correct?" y
       if [ "$answer" = "n" ]; then
         if [ $bit = '64' ]; then
           bit='32'
         else
           bit='64'
         fi
       fi
    fi
elif [ $WHICH = 'rs6000' ]; then
    get_yes_or_no "Is this a 64-bit architecture?" y
    if [ "$answer" = "y" ]; then
	bit='64'
    else
	bit='32'
    fi
fi

#
# Parallel Dalton?
#

mesp='dummy'
get_yes_or_no 'Do you want to install the program in a parallel MPI version?' n
if [ "$answer" = "y" ]; then
#
# Determine message passing protocol to be used
#hj# hjaaj March 2005: disabled as only MPI is working now
#

#hj# mesp=
    mesp="mpi"
#hj#
    while [ "$mesp" != "mpi" -a "$mesp" != "pvm" ]
    do
        $ECHO 'Do you want to use "mpi" or "pvm" for message passing? \c'
        read mesp
    done
    parinc=
    parlib=
    parlibp=
    parnod=
    parnodp=
#
    if [ "$mesp" = "mpi" ]; then
        $ECHO "\n-->WARNING: Makefiles for MPI architecture are difficult to guess"
        $ECHO "   Please compare the generated Makefile.config with local documentation."
#
# The only computer I can think of with a separate compiler for parallel
# MPI code is IBMs xlf
#
        if [ "$WHICH" = "rs6000" -o "$WHICH" = "darwin" ]; then
            complist="mpxlf mpif90 mpif77 $complist"
            ccmplist="mpcc  mpicc  $ccmplist"
            parlib='no'
        elif [ "$WHICH" = "cray_t3e" ]; then
            parlib='no'
        else
            complist="mpif90 mpif77 $complist"
            ccmplist="mpicc  $ccmplist"
            parlib='yes'
        fi
#
        pardir=$dirlist
        incdir='/usr/include /usr/local/include /local/include'

#
# Modify for SGI that may have both 32 and 64 bit architectures
#
        if [ $WHICH = 'iris4d' ]; then
            if [ $opsys = 'IRIX64' ]; then
                pardir="/usr/lib64 /usr/lib64/mips4/ $dirlist"
            else
                pardir="/usr/lib32 $dirlist"
            fi
        fi
#
# MPI settings, first we do the mpi-library
#
        if [ $parlib = 'yes' ]; then
            parlib=
	    tmplib='libmpi.a libmpi.so'
	    incfile='mpif.h'
	    for testdir in $pardir; do
	        for testlib in $tmplib; do
	            if [ -f $testdir/$testlib ]; then
	                parlib='-lmpi'
		        parlibp=-L$testdir
		        break
	            fi
                done
	        test -n "$parlib" && break
	    done
#
# Now we try to find an include directory
#
	    for testdir in $incdir; do
	        if [ -f $testdir/$incfile ]; then
	            parinc=-I$testdir
		    break
	        fi
	    done
        elif [ "$parlib" = "no" ]; then
	    parlib=
        fi
#
# PVM settings, we need two PVM library files
#
    elif [ $mesp = 'pvm' ]; then
	parinc='-I$(PVM_ROOT)/include'
	parlibp='-L$(PVM_ROOT)/lib/$(PVM_ARCH)'
	parlib='-lfpvm3 -lpvm3'
	parnodp='$(HOME)/pvm3/bin/$(PVM_ARCH)'
	parnod='node.x'
    fi
fi
#
# Parallel information finished setting
#
#
# Test for the existence of the compiler
#
$ECHO "\n   Checking for Fortran compiler ..."
$ECHO   "   from this list: $complist \n"

for comp in $complist; do
    set dummy $comp; ac_word=$2
#   Add ":" to IFS, the list of internal field separators
#   (normally space, tab, and newline).
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
	if [ -f $ac_dir/$ac_word ]; then
	  get_yes_or_no "Compiler $ac_dir/$ac_word found, use this compiler?" y
	  if [ $answer = 'y' ]; then
	    ac_cv_prog_F77=$ac_word
	    break
          fi
        fi  
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_F77" && ac_cv_prog_F77=""
    F77="$ac_cv_prog_F77"
    if [ -n "$F77" ]; then
	$ECHO "\n-->Compiler $F77 found and accepted."
	break
    fi
done
if [ -z "$F77" ]; then
    $ECHO "\n   No Fortran compiler found and accepted on this computer"
    $ECHO   "   Cannot proceed without a Fortran compiler"
    exit 1
fi

#
#   Test to see whether the compiler has necessary F90 support
#
cat <<EOF > F90test.f
      PROGRAM TEST
      ALLOCATABLE WORK(:)
      ALLOCATE(WORK(199))
      END PROGRAM
EOF
$F77 -o F90test.x F90test.f >/dev/null 2>&1
if [ ! -r F90test.x ]; then
    f90yes=" -DNO_F90"
    rm -f F90test.x F90test.o F90test.f
else
    f90yes=""
    rm -f F90test.x F90test.o F90test.f
fi
#
$ECHO "\n   Checking for C compiler ..."
$ECHO   "   from this list: $ccmplist \n"
for comp in $ccmplist; do
    set dummy $comp; ac_word=$2
#   Add ":" to IFS, the list of internal field separators
#   (normally space, tab, and newline).
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
	if [ -f $ac_dir/$ac_word ]; then
	  get_yes_or_no "Compiler $ac_dir/$ac_word found, use this compiler?" y
          if [ $answer = 'y' ]; then
	    ac_cv_prog_C=$ac_word
	    break
          fi
	fi  
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_C" && ac_cv_prog_C=""
    CC="$ac_cv_prog_C"
    if [ -n "$CC" ]; then
        $ECHO "\n-->Compiler $CC found and accepted."
        break
    fi
done
if [ -z "$CC" ]; then
    $ECHO "\n   No C compiler found and accepted on this computer"
    $ECHO   "   Cannot proceed without a C compiler in path"
    exit 1
fi
#
# Check out mathematical libraries. May have to expand library list?
#
# For rs6000 we first try ESSL, then BLAS
#
if [ $WHICH = "nec" ]; then
    pdpackextras=""
else
    pdpackextras="linpack.o eispack.o"
fi

# Try to find paths to special libraries
if [ $WHICH = "linux" ]; then
	testdir=`locate libmkl.so libmkl_p3.a`
	for i in $testdir; do
	  dn=`dirname $i`; dirlist="$dn $dirlist"
	done
	testdir=`locate libatlas.a`
	for i in $testdir; do
	  dn=`dirname $i`; dirlist="$dn $dirlist"
	done
        if [ ! -z $PGI ]; then
	if [ $PGI != "" ]; then
	  dirlist="$PGI/linux86/lib $PGI/linux86-64/*/lib $dirlist"
	fi
        fi
fi
# prepend LIBDIRS environment variable to add user library dirs.
dirlist="$LIBDIRS $dirlist"
LIB=''
LIBDIR=''
$ECHO "\nTesting existence of libraries in this order:"
$ECHO   " $liblist"
$ECHO   "Directory search list for libraries:"
$ECHO   " $dirlist \n"
get_yes_or_no "Do you want to replace this with your own directory search list?" n
if [ $answer = 'y' ]; then
   $ECHO   "OK, please enter it : \c"
   read dirlist
   $ECHO   "Revised directory search list for libraries:"
   $ECHO   " $dirlist \n"
fi

if [ -n "$liblist" ]; then
for testlib in $liblist; do
   for testdir in $dirlist; do
#     echo "testing existence of $testdir/$testlib"
      if [ -f $testdir/$testlib ]; then
	get_yes_or_no "Found $testdir/$testlib, use it?" y
	if [ $answer = 'y' ]; then
          LIBDIR=$testdir
          case $testlib in
            libacml.a) LIB='-lacml'; blas3=true;lapack=true;;
	    libatlas.a) LIB='-lf77blas -latlas'; blas3='true'
                       pdpackextras="$pdpackextras gp_zlapack.o";;
	    libessl.a) LIB='-lessl'
	               blas3="true" # - but not complete...
		       # double-check dlapack.
                       pdpackextras="$pdpackextras gp_zlapack.o gp_zblas.o  gp_dlapack.o";;
	    libesslp2.a) LIB='-lesslp2'
	               blas3="true";;
            libcomplib.sgimath.a) LIB='-lcomplib.sgimath'
	                          blas3='true';;
            libmkl_p3.a) LIB="-lmkl_p3 -lguide -lpthread -static"
                         blas3="true";;
            libmkl.so) LIB="-Wl,--rpath=$testdir -lmkl -lguide -lpthread"
                         blas3="true";;
	    lib[cd]xml.a) LIB='-ldxml'
	               blas3="true"; lapack="true"
	               cpp='-DVAR_DXML';;
            libblas.a) LIB='-lblas'
	               if nm $testdir/$testlib | grep "gemm" > /dev/null
		       then
		          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
		          then
		          blas2="true"
		       else
		          blas="true"
		       fi;;
            libveclib.a) LIB='-lveclib -lm'
	               if nm $testdir/$testlib | grep "gemm" > /dev/null 
		       then
		          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
		       then
		          blas2="true"
		       else
		          blas="true"
		       fi;;
            libmath.a) LIB='-lmath -lm -nx';;
	    libblas0_640.a) LIB="-l-lblas0_640 -l-leispack0_640 -l-llinpack0_640";;
          esac
	  break
	fi
      fi
      test -n "$LIB" && break
      done
   done
fi

#
# Look for LAPACK library.
# Add -L$LIBDIR to be sure compiler can find it.
#
if [ -n "$LIBDIR" -a $lapack != true ]; then
   if [ -f $LIBDIR/liblapack.so -o -f $LIBDIR/liblapack.a ]; then
      lapack=true; LIB="-L$LIBDIR -llapack $LIB"
   else
      LIB="-L$LIBDIR $LIB"
      for testdir in $dirlist; do
         if [ -f $testdir/liblapack.a -o -f $testdir/liblapack.so ]; then
            lapack=true; LIB="-L$testdir -llapack $LIB"
            break
         fi
      done
   fi
fi


#
# Figure out list of needed numerical libraries.
#

[ "$lapack" = "true" ] || pdpackextras="$pdpackextras gp_dlapack.o gp_zlapack.o"
if [ "$blas3" != "true" ] ; then
    pdpackextras="$pdpackextras gp_dblas3.o"
    if [ "$blas2" != "true" ] ; then
       pdpackextras="$pdpackextras gp_dblas2.o"
       if [ "$blas" != "true" ] ; then
          pdpackextras="$pdpackextras gp_dblas1.o gp_zblas.o"
       fi
    fi
fi

if [ -z "$LIB" -a -n "$liblist" ]; then
    $ECHO '   No mathematical libraries seem to be available'
    $ECHO '   I will proceed without them\n'
elif [ -n "$LIB" ]; then
    $ECHO '\n-->The following mathematical library(ies) will be used:\n   '$LIB'\n'
fi      

#
# If necessary, we ask the user if Dalton should split the files 
# for him/her (if his/her filesystem only files less than 2Gb in size).
#

split="false"
if [ $WHICH = 'rs6000' -o $WHICH = 'sun4' -o $WHICH = 'iris4d' -o $WHICH = 'linux' ] ; then
    get_yes_or_no "Does your file system allow files bigger than 2 Gb?" y
    if [ "$answer" = "n" ]; then
       split="true"
    fi
fi

#
# Determine memory size, also ask whether user would like to active the
# possibility of storing the two-electron integrals in memory 
# Observe, that the minimal value is not 0, it is 1 because
# some compilers (g77) do not like arrays with no elements.

$ECHO '\nDALTON uses almost 7 million *8 words (56 Megabytes) of static'
$ECHO 'allocations, in addition to the dynamic allocation.'
$ECHO '\nDALTON has the possibility to reserve an amount of static memory'
$ECHO 'for storing two-electron integrals in direct and parallel calculations'
$ECHO 'Storing some or all of the 2-el. integrals in memory will speed up'
$ECHO 'direct and parallel calculations (and in particular the latter).'
$ECHO 'NOTE: This will increase the static memory allocation used by DALTON'

get_yes_or_no "\nWould you like to activate the possibility of storing 2-el.int. in memory?" n
if [ "$answer" = "y" ]; then
    incoresiz=0
#   only accept positive numbers
    while [ $incoresiz -le 0 ]
    do
       $ECHO 'How many millions of *8 words to use for storing 2-el.integrals? \c'
       read incoresiz
#      check that user hasn't just hit return (giving an empty string)
       if [ "$incoresiz" = "" ]; then incoresiz=0; fi
       incoresiz=`expr $incoresiz \* 1000000`
    done
    $ECHO '\n-->Program will be installed with '$incoresiz' words used for storing 2-el.integrals'
    
else
    incoresiz=1
fi

#
$ECHO '\nMaximum amount of work memory for dynamic allocations can be'
$ECHO 'changed at run time with the environment variable WRKMEM'
$ECHO 'or by using the -M option to the run script: "dalton -M mb ...".'
$ECHO 'We recommend at least 20 million *8 words work memory,'
$ECHO 'larger for correlated calculations, but it should for maximum'
$ECHO 'efficiency NOT exceed available physical memory.\n'
memsiz=0
# only accept positive numbers
while [ $memsiz -le 0 ]
do
    $ECHO 'How many millions of *8 words to use as default for work memory? \c'
    if test "$do_quick_config" = y; then
       memsiz=50
    else 
       read memsiz
    fi
#   check that user hasn't just hit return (giving an empty string)
    if [ "$memsiz" = "" ]; then memsiz=0; fi
    memsiz=`expr $memsiz \* 1000000`
done
$ECHO '\n-->Program will be installed with a default work memory of '$memsiz' words'

#
# Determine location for executable and run script
#

curr=`pwd`
$ECHO '\n-->Current directory is '$curr'\n'

INSTALL_DIR=$curr/bin
get_yes_or_no 'Use ./bin as installation directory for binaries and scripts?' y

while [ "$answer" = "n" ]
do
    $ECHO 'Please enter another installation directory: \c'
    read INSTALL_DIR
    $ECHO '\n-->DALTON executable and script will be placed in '$INSTALL_DIR' directory\n'
    if [ ! -d "$INSTALL_DIR" ]; then
        $ECHO "ERROR: $INSTALL_DIR does not exist, will be created now."
	mkdir "$INSTALL_DIR"; mkdir_ok=$?
        if [ $mkdir_ok ]; then answer="ok"
        else $ECHO "Sorry, the specified directory could not be created"; fi
    else
        answer="ok"
    fi
done
if [ ! -d "$INSTALL_DIR" ]; then
   mkdir "$INSTALL_DIR"
fi

#
# Determine default basis set library location
#

basdir=$curr'/basis/'
$ECHO '\n-->Default basis set directory will be '$basdir'\n'
if [ -d "$basdir" ]; then 
  get_yes_or_no '\nUse this directory as default basis set directory?' y
else
  $ECHO "Sorry, this directory does not exist."
  answer=n
fi

while [ "$answer" = "n" ]
do
    $ECHO '\nPlease choose another default basis set directory (must end with /) \c'
    read basdir
    $ECHO '\n-->Default basis set directory will be '$basdir'\n'
    if [ ! -d "$basdir" ]; then $ECHO "Sorry, this directory does not exist"
    else answer="ok"; fi
done

#
# Determine default scratch disk space for calculations
#

if [ -d '/work' ]; then
    worksp='/work'
elif [ -d '/scratch' ]; then
    worksp='/scratch'
elif [ -d '/scr' ]; then
    worksp='/scr'
elif [ -d '/temp' ]; then
    worksp='/temp'
else
    $ECHO '\nI did not find /work, /scratch, /scr, or /temp. I will use /tmp'
    worksp='/tmp'
fi

$ECHO '\n-->Job specific directories under $SCRATCH/$USER\n-->will be used for temporary files when running DALTON\n'
get_yes_or_no 'Use SCRATCH='$worksp' as default root scratch space in "dalton" run script?' y

if [ "$answer" = "n" ];  then
    $ECHO 'Please enter default root scratch directory: \c'
    read worksp
fi

#
#
# We are beginning to see the end of the installation requirements
#
# We will now dump machine specific things to Makefile.config
#
tab=`$ECHO "\t"`

$ECHO '\n-->Creating Makefile.config ...'

backup -v Makefile.config

#
# Parallel preprocessor directive need to be set
#

if [ "$mesp" = "mpi" ]; then
    parop='VAR_MPI'
elif [ "$mesp" = "pvm" ]; then
    parop='VAR_PVM'
else
    parop=
fi

case "$WHICH" in
    rs6000)
          case $opsys in
	  2)
             cpp="-w -P -DSYS_AIX -DSYS_AIX23 -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
             if [ $split = 'true' ] ; then
                cpp="$cpp -DVAR_SPLITFILES"
	     fi
             if [ "$mesp" != "dummy" ]; then
                cpp="$cpp -D$parop"
                if [ "$mesp" = "mpi" ]; then
                   def='parallel.x'
                else
                   def='dalpvm.x'
                fi
	     fi
             inc='-I../include'
             cpp=${cpp}" -DIMPLICIT_NONE"${f90yes};;
          *)
             cpp="-WF,-DSYS_AIX,-DVAR_MFDS,-D'INSTALL_WRKMEM=$memsiz',-D'INSTALL_MMWORK=$incoresiz'"
             if [ $split = 'true' ] ; then
                cpp="$cpp,-DVAR_SPLITFILES"
             fi
             if [ "$mesp" != "dummy" ]; then
                cpp="$cpp,-D$parop"
                set_parallel_def $mesp
                copt="$copt -DVAR_MPI"
             fi
	     inc='-I../include'
             cpp=${cpp}",-DIMPLICIT_NONE"
	     if [ "$f90yes" = " -DNO_F90" ]; then
	        cpp=${cpp}",-DNO_F90"
	     fi
          esac
          copt="$copt -I../include -DSYS_AIX -D_LARGE_FILES -qlanglvl=stdc99 -DRESTRICT=restrict -O3 -qarch=auto -qtune=auto"
	  opt='-O3 -qstrict -qarch=auto -qtune=auto -qmaxmem=-1 -qextname'
	  if [ $bit = '32' ]; then
	     opt="$opt -bmaxdata:0x80000000 -bmaxstack:0x10000000"
	  else
	     copt="$copt -q64"
	     opt="$opt -q64"
	     cpp=${cpp}",-DVAR_INT64"
	  fi;;
    iris4d)
          cpp="-DSYS_IRIX -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          case $opsys in
               IRIX64)  opt='-O2 -64 -mips4 -G 0 -OPT:Olimit=0 -woff 2290'
                       copt='-O2 -64 -mips4 -G 0 -OPT:Olimit=0'
                        cpp="$cpp -DVAR_INT64";;
	       *)  opt='-O2 -n32 -mips3 -G 0 -OPT:Olimit=0 -woff 2290'
                  copt='-O2 -n32 -mips3 -G 0 -OPT:Olimit=0';;
          esac
	  if [ $F77 = 'f90' ]; then
                F77="f90 -cpp"
                cpp="$cpp -DVAR_MFDS"
          else
                cpp="$cpp -DNO_F90"
          fi
          if [ $split = 'true' ] ; then
              cpp="$cpp -DVAR_SPLITFILES"
          fi
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
              set_parallel_def $mesp
          fi
	  inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE";;
    cray)
          cpp="-DSYS_CRAY -DVAR_INT64 -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz' -DVAR_VECTOR"
          if [ "$mesp" != "dummy" ]; then
                cpp="$cpp $parop"
          fi
	  inc='-I../include'
	  cpp=${cpp}" -DIMPLICIT_NONE"${f90yes}
          opt="-Wf\"-i 64 -a stack -dp\" -Wl\"-i ./equivalences\" -Wp\"-F\""
          def='cray.x';;
    cray_t90)
          cpp="-DSYS_T90 -DVAR_INT64 -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz' -DVAR_VECTOR"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp $parop"
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"${f90yes}
          opt="-O nofastint -d p -Wl\"-i ./equivalences\" -Wp\"-F\""
          def='t90.x';;
    cray_t3e)
          cpp="-DSYS_T3D -DVAR_INT64 -DVAR_MFDS -DVAR_NONAMELIST -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
          fi
	  inc='-I../include -I/opt/ctl/mpt/mpt/include'
          cpp=${cpp}" -DIMPLICIT_NONE"${f90yes}
          opt="-dp -F -Oaggress,scalar3,vector3,unroll2,msgs,negmsgs"
          def='t3d.x'
          LIB="crilib.cld -Wl,-Dstreams=on -lmfastv";;
    nec)
          cpp="-DSYS_NEC DVAR_INT64 D'INSTALL_WRKMEM=$memsiz' D'INSTALL_MMWORK=$incoresiz' USX DVAR_MFDS DVAR_REAL DVAR_VECTOR"
          if [ "$mesp" = "dummy" ]; then
             cpp="-cpp $cpp"
          else
	     set_parallel_def $mesp
	  fi
          inc='-I../include'
          cpp=${cpp}" DIMPLICIT_NONE"
	  if [ "$f90yes" = " -DNO_F90" ]; then
	     cpp=${cpp}" DNO_F90"
	  fi
	  opt='-float0 -w double8 -ptr byte -b -pvctl noassume loopcnt=10000000 -fopp';;
    alpha)
          cpp="$cpp -DSYS_DEC -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
             set_parallel_def $mesp
	  fi
	  inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"${f90yes}
          opt='-fast -fpe3 -warn nouncalled';;
    sun4)
          cpp="-DSYS_SUN -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          if [ $split = 'true' ] ; then
              cpp="$cpp -DVAR_SPLITFILES"
          fi
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
	     set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          opt='-fast';;
    hp)
          cpp="-DSYS_HPUX -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
	      set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          if [ $arch = "ia64/hpux" ]; then
              opt='+O2 +Onolimit +Oparmsoverlap +U77 +ppu'
             copt='+O2 +Onolimit +Oparmsoverlap'
             LIB="$LIB"
             cpp=${cpp}" -DVAR_INT64"
          else
             if [ $F77 = 'f90' ]; then
                 case $bit in
                     64) opt='+DA2.0W +O2 +U77 +Onolimit +Ofastaccess +ppu'
                         LIB="$LIB +U77 +DA2.0W"
                         copt='+DA2.0W +O3 +Onolimit +Ofastaccess'
	 		 cpp=${cpp}" -DVAR_INT64";;
                     *)  opt='+DA2.0 +O2 +U77 +Onolimit +Ofastaccess'
                         LIB="-lV7 +U77 $LIB"
                         copt='+DA2.0 +O3 +Onolimit +Ofastaccess';;
                 esac
             else
                 opt='+O2 +U77 +E4 +E5'
                 safe_opt='+O1 +U77 +E4 +E5'
                 copt='-D_FILE_OFFSET_BITS=64 +O3'
                 LIB="-lV7 +U77 $LIB"
             fi
          fi
          copt=${copt}" -AC99"
          cpp=${cpp}${f90yes};;
    linux-alpha)
          cpp="$cpp -DHAVE_GCPP -DSYS_DEC -DVAR_INT64 -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
	  if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
	      set_def $mesp
	  fi
#         opt='-fast -assume no2underscores -check nopower'
#         hjaaj Oct 04: note that HAVE_GCPP is now used to tell c-routines
#         that the fort fortran compiler can make 2 underscores
          opt='-fast -check nopower'
	  inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"${f90yes}
          copt='-fast';;
    linux) 
          cpp="-DSYS_LINUX -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          if [ $split = 'true' ] ; then
             cpp="$cpp -DVAR_SPLITFILES"
          else
             cpp="$cpp -D_FILE_OFFSET_BITS=64"
          fi
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
             set_parallel_def $mesp
          fi
          # if we have mpif77 or mpif90, we need to find backend compiler to set the right options
          if [ "$F77" = mpif77 -o "$F77" = mpif90 ]; then
             if mpif77 -V 2>&1 | grep -q Intel 2> /dev/null; then
                F77_be=ifort
             elif mpif77 -v 2>&1 | grep -q 'gcc version 3' 2> /dev/null; then
                F77_be=g77
             elif mpif77 -v 2>&1 | grep -q 'gcc version 4' 2> /dev/null; then
                F77_be=gfortran
             else
                # wild guess.
                F77_be=pgf77
             fi
             get_yes_or_no "Is backend compiler $F77_be ?" y
             if [ "$answer" = "n" ]; then
                $ECHO 'Then please specify correct backend compiler : \c'
                read F77_be
                $ECHO "Continuing with backend compiler $F77_be"
             fi
          else
             F77_be=$F77
          fi
          case $F77_be in
          [ei]fc|ifort)
             if  grep -qw pni /proc/cpuinfo 2>/dev/null; then
                 proc='-xP'
             elif grep -qw sse2 /proc/cpuinfo 2>/dev/null; then
                 proc='-xW'
             elif [ $prc = 'i686' ]; then
                 proc='-tpp6 -xK'
             elif [ $prc = 'i586' ]; then
                 proc='-tpp5 -xi'
             else
                 proc=''
             fi
             cpp="-DVAR_IFC $cpp"
#            Dec-07: do not use "-ip" option for interprecedural optimization within file
#                    gives erroneous code in eri/, at least for ifort version 9.1 /hjaaj
#                    (-ip will problably never give big speed-up, anyway)
             opt="-O3 $proc -w"
#            opt="-O3 $proc -ip -w"
             safe_opt="-O1 -w"
             case $CC in
#                [ie]cc|mpicc) copt="-O3 $proc -ip -restrict -DRESTRICT=restrict";;
                 [ie]cc|mpicc) copt="-O3 $proc -restrict -DRESTRICT=restrict";;
                 gcc) copt="-O3 -malign-double -std=c99 -DRESTRICT=restrict";;
             esac
             LIB="$LIB -Vaxlib"
             ;;
          pgf77)
             cpp="-DVAR_PGF77 $cpp"
             # vect=idiom gives 40% performance improvement on opteron (pgcc5.2).
             copt="-fastsse -Munroll -Mvect=idiom -c9x -DRESTRICT=restrict"
              opt="-fastsse -Munroll"; safe_opt="-fastsse"
             ;;
          g77)
              test_linux_g77="`$F77 -v 2>&1 | grep '2.96.54'`"
              if [ $test_linux_g77 != "" ]; then
                 $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
                 $ECHO "There are problems with the native Red Hat 7.0 compiler."
                 $ECHO "You should upgrade your gcc and gcc-g77-2.96.54 compiler to version 2.96.69 or later."
                 $ECHO "Dalton does NOT run correct with the current compiler."
                 $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
              fi
              test_linux_g77="`$F77 -v 2>&1 | grep '3.3.3'`"
              if [ "$test_linux_g77" != "" ]; then
                $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
                echo $test_linux_g77
                $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
                $ECHO "Version 3.3.3 is known to give erroneous Dalton code"
                $ECHO "(e.g. for SuSe Linux 9.1, while 9.2 has 3.3.4 which is OK)"
                $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING"
              fi
              cpp="-DVAR_G77 $cpp"
              case "$prc" in
              alpha)  copt="-mieee";;
              x86_64) copt="-march=x86-64"
		      cpp=${cpp}" -DVAR_INT64";;
                  *)  copt="-mcpu=$prc -malign-double";;
              esac
              copt="$copt -O3 -ffast-math -fexpensive-optimizations -funroll-loops"
               opt="$copt -fno-globals -Wno-globals"
              copt="$copt -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=2"
              ;;
          *)
#            assuming gfortran
             if [ $F77_be = "gfortran" ]; then
               gfver=`gfortran -v 2>&1 | awk '/^gcc version/{gsub("[^0-9]","", $3);print $3}'`
               echo "gfortran version $gfver prc=$prc"
	     else
	       gfver=400
               echo "$F77_be compiler is not defined in configure. Will be treated as gfortran version $gfver prc=$prc"
	     fi
             cpp="-DVAR_GFORTRAN $cpp -DGFORTRAN=$gfver"
             case $prc in
             i[0-9]86) grep -qw sse2 /proc/cpuinfo 2> /dev/null && prc=pentium4
                     march="-march=$prc";;
#            x86_64) march="-march=x86-64 -fdefault-integer-8"
#		     cpp="${cpp} -DVAR_INT64";;
# remove VAR_INT64 for gfortran - it breaks linking against
# precompiled BLAS libraries./pawsa-Mar-08
             x86_64) march="-march=x86-64"
		     ;;
                  *) march=" ";;
             esac
             copt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1"
              opt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize"
             ;;
          esac

          if [ "$mesp" = "dummy" ]; then
              def='linux.x'
          else
              def='linuxparallel.x'
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"${f90yes};;
    darwin) 
          cpp="-DSYS_LINUX -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz'"
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
              set_parallel_def $mesp
          fi
          if [ "$F77" = xlf ]; then
               cpp="-WF,-DSYS_AIX,-D'INSTALL_WRKMEM=$memsiz',-D'INSTALL_MMWORK=$incoresiz'"
               copt='-qarch=auto -O3 -qtune=auto -qmaxmem=-1 -qunroll=yes'
               opt="$copt -qextname -qstrict -noprebind"
               def='dalton.x'
               inc='-I../include'
               LIB='-L/opt/ibmcmp/lib -L/opt/ibmcmp/xlf/8.1/lib -L/opt/ibmcmp/vacpp/6.0/lib'
# Notes for xlf (8.1) under OS X 10.3:
# Tested for G5 architecture (not G4). Significant speedup over g77 for G5. 
# -prebind required for xlf fortran 8.1 on G5, for xlf 8.0 use -s and NOT -prebind
# LIB may need to be modified depending on installation of the xlf compiler. 
          elif [ "$F77" = g77 ]; then
               cpp="-DVAR_G77 $cpp"
               mcpu="-mcpu=7450"
               copt="$mcpu -O3 -ffast-math -fexpensive-optimizations -funroll-loops"
               copt2="$mcpu -O2 -ffast-math -fexpensive-optimizations -funroll-loops"
               opt="$copt2 -fno-globals -Wno-globals"
               copt="$copt -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=2"
               def='linux.x'
               inc='-I../include'
               LIB="-lcc_dynamic"
               cpp=${cpp}" -DIMPLICIT_NONE"
# Notes for g77 (3.4) under OS X 10.3:
# For maximum performance, proceed as follows:
#   1) set -O2 to -O3 in Makefile.config and run "make -k" 
#   2) reset -O3 to -O2 and rerun "make" 
#
# gfortran: Bin Gao, Mar. 9, 2009
          elif [ "$F77" = gfortran -o "$F77" = mpif90 ]; then
               gfver=`gfortran -v 2>&1 | awk '/^gcc version/{gsub("[^0-9]","", $3);print $3}'`
               echo "gfortran version $gfver prc=$prc"
               cpp="-DVAR_GFORTRAN -DGFORTRAN=$gfver $cpp"
               case $prc in
               i[0-9]86) grep -qw sse2 /proc/cpuinfo 2> /dev/null && prc=pentium4
                       march="-march=$prc";;
#              x86_64) march="-march=x86-64 -fdefault-integer-8"
#                      cpp="${cpp} -DVAR_INT64";;
# remove VAR_INT64 for gfortran - it breaks linking against
# precompiled BLAS libraries./pawsa-Mar-08
               x86_64) march="-march=x86-64"
                       ;;
                    *) march=" ";;
               esac
               copt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1 -DHAVE_NO_LSEEK64"
               opt="$march -O3 -Wl,-framework -Wl,vecLib -ffast-math -funroll-loops -ftree-vectorize"
               f90opt="$opt -I. -x f95-cpp-input"
#               cxx_ldflags="-lstdc++"
               if [ "$mesp" != "dummy" ]; then
                  copt="$copt -D$parop"
                  opt="$opt -D$parop"
                  f90opt="$f90opt -D$parop"
                  def='linuxparallel.x'
               fi
               inc='-I../include'
               LIB="-lgcc"
               cpp=${cpp}" -DIMPLICIT_NONE"
# use Vector Libraries for BLAS and LAPACK
               pdpackextras='linpack.o eispack.o'
# Done with Bin Gao
          else
               cpp="-D SYS_LINUX -D VAR_ABSOFT -D NO_F90 -D 'INSTALL_WRKMEM=$memsiz' -D IMPLICIT_NONE"
#              F90FLAGS = -YEXT_SFX=_ -YEXT_NAMES=LCS -s -w
               copt="-mcpu=7450"
               copt="$copt -O3 -ffast-math -fexpensive-optimizations -funroll-loops -std=c99"
               opt="-N11 -N15 -f -N22 -N116 -s -w -N3 -O"
               def='linux.x'
               inc='-I../include'
               LIB="-llapack -lblas -lf90math -lu77 -X -u -X _inidat_ -X -u -X _qbdinit_ -X -u -X _rspinf_ \
-X -u -X _oitbd_ -X -u -X _bdjep_ -X -u -X _bdtra_ -X -u -X _sbdorb_ -X -u -X _sbdtap_ \
-X -u -X _sbdgetd_ -X -u -X _sbdtra_ -X -u -X _sbddim_ -Lsirius -lsirius"
          fi;;
    hal) 
          cpp="-DSYS_HAL -DVAR_MFDS -D'INSTALL_WRKMEM=$memsiz' -D'INSTALL_MMWORK=$incoresiz' -Wp,-P"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
             def='parallel.x'
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"${f90yes}
          opt="-Kfast,gs,V8PLUS,eval -fs"
          LIB="$LIB -L/usr/ucblib -lucb"
esac

if [ "$WHICH" = "rs6000" -a "$bit" = "64" ]; then
    arcommand="ar -X 64"
else
    arcommand="ar"
fi

# for safe compilers, set safe_opt to opt
if [ -z "$safe_opt" ]; then safe_opt="$opt"; fi

# Check for existence of lseek64 library call.
cat <<EOF >> conftest.c
#define _LARGEFILE64_SOURCE
#include <sys/types.h>
#include <unistd.h>
int main(){ off64_t l = lseek64(1,0,SEEK_SET); } 
EOF
if $CC $copt conftest.c -o conftest > config.log 2>&1; then
  echo "Proper 64-bit file access detected."
else
  cpp="$cpp -DHAVE_NO_LSEEK64"
  echo "Use default file access routines and hope for the best."
fi
rm conftest.c conftest > /dev/null 2>&1

cat <<EOF > Makefile.config
ARCH        = $WHICH
#
#
CPPFLAGS      = $cpp
F77           = $F77
CC            = $CC
LOADER        = $F77
RM            = rm -f
FFLAGS        = $opt
SAFEFFLAGS    = $safe_opt
CFLAGS        = $copt
INCLUDES      = $inc $parinc
LIBS          = $LIB $ldflags
INSTALLDIR    = $INSTALL_DIR
PDPACK_EXTRAS = $pdpackextras
GP_EXTRAS     = $gpextras
AR            = $arcommand
ARFLAGS       = rvs
# flags for ftnchek on Dalton /hjaaj
CHEKFLAGS  = -nopure -nopretty -nocommon -nousage -noarray -notruncation -quiet \
 -noargumants -arguments=number \
 -usage=var-unitialized
# -usage=var-unitialized:arg-const-modified:arg-alias
# -usage=var-unitialized:var-set-unused:arg-unused:arg-const-modified:arg-alias
#
default : $def
EOF

# Intel compiler seems to be a bit less optimized for certain routines, at
# least Itanium processors
# PS: Which version? Are they assumed to be ethernally buggy? And
# don't even THINK about modifying source files, including
# Makefiles.
if [ $F77 = 'ifc' -o $F77 = 'efc' -o $F77 = 'ifort' ]; then
echo 'SAFE2_FFLAGS = $(SAFEFFLAGS)' >> Makefile.config
else
echo 'SAFE2_FFLAGS = $(FFLAGS)' >> Makefile.config
fi

#
# Insert necessary additional features for parallel calculations
#

if [ "$mesp" = "mpi" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
MPI_INCLUDE_DIR = $parinc
MPI_LIB_PATH    = $parlibp
MPI_LIB         = $parlib
#
EOF
elif [ "$mesp" = "pvm" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
PVM_LIB_PATH = $parlibp
PVM_LIB_LIST = $parlib
PVM_NOD_PATH = $parnodp
PVM_NOD_PROG = $parnod
#
EOF
fi
#
# Include the rule for building the object files
#
cppuse=
if [ "$WHICH" = "rs6000" -a "$opsys" = "2" ]; then
    cppuse='cc'
fi


if [ $WHICH = 'hal' ]; then
   cat <<EOF >> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .f .o .c .i

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 
$tab\$(RM) \$*.f

.c.o:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -c \$*.F 

.F.i:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
elif [ $WHICH = 'rs6000' ]; then
   if [ $opsys = '2' ]; then
cat <<EOF>> Makefile.config
CPP        = $cppuse
#
# Suffix rules
#
.SUFFIXES : .F .o .c .i

.F.o:
$tab\$(CPP) \$(INCLUDES) \$(CPPFLAGS) \$*.F
$tab mv \$*.i \$*.f
$tab\$(F77) \$(FFLAGS) -c \$*.f 
$tab\$(RM) \$*.f

.c.o:
$tab\$(CC) \$(CFLAGS) -c \$*.c

.F.i:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
    else cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .o .c .i

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.c.o:
$tab\$(CC) \$(CFLAGS) -c \$*.c 

.F.i:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
    fi
elif [ $WHICH = 'darwin' ]; then
if [ "$F77" = g77 ]; then
cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .o .c .i

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.c.o:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -c \$*.c 

.F.i:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
else
cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .o .c .i

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.c.o:
$tab\$(CC) \$(INCLUDES) -DSYS_LINUX \$(CFLAGS) -c \$*.c 

.F.i:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
fi
else cat <<EOF>> Makefile.config
#
# Suffix rules
# hjaaj Oct 04: .g is a "cheat" suffix, for debugging.
#               'make x.g' will create x.o from x.F or x.c with -g debug flag set.
#
.SUFFIXES : .F .c .o .i .g .s

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.F.i:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i

.F.g:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -g -c \$*.F 

.F.s:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -S -g -c \$*.F 

.c.o:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -c \$*.c 

.c.i:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -E \$*.c > \$.i

.c.g:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -g -c \$*.c 

.c.s:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -S -g -c \$*.c 
EOF
fi
#
# Make sure Makefile.depend files exist
#
for i in abacus amfi cc densfit dft eri gp pdpack rsp sirius; do
 touch $i/Makefile.depend
done
#
# Update the DALTON run-script
#

$ECHO '\n-->Creating the DALTON run-script in '$INSTALL_DIR

backup -v $INSTALL_DIR/dalton

#
# When using PVM the name of the executable is renamed
#
DALEXE="dalton.x"
if [ $mesp = 'pvm' ]; then
    DALEXE="dalpvm.x"
fi
mpirun=`which mpirun 2>/dev/null` || mpirun=mpirun

cat <<EOF > $INSTALL_DIR/dalton
#!/bin/sh
################################################################################
#                                                                              #
# Shell-script for running DALTON                                              #
#                                                                              #
# Version 1.0 Feb. 1997 by T. Enevoldsen, Odense University                    #
# Converted to sh on February 23, 1997 by K.Ruud                               #
#                                                                              #
# Version 1.1 spring 2000 by K.Ruud and H.J.Aa.Jensen                          #
#                                                                              #
# Version 2.1 Feb. 2005 by K.Ruud, H.J.Aa.Jensen, and P. Salek                 #
#                                                                              #
################################################################################
#
# location of executeables
DALTON="$INSTALL_DIR/$DALEXE"
DALMPI="$INSTALL_DIR/dalpar.x"

MPIRUN="$mpirun"
# set TMPDIR (if not defined by e.g. NQS) and WRKDIR
[ -z "\$TMPDIR" ] && TMPDIR="$worksp"

INSTALL_BASDIR="$basdir"
EOF
cat dalton.gnr >> $INSTALL_DIR/dalton

chmod 755 $INSTALL_DIR/dalton

$ECHO '\n   The configuration of DALTON has finished succesfully.'
$ECHO '   Check compiler flags etc. in Makefile.config and run "make" to get executable.\n'

exit 0
