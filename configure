#!/bin/bash
#
# Shell script for configuring Makefile.config needed to build the DALTON
# quantum chemistry code. 
#
# It tries to determine what platform we are on (although allowing builds 
# for other platforms, as needed for crosscompiling), as well as detect any
# interesting mathematical libraries on the present computer.
#
#
# Known problems: The parallelization installation is rudimentary
#                 The checks for compilers and libraries hopefully works
#
# Written by K.Ruud, Dec-1 1996
# Revised 970401 hjaaj
# Linux support added 970414 by Konrad Hinsen.
# HP revisions 970505-ekd/Konrad Hinsen. Combined by kr 080597
#
#
# Check specific processor for optimization flags for linux machines 
# (uname -m) -mpentiumpro for i686, -mpentium for i586, and -m486 otherwise
# 990831-ekd
# Defined new VAR_PGF90 for Portland Group compiler on Linux systems (has 
# POINTER statement, so memory allocation is easier)
# More intelligent attempts at including pdpack files according to available
# machine libraries
#

# defaults section for quick config
do_quick_config=n

# set the target def 
set_parallel_def() {
    if [ "$1" = "mpi" ]; then
       def='parallel.x'
    else
       $ECHO ERROR: $mesp is not working for this version of Dalton
       exit 1
       def='dalpvm.x'
    fi
}

# Read of yes/no answer, the output in standardized to 'y' or 'n'. /hjaaj
get_yes_or_no() {
    if test "$do_quick_config" = y; then
        answer="$2"
    else
        answer=
    fi
    while [ "$answer" != "y" -a "$answer" != "n" ]
    do
        if [ "$2" = "y" ]; then $ECHO "$1 [Y/n] \c"
      elif [ "$2" = "n" ]; then $ECHO "$1 [y/N] \c"
      else  $ECHO "$1 [y/n] \c"; fi
      
      read answer
      if [ "$answer" = "" ]; then answer="$2"; fi
#     standardize answer
      case $answer in
        y* | Y*) answer="y" ;;
        n* | N*) answer="n" ;;
      esac
    done
}
#
# Define backup function /hjaaj
#
backup () {
  if [ "$1" = "-v" ]; then ekko=1; shift
  else ekko=0;
  fi
  for i in $* ; do
     if [ -f "${i}" ]; then
        for j in 6 5 4 3 2 1 0 ; do
           jp=`expr $j + 1`
           if [ -f "${i}.${j}" ]; then
              [ $ekko -eq 1 ] && echo "Backup: renaming ${i}.${j} to ${i}.${jp}"
              mv -f "${i}.${j}" "${i}.${jp}"
           fi
        done
        if [ $ekko -eq 1 ]; then echo "Backup: renaming ${i} to ${i}.0"; fi
        mv -f "${i}" "${i}.0"
     fi
  done
}


if [ "$2" = "" ]; then pref=dalton; else pref="$2"; fi
def="$pref.x"

if [ "-e" = "`echo -e`" ]; then
   ECHO="echo"
else
   ECHO="echo -e"
fi

$ECHO '\n------------------------------------------------------------------'
$ECHO   '   Configuring the DALTON Makefile.config and "dalton" run script'
$ECHO   '------------------------------------------------------------------\n'

blas="false"
blas2="false"
blas3="false"
lapack="false"
opsys=`uname -s`
    $ECHO "INFO: Operating system from 'uname -s' : $opsys"
if [ "${opsys:0:5}" = 'Linux' -o "${opsys:0:6}" = Darwin -o "${opsys:0:6}" = "CYGWIN" ]; then
    prc=`uname -m`
    $ECHO "INFO: Processor type   from 'uname -m' : $prc"
fi

arclist='aix cray cray-t3d cray-t3e cygwin dec-alpha linux-alpha linux paragon sgi sun hp cray-t90 nec darwin'

#
# Attempting auto-configuration. The list of replies from uname should be
# extended!
#
if test x"$1" = x-q -o x"$1" = x--quick; then
   do_quick_config=y
   shift
fi

if [ -z "$1" ]; then
    case $opsys in
        AIX )     ARCH="-aix"    ;;
        CYGWIN* ) ARCH="-cygwin" ;;
        Darwin )  ARCH="-darwin" ;;
        IRIX|IRIX64 ) ARCH="-sgi";;
        Linux|FreeBSD ) if [ "`uname -m`" = alpha ]; then
                  ARCH="-linux-alpha"
                  $ECHO "* linux alpha tested only with COMPAQ fort compiler *\n"
            else 
                  ARCH="-linux"
            fi ;;
        OSF1 )    ARCH="-dec-alpha";;
        HP-UX )   ARCH="-hp";;
        SunOS )   ARCH="-sun";;
        * ) $ECHO "Error: No architecture specified.\nPlease enter architecture on command line as 'configure -architecture'\n\nOnly the following architectures are defined:\n    $arclist"
        exit 1;;
    esac
    $ECHO "No architecture specified, attempting auto-configuration:"
    get_yes_or_no "This appears to be a $ARCH architecture. Is this correct?" y
    if [ "$answer" = "n" ]; then
        $ECHO "\nPlease configure manually from command line: 'configure -<architecture>'\n
where architecture is one of the following:\n    $arclist"
        exit 1
    else
        $ECHO ""
    fi
else
    ARCH="$1"
fi
$ECHO "--> Installing DALTON on a $ARCH computer\n"
case $ARCH in
    -aix|-rs6000 ) WHICH="rs6000";;
    -sgi|-iris4d|-irix ) WHICH="iris4d";;
    -paragon ) WHICH="paragon";;
    -cray ) WHICH="cray";;
    -cray-t90 ) WHICH="cray_t90";;
    -cray-t3d ) WHICH="cray";;
    -cray-t3e ) WHICH="cray_t3e";;
    -cygwin ) WHICH="cygwin";;
    -nec ) WHICH="nec";;
    -sun|-sun4 ) WHICH="sun4";;
    -dec-alpha|-alpha|-ultrix ) WHICH="alpha";;
    -linux-alpha ) WHICH="linux-alpha";;
    -hp ) WHICH="hp";;
    -linux ) WHICH="linux";;
    -darwin ) WHICH="darwin";;  
    -?|-help ) $ECHO " Run from command line: 'configure -<architecture>'\n\n Only the following architectures are defined:\n    $arclist"
        exit 1;;
    * ) $ECHO "$1 is an unsupported architecture. Choose one of\n   $arclist\n\n NOTE: The syntax is 'configure -<architecture>'\n"
        exit 1;;
esac
#
# Now we try to check the compiler and find some mathematical libraries. 
# I don't think I will find more than two possible libraries of interest, 
# thus define only two for each computer type.
# Check first local libraries (hoping they were installed there for a
# reason), then system-provided libraries.
libdirlist='/lib /usr/local/lib /usr/lib /usr/local/lib/ATLAS /lib64 /usr/lib64 /usr/local/lib64'

case $WHICH in
    rs6000)   liblist='libessl.a libesslp2.a libblas.a'
              complist='xlf f90 gfortran'
              ccmplist='xlc cc gcc';;
    iris4d)   liblist='libcomplib.sgimath.a libblas.a'
              complist='f90 gfortran'
              ccmplist='cc gcc';;
    cray)     liblist=''
              complist='cf90 f90'
              ccmplist='cc';;
    cray_t90) liblist=''
              complist='f90 cf90'
              ccmplist='cc';;
    cray_t3e) liblist=''
              complist='f90 cf90'
              ccmplist='cc';;
    nec)      liblist='libblas0_640.a libeispack0_640.a liblinpack0_640.a'
              complist='f77sx'
              ccmplist='ccsx';;
    alpha)    liblist='libblas.a libdxml.a'
              complist='f90 gfortran'
              ccmplist='cc gcc';;
    linux-alpha) liblist='libcxml.a'
              complist='fort gfortran'
              ccmplist='ccc gcc';;
    sun4)     liblist='libblas.a'
              complist='f90 gfortran'
              ccmplist='cc gcc';;
    paragon)  liblist='libmath.a libblas.a'
              complist='if90 f90'
              ccmplist='cc';;
    darwin)   libdirlist="/opt/local/lib /sw/lib $libdirlist" # also find libraries installed with MacPorts or fink
              liblist='libacml.a libmkl.dylib libmkl_p3.a libatlas.a libblas.a'
              complist='ifort pgf95 pgf90 gfortran g95'
              ccmplist='icc ecc pgcc gcc';;
    linux|cygwin)    liblist='libacml.a libmkl.so libmkl_p3.a libatlas.a libblas.a'
              complist='ifort pgf95 pgf90 gfortran g95'
              ccmplist='icc ecc pgcc gcc';;
    hp)       liblist='libblas.a libveclib.a'
              complist='f90'
              ccmplist='cc'
esac
#
# $opsys defined above with 'uname -s'; however, for
# AIX systems we need to know which version of the operating system we have.
#
if [ $WHICH = 'rs6000' ]; then
   opsys=`uname -v`
   $ECHO "INFO: Operating system version from 'uname -v' : $opsys"
fi
#
# For SGI and HP we need to know if this is a 64 or 32 bits computer
# If one wants 32-bit code on a 64-bit machine, just answer 'n' to
# the question.
#
$ECHO "\nNote that 64-bit integers are desirable for Cholesky and very large
scale CI, otherwise the most important effect is that some files will be bigger.

If you choose 64-bit integers, be careful that any system library
routines (incl. MPI) also use 64-bit integers!\n"

if [ $WHICH = 'iris4d' ]; then
    if [ $opsys = 'IRIX64' ]; then
      get_yes_or_no "This appears to be a 64-bit architecture. Do you want 64-bit integers?" n
      if [ "$answer" = "n" ]; then
        bit='64'
      else
        opsys='IRIX'
        bit='32'
      fi
    else
      opsys='IRIX'
      bit='32'
    fi
elif [ $WHICH = 'hp' ]; then
    spec=`uname -m`
    if [ $spec = '9000/800' ]; then
      bit='64'
      arch='hpux'
    elif [ $spec = "ia64" ]; then
      bit='64'
      arch='ia64/hpux'
    else
      bit='32'
      arch='hpux'
    fi
    if [ $arch = "hpux" ]; then
       get_yes_or_no "This appears to be a $bit-bit architecture. Do you want 64 integers?" n
       if [ "$answer" = "n" ]; then
         bit='32'
       else
         bit='64'
       fi
    fi
elif [ $WHICH = 'rs6000' ]; then
    get_yes_or_no "Do you want 64-bit integers?" n
    if [ "$answer" = "y" ]; then
        bit='64'
    else
        bit='32'
    fi
else
    get_yes_or_no "Do you want 64-bit integers?" n
    if [ "$answer" = "y" ]; then
        bit='64'
    else
        bit='32'
    fi
fi

#
# Parallel Dalton?
#

mesp='dummy'
if [ "$WHICH" = "cygwin" ]; then
   $ECHO "Parallel MPI version not implemented for cygwin"
   answer="n"
else
   get_yes_or_no 'Do you want to install the program in a parallel MPI version?' y
fi

if [ "$answer" = "y" ]; then
#
# Determine message passing protocol to be used
#hj# hjaaj March 2005: disabled as only MPI is working now
#

#hj# mesp=
    mesp="mpi"
#hj#
    while [ "$mesp" != "mpi" -a "$mesp" != "pvm" ]
    do
        $ECHO 'Do you want to use "mpi" or "pvm" for message passing? \c'
        read mesp
    done
    parinc=
    parlib=
    parlibp=
    parnod=
    parnodp=
#
    if [ "$mesp" = "mpi" ]; then
        $ECHO "\n-->WARNING: Makefiles for MPI architecture are difficult to guess"
        $ECHO "   Please compare the generated Makefile.config with local documentation."
#
# The only computer I can think of with a separate compiler for parallel
# MPI code is IBMs xlf
#
        if [ "$WHICH" = "rs6000" -o "$WHICH" = "darwin" ]; then
            complist="mpxlf mpxlf_r mpif90 $complist"
            ccmplist="mpcc  mpcc_r  mpicc  $ccmplist"
            parlib='no'
        elif [ "$WHICH" = "cray_t3e" ]; then
            parlib='no'
        else
            complist="mpif90 mpiifort $complist"
            ccmplist="mpicc  mpiicc   $ccmplist"
            parlib='yes'
        fi
#
        pardir=$libdirlist
        incdir='/usr/include /usr/local/include /local/include'

#
# Modify for SGI that may have both 32 and 64 bit architectures
#
        if [ $WHICH = 'iris4d' ]; then
            if [ $opsys = 'IRIX64' ]; then
                pardir="/usr/lib64 /usr/lib64/mips4/ $libdirlist"
            else
                pardir="/usr/lib32 $libdirlist"
            fi
        fi
#
# MPI settings, first we do the mpi-library
#
        if [ $parlib = 'yes' ]; then
            parlib=
            tmplib='libmpi.a libmpi.so'
            incfile='mpif.h'
            for testdir in $pardir; do
                for testlib in $tmplib; do
                    if [ -f $testdir/$testlib ]; then
                        parlib='-lmpi'
                        parlibp=-L$testdir
                        break
                    fi
                done
                test -n "$parlib" && break
            done
#
# Now we try to find an include directory
#
            for testdir in $incdir; do
                if [ -f $testdir/$incfile ]; then
                    parinc=-I$testdir
                    break
                fi
            done
        elif [ "$parlib" = "no" ]; then
            parlib=
        fi
#
# PVM settings, we need two PVM library files
#
    elif [ $mesp = 'pvm' ]; then
         $ECHO 'Sorry, PVM not implemented in this version.'
#        parinc='-I$(PVM_ROOT)/include'
#        parlibp='-L$(PVM_ROOT)/lib/$(PVM_ARCH)'
#        parlib='-lfpvm3 -lpvm3'
#        parnodp='$(HOME)/pvm3/bin/$(PVM_ARCH)'
#        parnod='dalton_pvmnode.x'
    fi
fi
#
# Parallel information finished setting
#
#
# Test for the existence of the compiler
#
$ECHO "\n   Checking for Fortran compiler ..."
$ECHO   "   from this list: $complist \n"

get_yes_or_no "Do you want to replace this with your own Fortran compiler search list?" n
if [ $answer = 'y' ]; then
   $ECHO   "OK, please enter it : \c "
   read complist
   $ECHO   "Revised Fortran compiler search list: $complist \n"
fi

for comp in $complist; do
    set dummy $comp; ac_word=$2
#   Add ":" to IFS, the list of internal field separators
#   (normally space, tab, and newline).
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
        if [ -f $ac_dir/$ac_word ]; then
          get_yes_or_no "Compiler $ac_dir/$ac_word found, use this compiler?" y
          if [ $answer = 'y' ]; then
            ac_cv_prog_F90=$ac_word
            break
          fi
        fi  
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_F90" && ac_cv_prog_F90=""
    F90="$ac_cv_prog_F90"
    if [ -n "$F90" ]; then
        $ECHO "\n-->Compiler $F90 found and accepted."
        F90_be="$F90" # make sure F90_be (be for back-end) always set
        break
    fi
done
if [ -z "$F90" ]; then
    $ECHO "\n   No Fortran compiler found and accepted on this computer"
    $ECHO   "   Cannot proceed without a Fortran compiler"
    exit 1
fi

#
#   Test to see whether the compiler has necessary F90 support
#
cat <<EOF > F90test.f
      PROGRAM TEST
      ALLOCATABLE WORK(:)
      ALLOCATE(WORK(199))
      END PROGRAM
EOF
$F90 -o F90test.x F90test.f >/dev/null 2>&1
if [ ! -r F90test.x ]; then
    $ECHO "$F90 does not have the necessary F90 support. Please specify another compiler"
    exit 1
    F90mod='F90mod_has_not_been_defined_for_this_compiler_in_configure_yet'
fi
rm -f F90test.x F90test.o F90test.f

# if we have mpif90, we need to find backend compiler to set the right options
if [ "$F90" = mpif90 ]; then
   if mpif90 -V 2>&1 | grep -q Intel 2> /dev/null; then
      F90_be=ifort
   elif mpif90 -v 2>&1 | grep -q 'gcc version' 2> /dev/null; then
      F90_be=gfortran
   else
      # wild guess.
      F90_be=pgf95
   fi
   get_yes_or_no "Is backend compiler $F90_be ?" y
   if [ "$answer" = "n" ]; then
      $ECHO 'Then please specify correct backend compiler : \c'
      read F90_be
      $ECHO "Continuing with backend compiler $F90_be"
   fi
elif [ "$F90" = mpiifort ]; then
   F90_be=ifort
   get_yes_or_no "Is backend compiler $F90_be ?" y
   if [ "$answer" = "n" ]; then
      $ECHO 'Then please specify correct backend compiler : \c'
      read F90_be
      $ECHO "Continuing with backend compiler $F90_be"
   fi
else
   F90_be=$F90
fi

#
$ECHO "\n   Checking for C compiler ..."
$ECHO   "   from this list: $ccmplist \n"

get_yes_or_no "Do you want to replace this with your own C compiler search list?" n
if [ $answer = 'y' ]; then
   $ECHO   "OK, please enter it : \c "
   read ccmplist
   $ECHO   "Revised C compiler search list: $ccmplist \n"
fi

for comp in $ccmplist; do
    set dummy $comp; ac_word=$2
#   Add ":" to IFS, the list of internal field separators
#   (normally space, tab, and newline).
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
        if [ -f $ac_dir/$ac_word ]; then
          get_yes_or_no "Compiler $ac_dir/$ac_word found, use this compiler?" y
          if [ $answer = 'y' ]; then
            ac_cv_prog_C=$ac_word
            break
          fi
        fi
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_C" && ac_cv_prog_C=""
    CC="$ac_cv_prog_C"
    if [ -n "$CC" ]; then
        $ECHO "\n-->Compiler $CC found and accepted."
        break
    fi
done
if [ -z "$CC" ]; then
    $ECHO "\n   No C compiler found and accepted on this computer"
    $ECHO   "   Cannot proceed without a C compiler in path"
    exit 1
fi
#
# Check out mathematical libraries. May have to expand library list?
#
# For rs6000 we first try ESSL, then BLAS
#
if [ $WHICH = "nec" ]; then
    pdpackextras=""
else
    pdpackextras="linpack.o eispack.o"
fi

# Try to find paths to special libraries
if [ $WHICH = "linux" ]; then
        testdir=`locate libmkl.so libmkl_p3.a`
        for i in $testdir; do
          dn=`dirname $i`; libdirlist="$dn $libdirlist"
        done
        testdir=`locate libatlas.a`
        for i in $testdir; do
          dn=`dirname $i`; libdirlist="$dn $libdirlist"
        done
        if [ ! -z $PGI ]; then
        if [ $PGI != "" ]; then
          libdirlist="$PGI/linux86/lib $PGI/linux86-64/*/lib $libdirlist"
        fi
        fi
fi
# prepend LIBDIRS environment variable to add user library dirs.
libdirlist="$LIBDIRS $libdirlist"
LIB=''
LIBDIR=''
$ECHO "\nTesting existence of libraries in this order:"
$ECHO   " $liblist"
$ECHO   "Directory search list for libraries:"
$ECHO   " $libdirlist \n"
get_yes_or_no "Do you want to replace this with your own directory search list?" n
if [ $answer = 'y' ]; then
   $ECHO   "OK, please enter it : \c "
   read libdirlist
   $ECHO   "Revised directory search list for libraries:"
   $ECHO   " $libdirlist \n"
fi

if [ -n "$liblist" ]; then
for testlib in $liblist; do
   for testdir in $libdirlist; do
#     echo "testing existence of $testdir/$testlib"
      if [ -f $testdir/$testlib ]; then
        get_yes_or_no "Found $testdir/$testlib, use it?" y
        if [ $answer = 'y' ]; then
          LIBDIR=$testdir

          case $testlib in
            libacml.a) LIB='-lacml'; blas3=true;lapack=true;;
           libatlas.a) LIB='-llapack -lf77blas -latlas'; blas3='true'
                       pdpackextras="$pdpackextras gp_zlapack.o gp_dlapack.o";;
            libessl.a) LIB='-lessl'
                       blas3="true" # - but not complete...
                       # double-check dlapack.
                       pdpackextras="$pdpackextras gp_zlapack.o gp_zblas.o  gp_dlapack.o";;
            libesslp2.a) LIB='-lesslp2'
                       blas3="true";;
            libcomplib.sgimath.a) LIB='-lcomplib.sgimath'
                                  blas3='true';;
            libmkl_p3.a) LIB="-lmkl_p3 -lguide -lpthread -static"
                         blas3="true";;
            libmkl.so) LIB="-Wl,--rpath=$testdir -lmkl -lguide -lpthread"
                         blas3="true";;
            lib[cd]xml.a) LIB='-ldxml'
                       blas3="true"; lapack="true"
                       cpp='-DVAR_DXML';;
            libblas.a) LIB='-lblas'
                       if nm $testdir/$testlib | grep "gemm" > /dev/null
                       then
                          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
                          then
                          blas2="true"
                       else
                          blas="true"
                       fi;;
            libveclib.a) LIB='-lveclib -lm'
                       if nm $testdir/$testlib | grep "gemm" > /dev/null 
                       then
                          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
                       then
                          blas2="true"
                       else
                          blas="true"
                       fi;;
            libmath.a) LIB='-lmath -lm -nx';;
            libblas0_640.a) LIB="-l-lblas0_640 -l-leispack0_640 -l-llinpack0_640";;
          esac
          break
        fi
      fi
      test -n "$LIB" && break
      done
   done
fi

#
# Look for LAPACK library.
# Add -L$LIBDIR to be sure compiler can find it.
#
if [ -n "$LIBDIR" -a $lapack != true ]; then
   if [ -f $LIBDIR/liblapack.so -o -f $LIBDIR/liblapack.a ]; then
      lapack=true; LIB="-L$LIBDIR -llapack $LIB"
   else
      LIB="-L$LIBDIR $LIB"
      for testdir in $libdirlist; do
         if [ -f $testdir/liblapack.a -o -f $testdir/liblapack.so ]; then
            lapack=true; LIB="-L$testdir -llapack $LIB"
            break
         fi
      done
   fi
fi


#
# Figure out list of needed numerical libraries.
#

[ "$lapack" = "true" ] || pdpackextras="$pdpackextras gp_dlapack.o gp_zlapack.o"
if [ "$blas3" != "true" ] ; then
    pdpackextras="$pdpackextras gp_dblas3.o"
    if [ "$blas2" != "true" ] ; then
       pdpackextras="$pdpackextras gp_dblas2.o"
       if [ "$blas" != "true" ] ; then
          pdpackextras="$pdpackextras gp_dblas1.o gp_zblas.o"
       fi
    fi
fi

if [ -z "$LIB" -a -n "$liblist" ]; then
    $ECHO '   No mathematical libraries seem to be available'
    $ECHO '   I will proceed without them\n'
elif [ -n "$LIB" ]; then
    $ECHO '\n-->The following mathematical library(ies) will be used:\n   '$LIB'\n'
fi      

#
# If necessary, we ask the user if Dalton should split the files 
# for him/her (if his/her filesystem only files less than 2Gb in size).
#

splitfiles="false"
if [ $WHICH = 'rs6000' -o $WHICH = 'sun4' -o $WHICH = 'iris4d' -o $WHICH = 'linux' ] ; then
if [ $prc != 'x86_64' ]; then
    get_yes_or_no "Does your file system allow files bigger than 2 Gb?" y
    if [ "$answer" = "n" ]; then
       splitfiles="true"
    fi
fi
fi

#
# Determine memory size, also ask whether user would like to active the
# possibility of storing the two-electron integrals in memory 
# Observe, that the minimal value is not 0, it is 1 because
# some compilers do not like arrays with no elements.

$ECHO '\nDALTON uses almost 100 Megabytes of static'
$ECHO 'allocations, in addition to the dynamic allocation.'
$ECHO '\nDALTON has the possibility to reserve an amount of static memory'
$ECHO 'for storing two-electron integrals in direct and parallel calculations'
$ECHO 'Storing some or all of the 2-el. integrals in memory will speed up'
$ECHO 'direct and parallel calculations (and in particular the latter).'
$ECHO 'NOTE: This will increase the static memory allocation used by DALTON'

get_yes_or_no "\nWould you like to activate the possibility of storing 2-el.int. in memory?" n
if [ "$answer" = "y" ]; then
    incore_memory_words=0
#   only accept positive numbers
    while [ $incore_memory_words -le 0 ]
    do
       $ECHO 'How many MB to use for storing 2-el. integrals? \c'

       read incore_memory_mb

       # convert
       incore_memory_mw=`echo "$incore_memory_mb*1048576/8000000" | bc`
       incore_memory_words=`expr $incore_memory_mw \* 1000000`

#      check that user hasn't just hit return (giving an empty string)
       if [ "$incore_memory_words" = "" ]; then incore_memory_words=0; fi

#      in case $incore_memory_wordse was not a number it will now be an empty string, if so reset to zero.
       if [ "$incore_memory_words" = "" ]; then incore_memory_words=0; fi
    done
    $ECHO '\n-->Program will be installed with '$incore_memory_mb' MB ('$incore_memory_words' words) used for storing 2-el. integrals'
    
else
    incore_memory_words=1
fi

$ECHO '\nMaximum amount of work memory for dynamic allocations can be changed'
$ECHO 'at run time with the environment variable WRKMEM (in REAL*8 words = megabytes/8)'
$ECHO 'or by using the -M option to the run script: "dalton -M mb ..." (in megabytes).'
$ECHO 'We recommend at least 200 MB work memory,'
$ECHO 'larger for correlated calculations, but it should for maximum'
$ECHO 'efficiency NOT exceed available physical memory per CPU in parallel calculations.\n'

work_memory_words=0
# only accept positive numbers
while [ $work_memory_words -le 0 ]
do
    $ECHO 'How many MB to use as default for work memory (hit return for default of 1000 MB)? \c'

    if test "$do_quick_config" = y; then
       work_memory_mb=1000
    else 
       read work_memory_mb
    fi

    # if user hit return, use default
    if [ "$work_memory_mb" = "" ]; then work_memory_mb=1000; fi

    # convert
    work_memory_mw=`echo "$work_memory_mb*1048576/8000000" | bc`
    work_memory_words=`expr $work_memory_mw \* 1000000`

    # in case $work_memory_mb was not a number, $work_memory_words is now an empty string, if so reset to zero.
    if [ "$work_memory_words" = "" ]; then work_memory_words=0; fi
done
$ECHO '\n-->Program will be installed with a default work memory of '$work_memory_mb' MB ('$work_memory_words' words)'

#
# Determine location for executable and run script
#

curr=`pwd`
$ECHO '\n-->Current directory is '$curr'\n'

INSTALL_DIR=./bin
get_yes_or_no 'Use default $INSTALL_DIR as installation directory for DALTON binaries and scripts?' y

while [ "$answer" = "n" ]
do
    $ECHO 'Please enter another installation directory: \c'
    read INSTALL_DIR
    if [ ! -d "$INSTALL_DIR" ]; then
        $ECHO "ERROR: $INSTALL_DIR does not exist, will be created now."
        mkdir "$INSTALL_DIR"; mkdir_ok=$?
        if [ $mkdir_ok ]; then answer="ok"
        else $ECHO "Sorry, the specified directory could not be created"; fi
    else
        answer="ok"
    fi

done

# make sure INSTALL_DIR exists, also if default value
if [ ! -d "$INSTALL_DIR" ]; then
   mkdir "$INSTALL_DIR"
fi

#   Make sure  pathname to INSTALL_DIR is absolute path and not relative path
cd $INSTALL_DIR; INSTALL_DIR=`pwd`; cd $OLDPWD

$ECHO '\n-->DALTON executable and script will be placed in '$INSTALL_DIR' directory\n'

#
# Determine default basis set library location
#

INSTALL_BASDIR=$curr'/basis/'
$ECHO '\n-->Default basis set directory will be '$INSTALL_BASDIR''
if [ -d "$INSTALL_BASDIR" ]; then 
  get_yes_or_no '\nUse this directory as default basis set directory?' y
else
  $ECHO "Sorry, this directory does not exist."
  answer=n
fi

while [ "$answer" = "n" ]
do
    $ECHO '\nPlease choose another default basis set directory (must end with /) \c'
    read INSTALL_BASDIR
    $ECHO '\n-->Default basis set directory will be '$INSTALL_BASDIR'\n'
    if [ ! -d "$INSTALL_BASDIR" ]; then $ECHO "Sorry, this directory does not exist"
    else answer="ok"; fi
done

#   Make sure  pathname to INSTALL_BASDIR is absolute path and not relative path
cd $INSTALL_BASDIR; INSTALL_BASDIR=`pwd`; cd $OLDPWD

#
# Determine default scratch disk space for calculations
#

if [ -d '/work' ]; then
    worksp='/work'
elif [ -d '/scratch' ]; then
    worksp='/scratch'
elif [ -d '/scr' ]; then
    worksp='/scr'
elif [ -d '/temp' ]; then
    worksp='/temp'
else
    $ECHO '\nI did not find /work, /scratch, /scr, or /temp. I will use /tmp'
    worksp='/tmp'
fi

$ECHO '\n-->Job specific directories under $SCRATCH/$USER\n-->will be used for temporary files when running DALTON\n'
get_yes_or_no 'Use SCRATCH='$worksp' as default root scratch space in "dalton" run script?' y

if [ "$answer" = "n" ];  then
    $ECHO 'Please enter default root scratch directory: \c'
    read worksp
fi

#
#
# We are beginning to see the end of the installation requirements
#
# We will now dump machine specific things to Makefile.config
#
tab=`$ECHO "\t"`

$ECHO '\n-->Creating Makefile.config ...'

backup -v Makefile.config

#
# Parallel preprocessor directive need to be set
#

if [ "$mesp" = "mpi" ]; then
    parop='VAR_MPI'
elif [ "$mesp" = "pvm" ]; then
    parop='VAR_PVM'
    echo "Sorry, PVM is not supported any more"
    exit 1
else
    parop=
fi

case "$WHICH" in
    rs6000)
          case $opsys in
          2)
             cpp="-w -P -DSYS_AIX -DSYS_AIX23 -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
             if [ $splitfiles = 'true' ] ; then
                cpp="$cpp -DVAR_SPLITFILES"
             fi
             if [ "$mesp" != "dummy" ]; then
                cpp="$cpp -D$parop"
                if [ "$mesp" = "mpi" ]; then
                   def='parallel.x'
                else
                   def='dalpvm.x'
                fi
             fi
             inc='-I../include'
             cpp=${cpp}" -DIMPLICIT_NONE";;
          *)
             cpp="-WF,-DSYS_AIX,-DVAR_MFDS,-D'INSTALL_WRKMEM=$work_memory_words',-D'INSTALL_MMWORK=$incore_memory_words'"
             if [ $splitfiles = 'true' ] ; then
                cpp="$cpp,-DVAR_SPLITFILES"
             fi
             if [ "$mesp" != "dummy" ]; then
                cpp="$cpp,-D$parop"
                set_parallel_def $mesp
                copt="$copt -DVAR_MPI"
             fi
             inc='-I../include'
             cpp=${cpp}",-DIMPLICIT_NONE"
          esac
          copt="$copt -I../include -DSYS_AIX -D_LARGE_FILES -qlanglvl=stdc99 -DRESTRICT=restrict -O3 -qarch=auto -qtune=auto"
          opt='-O3 -qstrict -qarch=auto -qtune=auto -qmaxmem=-1 -qextname'
#         stefan dec 2010: in DIRAC this seems to be required for f90 mods 
#radovan: the following fails on AIX (njord)
#         F90mod="-qmoddir=../modules -qfree=f90 -I../modules"
#radovan:                                     I changed it to:
#stefan :          hopefully adding -qsuffix=cpp=F90 helps to solve Sonias compilation issues on Sleipner in Aarhus.
          F90mod="-qmoddir=../modules -qsuffix=cpp=F90 -I../modules"
          if [ $bit = '32' ]; then
             opt="$opt -bmaxdata:0x80000000 -bmaxstack:0x10000000"
          else
             copt="$copt -q64"
             opt="$opt -q64"
             cpp=${cpp}",-DVAR_INT64"
          fi;;
    iris4d)
          cpp="-DSYS_IRIX -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          case $opsys in
               IRIX64)  opt='-O2 -64 -mips4 -G 0 -OPT:Olimit=0 -woff 2290'
                       copt='-O2 -64 -mips4 -G 0 -OPT:Olimit=0'
                        cpp="$cpp -DVAR_INT64";;
               *)  opt='-O2 -n32 -mips3 -G 0 -OPT:Olimit=0 -woff 2290'
                  copt='-O2 -n32 -mips3 -G 0 -OPT:Olimit=0';;
          esac
          if [ $F90 = 'f90' ]; then
                F90="f90 -cpp"
                cpp="$cpp -DVAR_MFDS"
          else
                cpp="$cpp -DNO_F90"
          fi
          if [ $splitfiles = 'true' ] ; then
              cpp="$cpp -DVAR_SPLITFILES"
          fi
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
              set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE";;
    cray)
          cpp="-DSYS_CRAY -DVAR_INT64 -DVAR_MFDS -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words' -DVAR_VECTOR"
          if [ "$mesp" != "dummy" ]; then
                cpp="$cpp $parop"
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          opt="-Wf\"-i 64 -a stack -dp\" -Wl\"-i ./equivalences\" -Wp\"-F\""
          def='cray.x';;
    cray_t90)
          cpp="-DSYS_T90 -DVAR_INT64 -DVAR_MFDS -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words' -DVAR_VECTOR"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp $parop"
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          opt="-O nofastint -d p -Wl\"-i ./equivalences\" -Wp\"-F\""
          def='t90.x';;
    cray_t3e)
          cpp="-DSYS_T3D -DVAR_INT64 -DVAR_MFDS -DVAR_NONAMELIST -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
          fi
          inc='-I../include -I/opt/ctl/mpt/mpt/include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          opt="-dp -F -Oaggress,scalar3,vector3,unroll2,msgs,negmsgs"
          def='t3d.x'
          LIB="crilib.cld -Wl,-Dstreams=on -lmfastv";;
    nec)
          cpp="-DSYS_NEC DVAR_INT64 D'INSTALL_WRKMEM=$work_memory_words' D'INSTALL_MMWORK=$incore_memory_words' USX DVAR_MFDS DVAR_REAL DVAR_VECTOR"
          if [ "$mesp" = "dummy" ]; then
             cpp="-cpp $cpp"
          else
             set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" DIMPLICIT_NONE"
          opt='-float0 -w double8 -ptr byte -b -pvctl noassume loopcnt=10000000 -fopp';;
    alpha)
          cpp="$cpp -DSYS_DEC -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
             set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          opt='-fast -fpe3 -warn nouncalled';;
    sun4)
          cpp="-DSYS_SUN -DVAR_MFDS -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ $splitfiles = 'true' ] ; then
              cpp="$cpp -DVAR_SPLITFILES"
          fi
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
             set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          opt='-fast';;
    hp)
          cpp="-DSYS_HPUX -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
              set_parallel_def $mesp
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          if [ $arch = "ia64/hpux" ]; then
              opt='+O2 +Onolimit +Oparmsoverlap +U77 +ppu'
             copt='+O2 +Onolimit +Oparmsoverlap'
             LIB="$LIB"
             cpp=${cpp}" -DVAR_INT64"
          else
             if [ $F90 = 'f90' ]; then
                 case $bit in
                     64)  opt='+DA2.0W +O2 +U77 +Onolimit +Ofastaccess +ppu'
                          LIB="$LIB +U77 +DA2.0W"
                         copt='+DA2.0W +O3 +Onolimit +Ofastaccess'
                          cpp=${cpp}" -DVAR_INT64";;
                     *)   opt='+DA2.0 +O2 +U77 +Onolimit +Ofastaccess'
                          LIB="-lV7 +U77 $LIB"
                         copt='+DA2.0 +O3 +Onolimit +Ofastaccess';;
                 esac
             else
                  opt='+O2 +U77 +E4 +E5'
             safe_opt='+O1 +U77 +E4 +E5'
                 copt='-D_FILE_OFFSET_BITS=64 +O3'
                  LIB="-lV7 +U77 $LIB"
             fi
          fi
          copt=${copt}" -AC99"
          cpp=${cpp}$;;
    linux-alpha)
          cpp="$cpp -DHAVE_GCPP -DSYS_DEC -DVAR_INT64 -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
              set_def $mesp
          fi
#         opt='-fast -assume no2underscores -check nopower'
#         hjaaj Oct 04: note that HAVE_GCPP is now used to tell c-routines
#         that the fort fortran compiler can make 2 underscores
          opt='-fast -check nopower'
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE"
          copt='-fast';;
    linux|cygwin) 
          cpp="-DSYS_LINUX -DVAR_MFDS -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ $splitfiles = 'true' ] ; then
             cpp="$cpp -DVAR_SPLITFILES"
          else
             cpp="$cpp -D_FILE_OFFSET_BITS=64"
          fi
          if [ "$mesp" != "dummy" ]; then
             cpp="$cpp -D$parop"
             set_parallel_def $mesp
          fi
          case $F90_be in
          ifort)
             # Dec 2010 Stefan: problems with -xP and LUCITA
             #if  grep -qw pni /proc/cpuinfo 2>/dev/null; then
             #    proc='-xP'
             #elif 
             if   grep -qw sse2 /proc/cpuinfo 2>/dev/null; then
                 proc='-xW'
             elif [ $prc = 'i686' ]; then
                 proc='-tpp6 -xK'
             elif [ $prc = 'i586' ]; then
                 proc='-tpp5 -xi'
             else
                 proc=''
             fi
             cpp="-DVAR_IFORT $cpp"
             F90mod='-module ../modules'
#            Dec-07: do not use "-ip" option for interprecedural optimization within file
#                    gives erroneous code in eri/, at least for ifort version 9.1 /hjaaj
#                    (-ip will problably never give big speed-up, anyway)
             opt="-g -O3 $proc -ip -w -fpp -assume byterecl"
             safe_opt="-g -O1 -w -fpp -assume byterecl"
             case $CC in
                 icc|mpicc|mpiicc) copt="-g -O3 $proc -ip -restrict -DRESTRICT=restrict";;
                 gcc) copt="-O3 -malign-double -std=c99 -DRESTRICT=restrict"
                      [ $WHICH = "cygwin" ] && copt=${copt}" -U__STRICT_ANSI__";;
             esac
             if [ $bit = "64" ]; then
               cpp="${cpp} -DVAR_INT64"
               opt="$opt -i8"
               safe_opt="$safe_opt -i8"
               $ECHO "INFO: Compiling with 64-bit integers."
               $ECHO "INFO: Make sure pre-compiled BLAS etc. libraries are also with 64-bit integers!!!\n"
             else
               $ECHO "INFO: Compiling with 32-bit integers."
               $ECHO "INFO: Make sure pre-compiled BLAS etc. libraries are also with 32-bit integers!!!\n"
             fi
             #LIB="$LIB"
             ;;
          pgf90|pgf95)
             cpp="-DVAR_PGF90 $cpp"
             # vect=idiom gives 40% performance improvement on opteron (pgcc5.2).
             copt="-fast -Munroll -Mvect=idiom -c9x -DRESTRICT=restrict"
              opt="-mcmodel=medium -fast -Munroll"
             safe_opt="-mcmodel=medium -Mframe"
             F90mod='-module ../modules'
             ;;
          g95)
             case $prc in
             i[0-9]86) grep -qw sse2 /proc/cpuinfo 2> /dev/null && prc=pentium4
                     march="-march=$prc";;
             x86_64) march="-march=x86-64";;
                  *) march=" ";;
             esac

                cpp="-DVAR_G95 $cpp"
             F90mod='-I../modules -fmod=../modules'
                opt="$march -O3 -ffast-math -funroll-loops -ftrace=full -fsloppy-char -Wno=155"
           safe_opt="$march -O1 -ffast-math -funroll-loops -ftrace=full -fsloppy-char -Wno=155"
#                   -fsloppy-char is needed for gp/mempkg.F
               copt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=2"
             ;;
          *)
#            assume gfortran also if not gfortran (but write a WARNING)
             if [ $F90_be = "gfortran" ]; then
               gfver=`$F90 -v 2>&1 | awk '/^gcc version/{gsub("[^0-9]","", $3);print $3}'`
               $ECHO "gfortran version $gfver prc=$prc"
             else
               gfver=450
               $ECHO "\nWARNING: $F90_be compiler is not defined in configure. Will be treated as gfortran version $gfver prc=$prc"
               $ECHO "Please check Makefile.config carefully and modify compiler options to the correct ones for your selected compiler.\n"
             fi
             cpp="-DVAR_GFORTRAN $cpp -DGFORTRAN=$gfver"
             case $prc in
             i[0-9]86) grep -qw sse2 /proc/cpuinfo 2> /dev/null && prc=pentium4
                     march="-march=$prc";;
             x86_64) march="-march=x86-64";;
                  *) march=" ";;
             esac

             copt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1"
                  [ $WHICH = "cygwin" ] && copt=${copt}" -U__STRICT_ANSI__"
              opt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize -fbacktrace"
           F90mod="-J../modules"
             if [ $bit = "64" ]; then
               cpp="${cpp} -DVAR_INT64"
               opt="$opt -fdefault-integer-8"
               $ECHO "INFO: Compiling with 64-bit integers."
               $ECHO "INFO: Make sure pre-compiled BLAS, MPI etc. libraries are also with 64-bit integers!!!\n"
             else
               $ECHO "INFO: Compiling with 32-bit integers."
               $ECHO "INFO: Make sure pre-compiled BLAS, MPI etc. libraries are also with 32-bit integers!!!\n"
             fi
             ;;
          esac

          if [ "$mesp" = "dummy" ]; then
              def='linux.x'
          else
              def='linuxparallel.x'
          fi
          inc='-I../include'
          cpp=${cpp}" -DIMPLICIT_NONE";;
    darwin) 
          cpp="-DSYS_LINUX -DVAR_MFDS -D'INSTALL_WRKMEM=$work_memory_words' -D'INSTALL_MMWORK=$incore_memory_words'"
          if [ "$mesp" != "dummy" ]; then
              cpp="$cpp -D$parop"
              set_parallel_def $mesp
          fi
#
# gfortran: Bin Gao, Mar. 9, 2009
          if [ "${F90:0:8}" = gfortran -o "$F90" = mpif90 ]; then
               gfver=`$F90 -v 2>&1 | awk '/^gcc version/{gsub("[^0-9]","", $3);print $3}'`
               echo "gfortran version $gfver prc=$prc"
               cpp="-DVAR_GFORTRAN -DGFORTRAN=$gfver $cpp"
               case $prc in
               i[0-9]86) grep -qw sse2 /proc/cpuinfo 2> /dev/null && prc=pentium4
                       march="-march=$prc";;
#              x86_64) march="-march=x86-64 -fdefault-integer-8"
#                      cpp="${cpp} -DVAR_INT64";;
# remove VAR_INT64 for gfortran - it breaks linking against
# precompiled BLAS libraries./pawsa-Mar-08
               x86_64) march="-march=x86-64"
                       ;;
                    *) march=" ";;
               esac
               copt="$march -O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1 -DHAVE_NO_LSEEK64"
               opt="$march -O3 -Wl,-framework -Wl,vecLib -ffast-math -funroll-loops -ftree-vectorize -fbacktrace"
               F90mod="-J../modules"
               f90opt="$opt -I. -x f95-cpp-input"
#               cxx_ldflags="-lstdc++"
               if [ "$mesp" != "dummy" ]; then
                  copt="$copt -D$parop"
                  opt="$opt -D$parop"
                  f90opt="$f90opt -D$parop"
                  def='linuxparallel.x'
               fi
               inc='-I../include'
               LIB="-lgcc"
               cpp=${cpp}" -DIMPLICIT_NONE"
# use Vector Libraries for BLAS and LAPACK
               pdpackextras='linpack.o eispack.o'
# Done with Bin Gao
          else
             echo "$F90 compiler is not defined for Darwin yet"
          fi;;
esac

if [ "$WHICH" = "rs6000" -a "$bit" = "64" ]; then
    arcommand="ar -X 64"
else
    arcommand="ar"
fi

# for safe compilers, set safe_opt to opt
if [ -z "$safe_opt" ]; then safe_opt="$opt"; fi

# Check for existence of lseek64 library call.
cat <<EOF >> configure_conftest.c
#define _LARGEFILE64_SOURCE
#include <sys/types.h>
#include <unistd.h>
int main(){ off64_t l = lseek64(1,0,SEEK_SET); } 
EOF
if $CC $copt configure_conftest.c -o configure_conftest > configure_conftest.log 2>&1; then
  echo "Proper 64-bit file access detected."
else
  cpp="$cpp -DHAVE_NO_LSEEK64"
  echo "WARNING: Proper 64-bit file access (lseek64) was NOT detected."
  echo "WARNING: Using default file access routines and hoping for the best."
fi
rm configure_conftest.c configure_conftest > /dev/null 2>&1

# added by Bin Gao, other plugins may be used in DALTON
# 1) Gen1Int
$ECHO "\nGen1Int is a tool package for computing many different one-electron integrals as well as"
$ECHO "their high-order magnetic and geometric derivatives using London atomic-orbitals."
$ECHO "Please see http://sourceforge.net/projects/gen1int for more details and"
$ECHO "the instruction of installation. Before enabling this feature, make sure you have"
$ECHO "successfully compiled the library of Gen1Int (libgen1int.a)."
$ECHO "\n--> In DALTON release Dalton2011 Gen1Int is only used for ECPs; activating Gen1Int"
$ECHO   "--> makes it possible to calculate many more types of ECPs than in Dalton 2.0"
get_yes_or_no "\nDo you want to activate Gen1Int package for ECPs in DALTON?" n
if [ "$answer" = "y" ]; then
  $ECHO "\n-->Trying to find Gen1Int (libgen1int.a) ..."
  lib_genint=`locate libgen1int.a`
  # ask user to manually provide the path of libgen1int.a
  if test ${#lib_genint} -eq 0; then
    $ECHO "\n-->Gen1int not found on the system. Please specify path of libgen1int.a, or enter to skip."
    read lib_genint
  fi
  # checks if there is Gen1Int on the system
  if test ${#lib_genint} -gt 0; then
    $ECHO "\n-->Found Gen1Int $lib_genint"
    # everything is OK to install Gen1Int
    $ECHO "\n-->Modifying Makefile.config ..."
    $ECHO   "-->(1) Adding -DBUILD_GEN1INT to CPPFLAGS"
    $ECHO   "-->(2) Adding $lib_genint to LIBS"
    cpp="-DBUILD_GEN1INT $cpp"
    LIB="$LIB $lib_genint"
  else
    $ECHO "\n-->Gen1Int libary was not found and Gen1Int code will not be activated!"
    $ECHO "\n-->You can still activate Gen1Int manually by modifying Makefile.config as follows:"
    $ECHO   "-- -->(1) Adding -DBUILD_GEN1INT to CPPFLAGS"
    $ECHO   "-- -->(2) Appending libgen1int.a to LIBS"
  fi
fi

cat <<EOF > Makefile.config
ARCH        = $WHICH
#
#
CPPFLAGS      = $cpp
F90           = $F90
CC            = $CC
LOADER        = $F90
RM            = rm -f
FFLAGS        = $opt
SAFEFFLAGS    = $safe_opt
CFLAGS        = $copt
INCLUDES      = $inc $parinc
MODULES       = $F90mod
LIBS          = $LIB $ldflags
INSTALLDIR    = $INSTALL_DIR
PDPACK_EXTRAS = $pdpackextras
GP_EXTRAS     = $gpextras
AR            = $arcommand
ARFLAGS       = rvs
# flags for ftnchek on Dalton /hjaaj
CHEKFLAGS  = -nopure -nopretty -nocommon -nousage -noarray -notruncation -quiet \
 -noargumants -arguments=number \
 -usage=var-unitialized
# -usage=var-unitialized:arg-const-modified:arg-alias
# -usage=var-unitialized:var-set-unused:arg-unused:arg-const-modified:arg-alias
#
default : dalton $def
EOF

# Intel compiler seems to be a bit less optimized for certain routines, at
# least Itanium processors
# PS: Which version? Are they assumed to be ethernally buggy? And
# don't even THINK about modifying source files, including
# Makefiles.
if [ $F90_be = 'ifort' ]; then
   echo 'SAFE_FFLAGS_for_ifort = $(SAFEFFLAGS)' >> Makefile.config
else
   echo 'SAFE_FFLAGS_for_ifort = $(FFLAGS)' >> Makefile.config
fi

#
# Insert necessary additional features for parallel calculations
#

if [ "$mesp" = "mpi" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
MPI_INCLUDE_DIR = $parinc
MPI_LIB_PATH    = $parlibp
MPI_LIB         = $parlib
#
EOF
elif [ "$mesp" = "pvm" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
PVM_LIB_PATH = $parlibp
PVM_LIB_LIST = $parlib
PVM_NOD_PATH = $parnodp
PVM_NOD_PROG = $parnod
#
EOF
fi
#
# Include the rule for building the object files
#
cppuse=
if [ "$WHICH" = "rs6000" -a "$opsys" = "2" ]; then
    cppuse='cc'
fi


if [ "$WHICH" = 'rs6000' ]; then
   if [ "$opsys" = '2' ]; then
cat <<EOF>> Makefile.config
CPP        = $cppuse
#
# Suffix rules
#
.SUFFIXES : .F .F90 .o .c .i

.F.o:
$tab\$(CPP) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$*.F
$tab mv \$*.i \$*.f
$tab\$(F90) \$(FFLAGS) \$(MODULES) -c \$*.f 
$tab\$(RM) \$*.f

.F90.o:
$tab\$(CPP) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$*.F90
$tab mv \$*.i \$*.f90
$tab\$(F90) \$(FFLAGS) \$(MODULES) -c \$*.f90
$tab\$(RM) \$*.f90

.c.o:
$tab\$(CC) \$(CFLAGS) -c \$*.c

.F.i:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
    else cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .F90 .o .c .i

.F.o:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.F90.o:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F90

.c.o:
$tab\$(CC) \$(CFLAGS) -c \$*.c 

.F.i:
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
    fi
elif [ $WHICH = 'darwin' ]; then
cat <<EOF>> Makefile.config
#
# Suffix rules
#
.SUFFIXES : .F .F90 .o .c .i

.F.o:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.F90.o:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F90 

.c.o:
$tab\$(CC) \$(INCLUDES) -DSYS_LINUX \$(CFLAGS) -c \$*.c 

.F.i:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) -E \$*.F > \$*.i
EOF
else cat <<EOF>> Makefile.config
#
# Suffix rules
# hjaaj Oct 04: .g is a "cheat" suffix, for debugging.
#               'make x.g' will create x.o from x.F or x.c with -g debug flag set.
#
.SUFFIXES : .F .F90 .c .o .i .g .s

.F.o:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F 

.F.i:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) -E \$*.F > \$*.i

.F.g:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(SAFEFFLAGS) -g -c \$*.F 

.F.s:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -S -g -c \$*.F 

.F90.o:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F90 

.F90.i:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) -E \$*.F90 > \$*.i

.F90.g:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(SAFEFFLAGS) -g -c \$*.F90 

.F90.s:
$tab\$(F90) \$(INCLUDES) \$(MODULES) \$(CPPFLAGS) \$(FFLAGS) -S -g -c \$*.F90 

.c.o:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -c \$*.c 

.c.i:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -E \$*.c > \$*.i

.c.g:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -g -c \$*.c 

.c.s:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -S -g -c \$*.c 
EOF
fi
#
# Make sure Makefile.depend files exist
#
for i in abacus amfi cc densfit dft eri gp pdpack rsp sirius soppa choles lucita ; do
  touch $i/Makefile.depend
done
#
# Update the DALTON run-script
#

$ECHO '\n-->Creating the DALTON run-script in '$INSTALL_DIR

backup -v $INSTALL_DIR/dalton

#
# When using PVM the name of the executable is renamed
#
DALEXE="dalton.x"
if [ $mesp = 'pvm' ]; then
    DALEXE="dalton_pvm.x"
fi
mpirun=`which mpirun 2>/dev/null` || mpirun=mpirun

cat <<EOF > ./dalton.setup
#!/bin/bash
################################################################################
#                                                                              #
# Shell-script for running DALTON                                              #
#                                                                              #
# Version 1.0 Feb. 1997 by T. Enevoldsen, Odense University                    #
# Version 1.1 spring 2000 by K.Ruud and H.J.Aa.Jensen                          #
# Version 2.1 Feb. 2005 by K.Ruud, H.J.Aa.Jensen, and P. Salek                 #
# Version 2011 May 2011 by H.J.Aa.Jensen, with help from others                #
#                                                                              #
################################################################################
#
# location of executeables
DALTON="$INSTALL_DIR/$DALEXE"
DALMPI="$INSTALL_DIR/dalton_mpi.x"

MPIRUN="$mpirun"
# set TMPDIR (if not defined by e.g. NQS) and WRKDIR
[ -z "\$TMPDIR" ] && TMPDIR="$worksp"

INSTALL_BASDIR="$INSTALL_BASDIR"
EOF
cat dalton.setup dalton.gnr > $INSTALL_DIR/dalton

chmod 755 $INSTALL_DIR/dalton

$ECHO '\n   The configuration of DALTON has finished succesfully.'
$ECHO '   Check compiler flags etc. in Makefile.config and run "make" to get executable.\n'

exit 0
