* Interface of QMatrix library (http://repo.ctcc.no/projects/qmatrix) for DALTON

1. QMatrix is an ``abstract'' matrix library written in C language (with C++
   and Fortran interface), and provides a special square block complex matrix
   (all the blocks are square matrix with the same dimension) and corresponding
   functions.

   It can be built on top of exteranl C, C++ or Fortran libraries, which have
   implemented either square block complex matrix, square block real matrix,
   complex matrix or real matrix and required functions.

   Please refer to external/qmatrix/doc/manual.pdf and external/qmatrix/doc/tutorial.pdf
   for more details.

   If you have used QMatrix and found it is useful, please consider to cite QMatrix as

     @misc{QMatrix,
       author = {Bin Gao},
       title = {{QMatrix Version 0.1.0}},
       year = {2014},
       note = {http://repo.ctcc.no/projects/qmatrix}
     }

2. Since DALTON does not have its own matrix library, the LSDALTON's matrix module is
   used in this interface. However, some subroutines/functions in LSDALTON (needed by
   its matrix module) have to be renamed, since they previously had the same names as
   those in DALTON. For instance, the matrix I/O calls subroutine output() both in
   LSDALTON and DALTON.

   So the structure of QMatrix library in DALTON is:

   DALTON routines --> dalton_qmatrix.F90 --> QMatrix library --> LSDALTON matrix module

   where dalton_qmatrix.F90 is the interface between DALTON and QMatrix library.

3. To test the interface, the following keywords should be added into DALTON.INP:

     **QMATRIX
     .TEST

   dalton.x will then call QMatrix library to perform the test calculations, results
   can be found in DALTON.OUT. There should not be word "fail" in DALTON.OUT if all
   the tests passed. Otherwise, please contact Bin Gao at bin.gao@uit.no.

4. Other functionalities of QMatrix library will be implemented soon and will be described
   in the manual of DALTON once they are implemented.

5. I (Bin Gao) have only implemented QMatrix library and this interface with CMake. I do not
   know how to implement with ordinary make files.

6. The use of the HDF5 library is taken care by the cmake file cmake/LibsQMatrix.cmake,
   but which is disabled for the time being.

7. As mentioned in LSDALTON/qmatrix/README, it is a big problem to compile different
   QMatrix libraries for DALTON and LSDALTON with THE SAME EXTERNAL PROJECT. Except for
   using the LSDALTON's matrix module in DALTON, I have also tried to use the simple
   matrix library in QMatrix and compile two different versions of QMatrix for DALTON
   and LSDALTON. Although this solution is not used anymore, I would like to write it
   down here:

   (1) In order to compile the same external project qmatrix differently for DALTON and
       LSDALTON, I (Bin Gao) have modified cmake/ConfigExternal.cmake, by adding optional
       arguments for the macro add_external.

       The first optional argument is the directory of the source codes of the project.
       So that we will have different projects for DALTON and LSDALTON as dal_qmatrix
       and ls_qmatrix, but both of them point to the same source external/qmatrix.

       In QMatrix library, there defined a CMake variable LIB_QMATRIX_NAME for the name
       of compiled QMatrix library. They will be dal_qmatrix and ls_qmatrix for DALTON
       and LSDALTON.

   (2) Another problem is the use of QMatrix library module which is always qmatrix.mod.
       That can not be saved into ${CMAKE_Fortran_MODULE_DIRECTORY} since this file is
       different for DALTON and LSDALTON. Instead, I leave them into their own build
       directory.

       Moreover, these two build directories (DALTON and LSDALTON) can not be added into
       CMake include directories as usual, since that will make conflict for compile.

       To solve this problem, we have to only include the build directory for specific
       target in CMake. Therefore, the second optional argument in the macro add_external
       is to disable the include of build directory in CMake include directories.

       In cmake/LibsDALTON.cmake and cmake/LibsLSDALTON.cmake, I have used set_target_properties
       and set_source_files_properties to include the build directory explicitly for
       some targets and source files which uses QMatrix library.

   Good luck of using this interface and QMatrix library ;-)

   August 10, 2014
