#!/bin/bash

################################################################################
#                                                                              #
# Shell-script for running DALTON                                              #
#                                                                              #
# Version 1.0 Feb. 1997 by T. Enevoldsen, Odense University                    #
# Version 1.1 spring 2000 by K.Ruud and H.J.Aa.Jensen                          #
# Version 2.1 Feb. 2005 by K.Ruud, H.J.Aa.Jensen, and P. Salek                 #
# Version 2011 May 2011 by H.J.Aa.Jensen, with help from others                #
# Version 2014 Aug 2014 by H.J.Aa.Jensen, with help from others                #
#                                                                              #
################################################################################

# radovan: this is to figure out the location of this script
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $SOURCE != /* ]] && SOURCE="$SCRIPT_DIR/$SOURCE"
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

DALTON_EXECUTABLE=$SCRIPT_DIR/dalton.x

MPIRUN=@MPIEXEC@
INSTALL_BASDIR=$SCRIPT_DIR/basis

WRKDIR=`pwd` ; export WRKDIR
# always search for basis sets in job work directory
# (before standard dalton basis library in INSTALL_BASDIR, appended below)
BASDIR=$WRKDIR
#
paramlist="$*"

# default extensions
OUTEXT="out"
DALEXT="dal"
MOLEXT="mol"
POTEXT="pot"
PCMEXT="pcm"

GET_FILES=''
PUT_FILES=''

SSH=ssh
SCP=scp

#default values for options
optd=0
optD=1
optf=0
optn=0
opti=0
opto=0
potfil=
frl=rel
optx=0
opt_nobackup=0
opt_noarch=0
opt_noappend=0


#
# Define usage message
#
usage (){
        echo
        echo "Usage: $0 [options] dalinp{.$DALEXT} [molinp{.$MOLEXT} [potinp{.$POTEXT}] [pcmsolver{.$PCMEXT}]]"
        echo
        echo 'Options:'
        echo ' -b dir           : prepend dir to directory list for basis set searches'
        echo '                    (current directory and dalton basis library are included'
        echo '                     automatically).'
        echo ' -w dir           : change WRKDIR to dir.'
        echo '                    (default:' $WRKDIR')'
        echo ' -o file          : redirect output from program to WRKDIR with "file" as file name'
        echo ' -ow              : redirect output from program to WRKDIR with standard file name'
        echo ' -ext log         : change output extension from ".out" to ".log"'
        echo ' -nobackup        : do not backup files, simply overwrite outputs'
        echo ' -f dal_mol[_pot] : extract dal_mol[_pot].tar.gz archive from WRKDIR into'
        echo '                    DALTON_TMPDIR before calculation starts'
        echo ' -noarch          : do not create tar.gz archive'
        echo " -t dir           : set scratch directory DALTON_TMPDIR; this script will append"
        echo "                    '/DALTON_scratch_$USER' to the path unless the path"
        echo "                    contains 'DALTON_scratch' or you explicitly set -noappend"
        echo ' -d               : delete job scratch directory before calculation starts'
        echo ' -D               : do not delete job scratch directory after calculation stops'
        echo ' -noappend        : do not append anything to the scratch directory; be careful'
        echo '                    with this option since by default scratch is wiped after'
        echo '                    calculation'
        echo ' -get "file1 ..." : get files back from DALTON_TMPDIR after calculation stops'
        echo ' -put "file1 ..." : put files to DALTON_TMPDIR before calculation starts'
        echo ' -mb mem          : set dalton max usable work memory to mem Megabytes'
        echo ' -mw mem          : set dalton max usable work memory to mem double precision words'
        echo ' -nb mem          : set node max usable work memory to mem Megabytes'
        echo ' -nw mem          : set node max usable work memory to mem double precision words'
        echo ' -N num           : use num MPI processes'
        echo '                    (defaults to 1 or DALTON_NUM_MPI_PROCS if defined)'
        echo ' -rsh             : use rsh/rcp for communication with MPI nodes'
        echo '                    (default: ssh/scp)'
        echo ' -nocpex          : force to not copy dalton executable from master node to'
        echo '                    slave nodes (for global work)'
        echo ' -omp num         : set the number of OpenMP threads (default: 1). Note that'
        echo '                    Dalton is not OpenMP parallelized, however, this option'
        echo '                    can be used with e.g. threaded MKL'
        echo ' -x dalmol1 dalmol2 : calculate nexafs spectrum from ground and core hole states'
        echo
        echo "Environment variables understood by the $0 script:"
        echo '    DALTON_TMPDIR             : scratch directory'
        echo '    DALTON_USE_GLOBAL_SCRATCH : use global scratch directory, do not copy any files to worker nodes'
        echo '    DALTON_LAUNCHER           : launcher for the dalton.x binary'
         }
#
# Define backup function
#
backup () {
  if [ $opt_nobackup -eq 0 ]; then
      if [ "$1" = "-v" ]; then ekko=1; shift
      else ekko=0;
      fi
      for i in $* ; do
         if [ -f "$i" ]; then
            for j in 6 5 4 3 2 1 0 ; do
               jp=`expr $j + 1`
               if [ -f "$i.$j" ]; then 
                  [ $ekko -eq 1 ] && echo "Backup: renaming $i.$j to $i.$jp"
                  mv -f "$i.$j" "$i.$jp"
               fi
            done
            if [ $ekko -eq 1 ]; then echo "Backup: renaming $i to $i.0"; fi
            mv -f "$i" "$i.0"
         fi
      done
  fi
}
#
# Interpret input
#
while [ -n "`echo $1 | grep '^-'`" ]; do
    case $1 in
      -b ) BASDIR="$2:$BASDIR"; shift;;
      -d ) optd=1;;
      -D ) optD=0;;
      -nobackup ) opt_nobackup=1;;
      -noarch ) opt_noarch=1;;
      -nocpex ) opt_nocpex=1;;
      -noappend ) opt_noappend=1;;
      -ext ) OUTEXT=$2; shift;;
      -get ) GET_FILES=$2; shift;;
      -put ) PUT_FILES=$2; shift;;
      -rsh ) SCP=rcp; SSH=rsh;;
      -f ) optf=$2; shift;;
      -N ) optn=$2; shift;;
      -omp ) export OMP_NUM_THREADS=$2; shift;;
      -m|-mw ) WRKMEM=$2; export WRKMEM; shift;;
      -M|-mb ) WRKMEM=`expr $2 "*" 128000`; export WRKMEM; shift;;
         -nw ) NODE_WRKMEM=$2; export NODE_WRKMEM; shift;;
         -nb ) NODE_WRKMEM=`expr $2 "*" 128000`; export NODE_WRKMEM; shift;;
      -ow ) opto=2;;
      -o ) OUTFIL=$2; export OUTFIL; opto=1; shift;;
#          OUTFIL and WRKDIR are read from environment inside dalton.x
      -t ) DALTON_TMPDIR=$2; shift;;
      -w ) WRKDIR=$2; shift;;
      -x ) optx=1; gs=$2; ch=$3; shift;shift;;
       * ) usage; exit 1;;
   esac
   shift
done

if ! [ -s "$DALTON_EXECUTABLE" -a -x "$DALTON_EXECUTABLE" ]; then
   echo "ERROR: $DALTON_EXECUTABLE does not exist or is not executable"
   exit 1
fi

# append default basis set directory /hjaaj Apr 2006
len_INSTALL_BASDIR=`echo $INSTALL_BASDIR | wc -c`
if [ $len_INSTALL_BASDIR -gt 1 ]; then
   # do not count newline char
   BASDIR="$BASDIR:$INSTALL_BASDIR"
fi
export BASDIR

# check for correct input
if [ -z "$1" ]; then
   echo 'Fatal error: Input file[s] not specified'
   echo "Your command was: $0 $paramlist"
   usage
   exit 1
fi

if [ -z "$DALTON_TMPDIR" ]; then  # not set as environment variable and not set with "-t dir" option
    scratch_dir_candidates="$SCRATCH /global/work/$USER /scratch/$USER /work /scratch /scr /temp /tmp"
    for dir in $scratch_dir_candidates; do
        if [ -d "$dir" ]; then
            DALTON_TMPDIR=$dir
            echo "DALTON_TMPDIR not defined by user."
            echo " Guessing $dir is appropriate scratch directory, and DALTON_TMPDIR is set to this directory"
            break
        fi
    done

    if [ -z "$DALTON_TMPDIR" ]; then
        # DALTON_TMPDIR is still not set, better stop here
        echo "ERROR: searched for suitable scratch directories among"
        echo "       $scratch_dir_candidates"
        echo "       but none of them exists."
        echo "       Please either set the DALTON_TMPDIR environment variable"
        echo "       or use -t to set the scratch directory."
        exit 1
    fi
fi

# -- identify input files and construct output file name

#  remove .dal, if added by user
dalfil=`echo $1 | sed "s/\.$DALEXT//"`
if [ -z "$2" ]; then
#  only one input file, check if molfil exist with same base name;
    if [ -r ${dalfil}.mol ]; then
        molfil=$dalfil
        if [ -s ${dalfil}.pot ]; then
            potfil=$dalfil
            input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
        elif [ -s ${dalfil}.pcm ]; then
            pcmfil=$dalfil
            input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $pcmfil.$PCMEXT"
        else
            input_files="input files: $dalfil.$DALEXT and $molfil.$MOLEXT"
        fi
    else
        molfil=
        input_files="input file: $dalfil.$DALEXT"
    fi
    outnam=$dalfil
else
#  two input files;
#  remove .mol, if added by user
   molfil=`echo $2 | sed "s/\.$MOLEXT//"`
   if [ "$molfil" = "$dalfil" ]; then
      outnam=$molfil
   else
      outnam=${dalfil}_${molfil}
   fi
   input_files="input files: $dalfil.$DALEXT and $molfil.$MOLEXT"
fi
#  Added option for including a potential.inp file for embedding calculations
#  or a pcmsolver.pcm file for PCM calculations
if [ -n "$3" ]; then
   filename=`echo $3`
#  get filename extension. 
#  !WARNING! If input files are given without extension the following fails.
   extension="${filename##*.}"
   if [ "$extension" == "pot" ]; then
#  remove .pot, if added by user
      potfil=`echo $3 | sed "s/\.$POTEXT//"`
      if [ "$potfil" = "$molfil" ] && [ "$potfil" = "$dalfil" ]; then
         outnam=$potfil
      else
         outnam=${dalfil}_${molfil}_${potfil}
      fi
      input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
   else
#  remove .pcm, if added by user
      pcmfil=`echo $3 | sed "s/\.$PCMEXT//"`                                           
      if [ "$pcmfil" = "$molfil" ] && [ "$pcmfil" = "$dalfil" ]; then
         outnam=$pcmfil
      else
         outnam=${dalfil}_${molfil}_${pcmfil}
      fi
      input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $pcmfil.$PCMEXT"
   fi
   input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
fi
if [ $opto -eq 2 ]; then   # -ow input option
   OUTFIL=$outnam.$OUTEXT
   export OUTFIL
fi
if [ -n "$OUTFIL" ]; then
if [ -s  $OUTFIL -a -r $OUTFIL ]; then
   backup -v $OUTFIL
fi
fi

#

if [ $opt_noappend -eq 0 ]; then
    if [[ "$DALTON_TMPDIR" != */ ]]; then
        # if there is no final slash, we append it
        DALTON_TMPDIR=${DALTON_TMPDIR}/
    fi
    # now we append DALTON_scratch_$USER
    # better safe than sorry
    DALTON_TMPDIR=${DALTON_TMPDIR}DALTON_scratch_$USER
fi
export DALTON_TMPDIR
if [ ! -d "$DALTON_TMPDIR" ]; then
    mkdir -p $DALTON_TMPDIR
fi
if [ ! -d "$DALTON_TMPDIR" ]; then
    # this means that user has no permission to create scratch dir, stop
    echo "ERROR: you have no permission to create $DALTON_TMPDIR"
    exit 1
fi

# now we know that the directory exists
# we will now try whether user has write permission to this directory
file=$DALTON_TMPDIR/test_whether_dalton_can_create_this_file.$$.tmp
if [ -f $file ]; then
    rm $file &> /dev/null
fi
touch $file &> /dev/null
if [ -f $file ]; then
    rm $file &> /dev/null
else
    rm $file &> /dev/null
    echo "ERROR: you have no write permission to directory $DALTON_TMPDIR"
    exit 1
fi

if [ $opt_noappend -eq 1 ]; then
    SCRATCHDIR=$DALTON_TMPDIR
else
    # append pid to scratch directory to avoid multiple tests running in the same directory
    SCRATCHDIR=$DALTON_TMPDIR/${outnam}_$$
fi



echo
echo "   ***************************************** "
echo "   **** OUTPUT FROM DALTON SHELL SCRIPT **** "
echo "   ***************************************** "
echo
echo "   DALTON release @DALTON_VERSION@"
echo;
echo "   Invocation: $0 $paramlist"
echo; echo "   `date`"
echo;
echo "   Calculation: $outnam  ($input_files)"
echo "   PID        : $$"
echo "   Input dir  : $WRKDIR"
echo "   Scratch dir: $SCRATCHDIR"
echo;


ierr=0
   if [ -d "$SCRATCHDIR" ]; then
      if [ $optd -eq 1 ] ; then
         rm -rf $SCRATCHDIR/*
      fi
   else
      mkdir -p $SCRATCHDIR
   fi
   cd $SCRATCHDIR
   if [ -s $WRKDIR/$dalfil.$DALEXT -a -r $WRKDIR/$dalfil.$DALEXT ]; then
      cp $WRKDIR/$dalfil.$DALEXT DALTON.INP
   else
      echo "$WRKDIR/$dalfil.$DALEXT does not exist or is not readable"
      ierr=1
   fi
   if [ -s $WRKDIR/$molfil.$MOLEXT -a -r $WRKDIR/$molfil.$MOLEXT ]; then
      cp $WRKDIR/$molfil.$MOLEXT MOLECULE.INP
   else
      echo "$WRKDIR/$molfil.$MOLEXT does not exist or is not readable"
      echo " => assuming user has written MOLECULE input in dalton input file"
   fi
   if [ "$potfil" != "" ]; then 
     if [ -s $WRKDIR/$potfil.$POTEXT -a -r $WRKDIR/$potfil.$POTEXT ]; then
        cp $WRKDIR/$potfil.$POTEXT POTENTIAL.INP
     else
        echo "$WRKDIR/$potfil.$POTEXT for QM/MM does not exist or is not readable"
        ierr=1
     fi
   fi
   
   if [ "x$pcmfil" != "x" ]; then 
     if [ -s $WRKDIR/$pcmfil.$PCMEXT -a -r $WRKDIR/$pcmfil.$PCMEXT ]; then
        cp $WRKDIR/$pcmfil.$PCMEXT pcmsolver.inp
     else
        echo "$WRKDIR/$pcmfil.$PCMEXT for PCM does not exist or is not readable"
        ierr=1
     fi
   fi

   if [ -s $WRKDIR/mep.inp ] ; then
     cp $WRKDIR/mep.inp MEP.INP
   fi

   # put files listed under -put to scratch directory
   if [ "$PUT_FILES" != "" ]; then
      for file in $PUT_FILES; do
          echo copying $file to scratch directory
          cp $WRKDIR/$file $file
      done
   fi

   if [ "$optf" != "0" ] ; then
      if [ -s $WRKDIR/$optf.tar.gz -a -r $WRKDIR/$optf.tar.gz ] ; then
         echo "====================="
         echo "The '-f' option is active, now unpacking $optf.tar.gz into:"
         tar -z -x -v -f $WRKDIR/$optf.tar.gz
         echo "====================="
      elif [ -s $WRKDIR/$optf -a -r $WRKDIR/$optf ] ; then
#     hjaaj: at least GNU tar finds out autmatically if tar, tar.gz or
#     tar.bzip2 -- hopefully your tar program also does that!
         echo "====================="
         echo "The '-f' option is active, now unpacking $optf into:"
         tar -x -v -f $WRKDIR/$optf
         echo "====================="
      else
         echo "$WRKDIR/$optf.tar.gz does not exist or is not readable"
         ierr=1
      fi
   fi

if [ $ierr = 1 ]; then
   exit 1
fi

if [ -n "$DALTON_NUM_MPI_PROCS" ]; then
    if [ $optn -eq 0 ] ; then
        # DALTON_NUM_MPI_PROCS is set but -N is not
        # in this case default -N to DALTON_NUM_MPI_PROCS
        optn=$DALTON_NUM_MPI_PROCS
    fi
fi


# set environment variables for EFS code
if [ -z "$EFS_MEM_MB" ]; then
    export EFS_MEM_MB=4096
fi
if [ -z "$EFS_BUFFER_MB" ]; then
    export EFS_BUFFER_MB=1024
fi
if [ -z "$QIC_DIR" ]; then
    export QIC_DIR=$SCRIPT_DIR/external/efs-build/qic
fi


if [ $optn -gt 1 ] ; then

   if ! [ -s "$MPIRUN" -a -x "$MPIRUN" ]; then
      echo
      echo "ERROR: $optn MPI nodes were requested, however"
      echo '       mpirun command has not been defined, does not exist or is not executable'
      echo '       echo $MPIRUN gives this string: "' $MPIRUN '"'
      exit 1
   fi

   if [ -z "$OMP_NUM_THREADS" ]; then
      export OMP_NUM_THREADS=1
      echo
      echo 'INFO : OMP_NUM_THREADS set to 1 because it was not defined by user'
      echo 'INFO : and the cores are probably used by MPI'
      echo
   fi

   if [ -n "$DALTON_USE_GLOBAL_SCRATCH" ] ; then
       echo 'DALTON_USE_GLOBAL_SCRATCH is defined: Dalton will use global scratch dir'
   else
       if [ -n "$PBS_NODEFILE" -a "$opt_nocpex" != "1" ] ; then
       echo 'Copying dalton executable from master node: ' ${HOSTNAME}
           # $PBS_NODEFILE is defined, then do the instructions below
           echo 'Nodelist:'
           cat $PBS_NODEFILE | sort | uniq
           for node in `cat $PBS_NODEFILE | sort | uniq`
           do
              if [ ${node} == ${HOSTNAME%\.local} ]
              then
                  continue
              else
                  $SSH ${node} "mkdir -p $SCRATCHDIR"
                  $SCP dalton.x ${node}:$SCRATCHDIR/dalton.x
                  echo 'Copying executable to: ' ${node}
              fi
           done
       fi
   fi

   $MPIRUN -np $optn $DALTON_EXECUTABLE
   ierr=$?

   if [ $ierr -ne 0 ];then
      echo "Error in $MPIRUN -np $optn $DALTON_EXECUTABLE, exit code $ierr"
#     No "exit $ierr" here, because we want to save output and 
#     tar-file for restart possibilities !!!!!!
   fi

   if [ "$optx" != "0" ] ; then
      if [ -s $WRKDIR/$gs.tar.gz -a -r $WRKDIR/$gs.tar.gz ] ; then
         echo "The '-x' option is active, now unpacking $gs.tar.gz into:"
         gunzip < $WRKDIR/$gs.tar.gz | tar xvf - SIRIFC
         if [ -s SIRIFC -a -r SIRIFC ] ; then
            mv -v SIRIFC SIRIFC1
         else
            echo $WRKDIR/$gs.tar.gz does not contain interface file SIRIFC
            ierr=1
         fi
      else
         echo "$WRKDIR/$gs.tar.gz does not exist or is not readable"
         ierr=1
      fi
      if [ -s $WRKDIR/$ch.tar.gz -a -r $WRKDIR/$ch.tar.gz ] ; then
         echo "The '-x' option is active, now unpacking $ch.tar.gz into:"
         gunzip < $WRKDIR/$ch.tar.gz | tar xvf - SIRIFC
         if [ -s SIRIFC -a -r SIRIFC ] ; then
            mv -v SIRIFC SIRIFC2
         else
            echo $WRKDIR/$ch.tar.gz does not contain interface file SIRIFC
            ierr=1
         fi
      else
         echo "$WRKDIR/$ch.tar.gz does not exist or is not readable"
         ierr=1
      fi
   fi
else
# not using MPI
   if [ -n "$DALTON_LAUNCHER" ]; then
      $DALTON_LAUNCHER $DALTON_EXECUTABLE
      ierr=$?
      if [ $ierr -ne 0 ];then
         echo "Error in $DALTON_LAUNCHER $DALTON_EXECUTABLE, exit code $ierr"
#        No "exit $ierr" here, because we want to save output and 
#        tar-file for restart possibilities.
      fi
   else
      $DALTON_EXECUTABLE
      ierr=$?
      if [ $ierr -ne 0 ];then
         echo "Error in $DALTON_EXECUTABLE, exit code $ierr"
#        No "exit $ierr" here, because we want to save output and 
#        tar-file for restart possibilities.
      fi
   fi
fi

# list of files which will be saved in $outnam.tar.gz
# for subsequent calculations
filelist="DALTON.STAT SIRIUS.RST RESULTS.RSP RESPONSE.C8 RSPVEC ABSVECS SIRIFC* DALTON.NCA DALTON.MOL DALTON.ORB DALTON.IRC DALTON.BAS DALTON.TRJ DALTON.CM DALTON.HES DALTON.MOPUN DALTON.WLK molden.inp DALTON.PROP LUCITA_CVECS.a LUCITA_CVECS.b LUCITA_CVECS.c LUCITA_CVECS.d LUCITA_CVECS.e LUCITA_CVECS.f LUCITA_CVECS.g LUCITA_CVECS.h gv.off FCIDUMP pe_*.bin UNIT1 UNIT2 rsp_tensor_human final_geometry.xyz *.cube $GET_FILES"
pcmfiles="cavity.off PCM_mep_asc PEDRA.OUT"
filelist="$filelist $pcmfiles"

if [ -s DALTON.OUT.n0001 -a -r DALTON.OUT.n0001 ]; then
   tarfilelist="DALTON.OUT.n*"
else
   tarfilelist=
fi

for i in $filelist ; do
   if [ -s $i -a -r $i ] ; then
      tarfilelist=$tarfilelist" "$i
   fi
done


if [ $opt_noarch -eq 0 ]; then
    if [ -s "first.wrl" -a -r "first.wrl" ] ; then
    #  include ALL *.wrl files if first.wrl exists
       tar cf - $tarfilelist *wrl | gzip -9 > $outnam.tar.gz
    else
       tar cf - $tarfilelist | gzip -9 > $outnam.tar.gz
    fi
fi

if [ -s $outnam.tar.gz ] ; then
   backup -v $WRKDIR/$outnam.tar.gz 
   cp $outnam.tar.gz $WRKDIR
   echo "$outnam.tar.gz has been copied to $WRKDIR"
else
    echo "$outnam.tar.gz has not been created and has thus not been copied to $WRKDIR"
fi

# copy files listed under -get back from scratch directory
if [ "$GET_FILES" != "" ]; then
   for file in $GET_FILES; do
       echo copying $file back from scratch directory
       cp $file $WRKDIR/$outnam.$file
   done
fi

if [ $opto -eq 1 ] ; then
   if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
      echo "Output is in $WRKDIR/$OUTFIL as requested in input."
   else
      echo "$WRKDIR/$OUTFIL has not been created from the present run"
      if [ $optD -eq 1 ] ; then
         echo "$SCRATCHDIR is therefore not deleted by this script."
      fi
      exit 2
   fi
else
   if [ -s DALTON.OUT -a -r DALTON.OUT ]; then
      OUTFIL=$outnam.$OUTEXT
      backup -v $WRKDIR/$OUTFIL
      cp DALTON.OUT $WRKDIR/$OUTFIL
   else
      echo "DALTON.OUT has not been created from the present run."
      if [ $optD -eq 1 ] ; then
         echo "$SCRATCHDIR is therefore not deleted by this script."
      fi
      echo "List of created files in $SCRATCHDIR :"
      ls -sltr
      exit 2
   fi
fi

cd $WRKDIR

# check if error exit, warnings, or info messages

NERR=`grep -c ERROR $OUTFIL`
if [ $ierr -ne 0 -o $NERR -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "WARNING for ERROR  (Dalton program stopped with exit code $ierr)"
   if [ $optD -eq 1 ] ; then
      echo "- THEREFORE scratch directory $SCRATCHDIR is not deleted"
      echo "  by this script so you may restart the calculation, if possible"
      echo "  ( $SCRATCHDIR may be deleted by your queueing system )"
      echo "- REMEMBER to delete $SCRATCHDIR yourself !!!"; echo
      optD=0
   fi
   [ $NERR -gt 0 ] && ( echo "Output from 'grep -n ERROR' :"; grep -n ERROR $OUTFIL )
fi

nwrn=`grep -c -i WARNING $OUTFIL`
if [ $nwrn -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "$nwrn WARNINGS have been issued by Dalton,"
   echo "output from 'grep -n -i WARNING'  (max 10 warnings):"
   grep -n -i "WARNING" $OUTFIL | head -10
fi

ninfo=`grep -c '[^"]INFO' $OUTFIL`
if [ $ninfo -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "$ninfo informational messages have been issued by Dalton,"
   echo "output from 'grep -n INFO'  (max 10 lines):"
   grep -n INFO $OUTFIL | grep -v 'Check output, result, and error' | head -10
fi

if [ $optD -eq 1 ] ; then
   rm -rf $SCRATCHDIR
fi

echo; echo "   `date`"
echo "   ***************************************** "

if [ $ierr -ne 0 ]; then
   exit $ierr
fi
