#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > cc_fop_drw2e.info <<'%EOF%'
   cc_fop_drw2e
   ------------
   Molecule:         N2 in D2h
   Wave Function:    CC2, CCSD / cc-pVTZ
   Test Purpose:     Two-electron Darwin term
%EOF%

#######################################################################
#  INTEGRAL INPUT
#######################################################################
cat > cc_fop_drw2e.mol <<'%EOF%'
BASIS
cc-pVTZ
Calculation of two-electron Darwin term for neon

    1    3  X  Y  Z   1.00D-15
       10.0   1    3    1    1    1
Ne    0.0000000000000000  0.0000000000000000 0.00000000000000000       *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > cc_fop_drw2e.dal <<'%EOF%'
**DALTON INPUT
.RUN WAVE FUNCTIONS
**INTEGRAL
.DIPLEN
.THETA
.EFGCAR
.SECMOM
.DARWIN
.MASSVELO
**WAVE FUNCTION
.CC
*SCF INP
.THRESH
 1.0D-9
.DOUBLY OCCUPIED
 2 1 1 0 1 0 0 0
*CC INP
.CC2
.CCSD
.PRINT
 4
.THRENR
1.0D-11
.THRLEQ
5.0D-08
*CCFOP
.2ELDAR
**END OF DALTON INPUT
%EOF%
#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >cc_fop_drw2e.check
cat >>cc_fop_drw2e.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi

# SCF, MP2, CC2 and CCSD energies:
CRIT1=`$GREP "Final * HF energy: * -128\.53186163632" $log | wc -l`
CRIT2=`$GREP "Total MP2   energy: * -128\.809153237" $log | wc -l`
CRIT3=`$GREP "Total CC2   energy: * -128\.810281945" $log | wc -l`
CRIT4=`$GREP "Total CCSD  energy: * -128\.810814130" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4` 
CTRL[1]=7
ERROR[1]="ENERGIES NOT CORRECT"


# Darwin terms
CRIT1=`$GREP  " 2-elec\. Darwin term: * ( -|-0)\.00701828" $log | wc -l`
CRIT2=`$GREP  "Ecorr = * -128\.81028194516" $log | wc -l`
CRIT3=`$GREP  " 2-elec\. Darwin term: * ( -|-0)\.00702005" $log | wc -l`
CRIT4=`$GREP  "Ecorr = * -128\.81081413003" $log | wc -l`

TEST[2]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3  \+ $CRIT4`
CTRL[2]=4
ERROR[2]="2 ELECTRON DARWIN TERMS NOT CORRECT"

PASSED=1
for i in 1 2
do 
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done 

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM 
  exit 1
fi

%EOF%
#######################################################################
