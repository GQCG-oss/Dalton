#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > pehf_border.info <<'%EOF%'
   pehf_border
   -----------
   Molecule:         FP chromophore and nearest sidechains
   Wave Function:    Not relevant
   Test Purpose:     Testing the quantum-classical border handling
                     options of the PE library
%EOF%
#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > pehf_border.mol <<'%EOF%'
BASIS
STO-3G
FP chromophore
--------------
AtomTypes=15 Angstrom NoSymmetry
Charge=6.0 Atoms=1
C   11.642000   68.057000  -12.147000
Charge=8.0 Atoms=1
O   10.933000   67.241000  -12.738000
Charge=7.0 Atoms=1
N   11.385000   68.446000  -10.896000
Charge=6.0 Atoms=3
C   10.237000   67.920000  -10.172000
C    9.431000   69.147000   -9.749000
C   10.723000   67.085000   -8.984000
Charge=8.0 Atoms=1
O    9.652000   66.344000   -8.424000
Charge=7.0 Atoms=1
N    9.543000   69.559000   -8.452000
Charge=6.0 Atoms=2
C    8.729000   70.767000   -8.479000
C    8.131000   70.900000   -9.852000
Charge=8.0 Atoms=1
O    7.326000   71.733000  -10.289000
Charge=6.0 Atoms=7
C    8.491000   71.711000   -7.501000
C    8.987000   71.776000   -6.180000
C    9.853000   70.805000   -5.669000
C    8.622000   72.829000   -5.348000
C   10.348000   70.900000   -4.352000
C    9.098000   72.935000   -4.033000
C    9.954000   71.973000   -3.543000
Charge=8.0 Atoms=1
O   10.379000   72.087000   -2.245000
Charge=7.0 Atoms=1
N    8.653000   69.907000  -10.550000
Charge=6.0 Atoms=2
C    8.418000   69.770000  -11.975000
C    7.239000   68.914000  -12.412000
Charge=8.0 Atoms=1
O    6.736000   69.089000  -13.541000
Charge=7.0 Atoms=1
N    6.850000   67.949000  -11.587000
Charge=1.0 Atoms=16
H   12.581000   68.386000  -12.566000
H   11.991000   69.113000  -10.440000
H    9.676000   67.246000  -10.819000
H   11.495000   66.392000   -9.318000
H   11.134000   67.745000   -8.219000
H    9.762000   66.291000   -7.472000
H   10.151000   69.969000   -6.285000
H    7.953000   73.596000   -5.710000
H   11.026000   70.149000   -3.974000
H    8.793000   73.766000   -3.414000
H   10.650000   71.225000   -1.920000
H    7.841000   72.549000   -7.706000
H    8.237000   70.753000  -12.410000
H    9.292000   69.319000  -12.446000
H    6.088000   67.330000  -11.824000
H    7.319000   67.822000  -10.702000
%EOF%
#######################################################################
#  POTENTIAL INPUT
#######################################################################
cat > pehf_border.pot <<'%EOF%'
! Potential by PEAS 0.1 
! B3LYP/A-6-31PGP LoProp multipole moments
! B3LYP/A-6-31PGP LoProp polarizabilities
coordinates
46
AA
C     5.75600000   67.06100000  -11.92700000
C     4.70200000   66.98800000  -10.79500000
O     4.37800000   65.91800000  -10.27000000
C     6.28200000   65.64100000  -12.35500000
C     6.94900000   65.72500000  -13.75000000
C     7.30900000   65.07900000  -11.35400000
N     4.08500000   68.12700000  -10.51800000
C     3.29100000   68.26500000   -9.29900000
H     6.57900000   67.72900000  -11.67100000
H     5.34100000   67.34800000  -12.89300000
H     5.44900000   64.93800000  -12.38400000
H     7.31100000   64.73900000  -14.04000000
H     6.22000000   66.07400000  -14.48100000
H     7.78600000   66.42200000  -13.71200000
H     7.64500000   64.09800000  -11.68900000
H     8.16300000   65.75300000  -11.29200000
H     6.84700000   64.98800000  -10.37100000
H     2.31900000   67.78500000   -9.41300000
H     3.18100000   69.32100000   -9.05300000
H     4.16100000   68.91000000  -11.15200000
H     3.84100000   67.84600000   -8.45700000
C    12.77100000   72.29900000  -12.42300000
C    12.47300000   70.89200000  -12.92500000
O    11.51000000   70.69000000  -13.64500000
N    13.22600000   69.91600000  -12.45200000
C    12.96300000   68.52000000  -12.73600000
C    14.06300000   67.64300000  -12.14500000
C    15.43200000   67.88300000  -12.72300000
C    15.61300000   68.09900000  -14.09500000
C    16.55600000   67.74200000  -11.91300000
C    16.87900000   68.16200000  -14.64600000
C    17.85400000   67.80000000  -12.46500000
C    18.01100000   68.01100000  -13.84000000
H    12.88500000   72.32400000  -11.33900000
H    13.65000000   72.71700000  -12.91300000
H    12.00400000   73.01200000  -12.72500000
H    12.01500000   68.18800000  -12.31300000
H    14.02100000   70.13000000  -11.86700000
H    12.92200000   68.37000000  -13.81500000
H    14.13600000   67.82400000  -11.07300000
H    13.82500000   66.59400000  -12.32000000
H    14.75500000   68.21900000  -14.74000000
H    16.44000000   67.58600000  -10.85100000
H    16.99900000   68.32900000  -15.70600000
H    18.71800000   67.68200000  -11.82700000
H    18.99700000   68.05800000  -14.27900000
monopoles
46
  1   -0.29871200
  2    0.40527160
  3   -0.51664311
  4   -0.05246413
  5   -0.38629411
  6   -0.38695011
  7   -0.31085553
  8   -0.27707697
  9    0.12937270
 10    0.13442681
 11    0.12875488
 12    0.12810358
 13    0.11777656
 14    0.11752130
 15    0.12100322
 16    0.10989656
 17    0.13851889
 18    0.14434222
 19    0.13808895
 20    0.26404836
 21    0.15187032
 22   -0.44117879
 23    0.41819833
 24   -0.52478823
 25   -0.31106961
 26   -0.12364504
 27   -0.24145489
 28    0.00327059
 29   -0.15049540
 30   -0.15635475
 31   -0.13259372
 32   -0.13746927
 33   -0.14450805
 34    0.13718861
 35    0.14586799
 36    0.15949139
 37    0.14073229
 38    0.26000495
 39    0.13519970
 40    0.12168611
 41    0.14696061
 42    0.13595580
 43    0.13311383
 44    0.14247095
 45    0.14173435
 46    0.14168226
dipoles
46
  1   -0.00890436   -0.22815156    0.01732588
  2   -0.08783483   -0.05433653    0.05810090
  3    0.14390126    0.48500620   -0.25885423
  4    0.18715336    0.11673356    0.00230206
  5   -0.08590810   -0.02703509    0.18331415
  6   -0.14770008    0.05798821   -0.13615598
  7   -0.03448351   -0.21510271    0.12722770
  8    0.12770700   -0.01941889   -0.15917239
  9   -0.23993051   -0.19956575   -0.07414037
 10    0.14840187   -0.12673431    0.27899778
 11    0.24785684    0.19876611    0.01853296
 12   -0.11316690    0.30151217    0.09532797
 13    0.22464446   -0.10945646    0.23726283
 14   -0.25895809   -0.21709712   -0.00806667
 15   -0.10997768    0.30804925    0.10133183
 16   -0.26982233   -0.21157329   -0.02055262
 17    0.13141154    0.02660555   -0.30024087
 18    0.27685287    0.13166888    0.02267600
 19    0.04156135   -0.32478259   -0.06378880
 20   -0.01774327   -0.16793903    0.12637697
 21   -0.15406340    0.13115612   -0.24332867
 22   -0.05755683   -0.07822467   -0.06711307
 23   -0.08198472   -0.06055779   -0.02268624
 24    0.44732895    0.08785257    0.34088666
 25   -0.18896464   -0.04982665   -0.14874578
 26    0.18821526    0.09992118    0.13944269
 27    0.01625762    0.12972515   -0.17075346
 28    0.02604015   -0.07479523   -0.00942809
 29    0.21662536   -0.03103374    0.12738064
 30    0.02753873    0.02162436   -0.25575149
 31   -0.03692519   -0.04186737    0.24837525
 32   -0.20265849    0.02177902   -0.14996037
 33   -0.23491366   -0.01015745    0.09995006
 34   -0.04022336   -0.00911023   -0.32727892
 35   -0.28548155   -0.11669123    0.14182917
 36    0.24153992   -0.20703220    0.08228392
 37    0.27449080    0.09267257   -0.11709140
 38   -0.16695024   -0.04547955   -0.12518719
 39    0.02348029    0.04762372    0.30306681
 40   -0.01363381   -0.05048339   -0.33150831
 41    0.07471686    0.30410036    0.04657099
 42    0.22660649   -0.02817268    0.17791498
 43    0.03309453    0.04451326   -0.29343590
 44   -0.03201961   -0.04596553    0.29010507
 45   -0.23423426    0.03160403   -0.17400009
 46   -0.26936521   -0.01276147    0.11895779
quadrupoles
46
  1   -3.28727133    0.02648725   -0.12076402   -3.09277883    0.19761599   -3.16857375
  2   -2.84717353   -0.01929113   -0.63385468   -1.91066695   -0.36434134   -2.81395487
  3   -4.32090512    0.30063227    0.05663189   -3.69290413   -0.35745359   -4.15006045
  4   -2.59966741   -0.24901012   -0.01985157   -2.44792375   -0.05492381   -2.35719949
  5   -3.29137024    0.03123852   -0.15741276   -3.40134246   -0.01723704   -3.09121169
  6   -3.18849505   -0.04811994    0.16578356   -3.36371132   -0.06832621   -3.29575466
  7   -3.85156294   -0.47191815   -0.65962837   -2.82727613   -0.24056675   -3.23029331
  8   -3.10787631    0.02283787   -0.22485737   -3.29737900    0.09160966   -2.88845826
  9   -0.31176914    0.26621729    0.10581470   -0.45679911    0.07940746   -0.62277191
 10   -0.54701546   -0.06822814    0.21772177   -0.60259728   -0.14383908   -0.13583158
 11   -0.32617784    0.27730056    0.00108716   -0.42702041    0.01379362   -0.63712371
 12   -0.59587437   -0.19556166   -0.05344271   -0.12888351    0.14615389   -0.62172263
 13   -0.37458492   -0.14379232    0.28973580   -0.60456032   -0.13660038   -0.38334504
 14   -0.31415219    0.30626738    0.03465606   -0.41619844    0.02405723   -0.67105806
 15   -0.60763750   -0.18066969   -0.06302950   -0.14524294    0.18585884   -0.60265535
 16   -0.31845149    0.30574278    0.01000862   -0.43040709    0.01590298   -0.68463753
 17   -0.49750889    0.01761207   -0.25332477   -0.65136894   -0.04083371   -0.13138073
 18   -0.19792937    0.21850733    0.05575330   -0.51790013    0.03640513   -0.60315315
 19   -0.62915511   -0.07233539   -0.02478491   -0.03796187    0.13843821   -0.61467557
 20   -0.54261980    0.01134808   -0.01951405   -0.26209464   -0.19393929   -0.39857800
 21   -0.45606241   -0.12089907    0.22180807   -0.51971899   -0.18228193   -0.28149588
 22   -3.57917150    0.04539834    0.01574351   -3.27255391   -0.00130929   -3.36946144
 23   -2.37500024   -0.07640048    0.82524157   -2.19342462    0.14087034   -2.84546886
 24   -3.75141125    0.12511707    0.29733073   -4.46322717    0.03703938   -3.93592207
 25   -3.28088108   -0.10140624    0.80487128   -2.78857425    0.03797459   -3.85006741
 26   -2.94234026   -0.02527679    0.17292058   -2.46057861   -0.01528865   -3.00887520
 27   -2.66659925   -0.17688160    0.02275441   -3.06212468   -0.08810864   -3.07325223
 28   -2.37566024    0.10147755    0.09903655   -3.94023875   -0.34433079   -2.21063131
 29   -2.77199872    0.02563215   -0.24154676   -4.31172488   -0.27969662   -2.59631306
 30   -2.36555206   -0.04909605    0.08823074   -4.39560205   -0.24062029   -2.93198106
 31   -2.28664346   -0.03917100    0.02923132   -4.26499351   -0.23206430   -2.88721906
 32   -2.66739020    0.01763865   -0.27026784   -4.30731358   -0.27323759   -2.57537785
 33   -2.80613846   -0.06239019    0.18620462   -4.29742248   -0.30067991   -2.46999272
 34   -0.64598148    0.00582327    0.06550398   -0.63881691    0.01285113   -0.03156825
 35   -0.21338656    0.19385229   -0.23886116   -0.55116396   -0.10542205   -0.50815020
 36   -0.28840004   -0.29126392    0.13122698   -0.35926870   -0.11216236   -0.57543972
 37   -0.21524567    0.13655793   -0.18951935   -0.58729010   -0.05449284   -0.54906864
 38   -0.27401281    0.04695367    0.19529891   -0.51851191    0.04851827   -0.40096048
 39   -0.61362550    0.00469973    0.00989377   -0.61018955    0.06804991   -0.09960141
 40   -0.66537441    0.00748598    0.03990008   -0.63134453    0.09739882   -0.07278466
 41   -0.63327449    0.10248287    0.02682749   -0.10044504    0.10546777   -0.62670829
 42   -0.30071318   -0.05105486    0.25218784   -0.66354459   -0.03243005   -0.45926627
 43   -0.64657471    0.00558578   -0.05689919   -0.66762374   -0.08338859   -0.14017558
 44   -0.64058080    0.00789019   -0.05518156   -0.65795792   -0.08407399   -0.13288294
 45   -0.30950067   -0.04873619    0.25174773   -0.66539212   -0.03748900   -0.46117456
 46   -0.20072032    0.02066013   -0.19896403   -0.66901851   -0.01458668   -0.55848625
alphas
46
  1    8.15407890   -2.30877090   -3.63078616    8.82894385    1.77948395    8.38880157
  2    7.70201556   -2.24499424   -3.32636998    9.83773487    0.69879347    6.83279452
  3    4.03566572    0.72689833   -0.93214489    7.58237663   -2.04593349    4.27117891
  4    7.63319354   -3.43863251   -0.74263078    7.90141883    0.03528310    9.65368235
  5    6.52437664   -0.16756199   -1.97327566    5.53329780    0.52987525   10.42409693
  6    8.01934466   -1.67226315    2.10377720    6.64235675   -1.46949092    7.42713001
  7    7.13391558   -3.22122143   -2.82320908    7.99990062    2.38804618    7.06325884
  8    7.16075600   -0.41708932   -2.40848859    5.12899215    1.84734482    7.97207828
  9    2.55804374    1.60603050    0.43468025    2.13717131    0.55806933    0.71341909
 10    0.99863418   -0.47416532    0.83166642    0.97976895   -1.08382576    3.41680197
 11    2.59913838    1.68826319    0.12771465    2.07292354    0.16988975    0.59816815
 12    1.04939136   -1.43597390   -0.58320845    3.57232618    1.17330496    1.20999828
 13    1.89610059   -0.69693327    1.53840859    0.78410689   -0.72627689    2.95734093
 14    2.85823414    1.85133604   -0.17054592    1.84423668   -0.03502009    0.64233576
 15    1.10508174   -1.61183811   -0.42277314    4.04257322    0.98768766    0.73081318
 16    3.21935344    1.80184853    0.35542921    1.50921798    0.16062050    0.61018180
 17    0.94053303    0.00984473   -0.95582884    0.56560427   -0.47573987    3.73197786
 18    3.92877454    1.48062178    0.15796500    0.83958287    0.11907487    0.45654258
 19    0.61375434   -0.95068428   -0.29745688    4.31968077    1.07757016    0.83942884
 20    0.52856630   -0.09690680   -0.03623771    2.31098536   -1.31146603    1.36774251
 21    1.08514324   -0.48494706    0.98602023    0.66520775   -0.67909809    3.05928386
 22    5.79703447   -0.16322518   -0.13730394   10.35657694    1.48686359    6.06409315
 23    8.35886799   -2.22984437    3.06190763   10.94999828   -0.64659351    5.50994062
 24    7.88932960    0.41497141    3.33718543    3.63993117   -0.21863991    5.14956561
 25    5.98799012   -4.71873665    0.71032152   12.11025160   -0.89876793    4.04681885
 26    7.95106847   -3.40609394    0.78141993   10.27036240    0.12847653    4.17747283
 27   12.51219348   -0.91298998   -1.21072363    7.06882866   -1.25684461    5.28340634
 28   13.23570753    0.15809566   -1.01545468    4.72269315   -0.76409139   11.17911143
 29   10.93790026    0.45818773   -4.63075982    5.56952771    0.03395808   10.54286895
 30   14.09555687   -0.50745848    1.02102914    5.89403480   -0.55607938    7.71965115
 31   13.91050122   -0.25022056   -0.07346197    5.95337397   -0.07116709    7.98450975
 32   10.71251118    0.17538250   -2.15801397    6.28580555   -0.42048612   10.35998571
 33    9.84560083   -0.37170001    1.51414106    6.32098148   -0.72374806   10.94396095
 34    0.49151857    0.05029587    0.23312912    0.67117981    0.91644603    4.13818488
 35    2.73634275    1.28011791   -1.22939777    1.47818438   -0.86617330    1.08229755
 36    2.32947685   -1.96011114    0.70406738    2.80036530   -0.77719395    0.58264907
 37    3.82532730    1.05988811   -1.41792838    1.12706684   -0.58206099    0.92822004
 38    1.97841626    0.17025914    1.01643493    0.81219473    0.23908300    1.18884841
 39    0.69497098   -0.01519898    0.20891723    0.73559527    0.94983546    3.17023553
 40    0.68923638   -0.11511526   -0.45678859    0.54454323    0.05256035    4.02147287
 41    1.10394747    1.34205197    0.11882029    4.26266399    0.41874305    0.40771215
 42    2.93887553   -0.37243554    1.69078657    0.49333699   -0.27373293    1.93766901
 43    0.65086879   -0.00309532   -0.16832227    0.56419983   -0.71510872    4.51251181
 44    0.62540451    0.10304479   -0.79347172    0.54864740   -0.55001419    4.83099738
 45    3.67300526   -0.44871278    2.25238857    0.53958323   -0.36174912    2.01176291
 46    4.57584932    0.15603240   -1.78877492    0.46003787   -0.03250749    1.27957815
exclists
25
  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  2  1  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  3  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  4  1  2  3  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  5  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  6  1  2  3  4  5  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  7  1  2  3  4  5  6  8  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  8  1  2  3  4  5  6  7  9 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
  9  1  2  3  4  5  6  7  8 10 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
 10  1  2  3  4  5  6  7  8  9 11 12 13 14 15 16 17 18 19 20 21  0  0  0  0
 11  1  2  3  4  5  6  7  8  9 10 12 13 14 15 16 17 18 19 20 21  0  0  0  0
 12  1  2  3  4  5  6  7  8  9 10 11 13 14 15 16 17 18 19 20 21  0  0  0  0
 13  1  2  3  4  5  6  7  8  9 10 11 12 14 15 16 17 18 19 20 21  0  0  0  0
 14  1  2  3  4  5  6  7  8  9 10 11 12 13 15 16 17 18 19 20 21  0  0  0  0
 15  1  2  3  4  5  6  7  8  9 10 11 12 13 14 16 17 18 19 20 21  0  0  0  0
 16  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 17 18 19 20 21  0  0  0  0
 17  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 18 19 20 21  0  0  0  0
 18  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 19 20 21  0  0  0  0
 19  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 20 21  0  0  0  0
 20  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 21  0  0  0  0
 21  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20  0  0  0  0
 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 23 22 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 24 22 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 25 22 23 24 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 26 22 23 24 25 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 27 22 23 24 25 26 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 28 22 23 24 25 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 29 22 23 24 25 26 27 28 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 30 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 31 22 23 24 25 26 27 28 29 30 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 32 22 23 24 25 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46
 33 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 38 39 40 41 42 43 44 45 46
 34 22 23 24 25 26 27 28 29 30 31 32 33 35 36 37 38 39 40 41 42 43 44 45 46
 35 22 23 24 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40 41 42 43 44 45 46
 36 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 39 40 41 42 43 44 45 46
 37 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 38 39 40 41 42 43 44 45 46
 38 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 39 40 41 42 43 44 45 46
 39 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 41 42 43 44 45 46
 40 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46
 41 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 42 43 44 45 46
 42 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 43 44 45 46
 43 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 45 46
 44 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 46
 45 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 46
 46 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > pehf_border__1.dal <<'%EOF%'
**DALTON
.PEQM
*PEQM
.BORDER
REMOVE 1.4 AA
**END OF
%EOF%
cat > pehf_border__2.dal <<'%EOF%'
**DALTON
.PEQM
*PEQM
.BORDER
REMOVE 1.8 AA
**END OF
%EOF%
cat > pehf_border__3.dal <<'%EOF%'
**DALTON
.PEQM
*PEQM
.BORDER
REDIST 1 1.4 AA 1
**END OF
%EOF%
cat > pehf_border__4.dal <<'%EOF%'
**DALTON
.PEQM
*PEQM
.BORDER
REDIST 2 1.4 AA 2
**END OF
%EOF%
cat > pehf_border__5.dal <<'%EOF%'
**DALTON
.PEQM
*PEQM
.BORDER
REDIST -3 1.4 AA 3
**END OF
%EOF%
cat > pehf_border__6.dal <<'%EOF%'
**DALTON
.PEQM
*PEQM
.BORDER
REDIST -1 1.4 AA 2
**END OF
%EOF%

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL > pehf_border__1.check
cat >> pehf_border__1.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# quantum-classical border option
#
CRIT1=`$GREP "Removing all parameters on site:    37" $log | wc -l`
CRIT2=`$GREP "Removing all parameters on site:     9" $log | wc -l`
CRIT3=`$GREP "Removing all parameters on site:    26" $log | wc -l`
CRIT4=`$GREP "Removing all parameters on site:    39" $log | wc -l`
CRIT5=`$GREP "Removing all parameters on site:     1" $log | wc -l`
CRIT6=`$GREP "Removing all parameters on site:    10" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[1]=6
ERROR[1]="REMOVAL OF PARAMETERS NOT CORRECT"

PASSED=1 
for i in 1
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%
echo $CHECK_SHELL > pehf_border__2.check
cat >> pehf_border__2.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# quantum-classical border option
#
 CRIT1=`$GREP "Removing all parameters on site:    26" $log | wc -l`
 CRIT2=`$GREP "Removing all parameters on site:    37" $log | wc -l`
 CRIT3=`$GREP "Removing all parameters on site:     9" $log | wc -l`
 CRIT4=`$GREP "Removing all parameters on site:     1" $log | wc -l`
 CRIT5=`$GREP "Removing all parameters on site:    25" $log | wc -l`
 CRIT6=`$GREP "Removing all parameters on site:    27" $log | wc -l`
 CRIT7=`$GREP "Removing all parameters on site:    39" $log | wc -l`
 CRIT8=`$GREP "Removing all parameters on site:     2" $log | wc -l`
 CRIT9=`$GREP "Removing all parameters on site:     4" $log | wc -l`
CRIT10=`$GREP "Removing all parameters on site:    10" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 `
CTRL[1]=10
ERROR[1]="REMOVAL OF PARAMETERS NOT CORRECT"

PASSED=1 
for i in 1
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%
echo $CHECK_SHELL > pehf_border__3.check
cat >> pehf_border__3.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# quantum-classical border option
#
 CRIT1=`$GREP "from site:    37" $log | wc -l`
 CRIT2=`$GREP "from site:     9" $log | wc -l`
 CRIT3=`$GREP "from site:    26" $log | wc -l`
 CRIT4=`$GREP "from site:    39" $log | wc -l`
 CRIT5=`$GREP "from site:     1" $log | wc -l`
 CRIT6=`$GREP "from site:    10" $log | wc -l`
 CRIT7=`$GREP "to neighbouring site:    25" $log | wc -l`
 CRIT8=`$GREP "to neighbouring site:     2" $log | wc -l`
 CRIT9=`$GREP "to neighbouring site:    42" $log | wc -l`
CRIT10=`$GREP "to neighbouring site:     4" $log | wc -l`
CRIT11=`$GREP "Redistributing multipoles upto 0th order" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 `
CTRL[1]=18
ERROR[1]="REDISTRIBUTION OF PARAMETERS NOT CORRECT"

#
# redistribution of charges
#
CRIT1=`$GREP "C * 2 * (|0)\.2359" $log | wc -l`
CRIT2=`$GREP "C * 4 * (|0)\.0820" $log | wc -l`
CRIT3=`$GREP "N * 25 * (\-|\-0)\.2940" $log | wc -l`
CRIT4=`$GREP "H * 42 * (|0)\.2712" $log | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 `
CTRL[2]=4
ERROR[2]="REDISTRIBUTION OF CHARGES NOT CORRECT"

PASSED=1 
for i in 1 2
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%
echo $CHECK_SHELL > pehf_border__4.check
cat >> pehf_border__4.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# quantum-classical border option
#
 CRIT1=`$GREP "from site:    37" $log | wc -l`
 CRIT2=`$GREP "from site:     9" $log | wc -l`
 CRIT3=`$GREP "from site:    26" $log | wc -l`
 CRIT4=`$GREP "from site:    39" $log | wc -l`
 CRIT5=`$GREP "from site:     1" $log | wc -l`
 CRIT6=`$GREP "from site:    10" $log | wc -l`
 CRIT7=`$GREP "to neighbouring sites:    25    27" $log | wc -l`
 CRIT8=`$GREP "to neighbouring sites:     2     4" $log | wc -l`
 CRIT9=`$GREP "to neighbouring sites:    42    25" $log | wc -l`
CRIT10=`$GREP "to neighbouring sites:     4    13" $log | wc -l`
CRIT11=`$GREP "Redistributing multipoles upto 1st order" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 `
CTRL[1]=18
ERROR[1]="REDISTRIBUTION OF PARAMETERS NOT CORRECT"

#
# redistribution of charges
#
CRIT1=`$GREP "C * 2 * (|0)\.3206" $log | wc -l`
CRIT2=`$GREP "C * 4 * (\-|\-0)\.0699" $log | wc -l`
CRIT3=`$GREP "H * 13 * (|0)\.1850" $log | wc -l`
CRIT4=`$GREP "N * 25 * (\-|\-0)\.2349" $log | wc -l`
CRIT5=`$GREP "C * 27 * (\-|\-0)\.2329" $log | wc -l`
CRIT6=`$GREP "H * 42 * (|0)\.2036" $log | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[2]=6
ERROR[2]="REDISTRIBUTION OF CHARGES NOT CORRECT"

#
# redistribution of dipoles
#
CRIT1=`$GREP "C * 2 * (\-|\-0)\.2123 * (\-|\-0)\.2682 * (|0)\.0297" $log | wc -l`
CRIT2=`$GREP "C * 4 * (|0)\.1369 * (\-|\-0)\.1605 * (|0)\.1134" $log | wc -l`
CRIT3=`$GREP "H * 13 * (|0)\.2988 * (\-|\-0)\.1728 * (|0)\.3768" $log | wc -l`
CRIT4=`$GREP "N * 25 * (|0)\.0541 * (|0)\.0703 * (|0)\.0140" $log | wc -l`
CRIT5=`$GREP "C * 27 * (|0)\.2476 * (|0)\.2260 * (\-|\-0)\.1596" $log | wc -l`
CRIT6=`$GREP "H * 42 * (|0)\.2383 * (\-|\-0)\.0044 * (|0)\.3294" $log | wc -l`
TEST[3]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[3]=6
ERROR[3]="REDISTRIBUTION OF DIPOLES NOT CORRECT"

PASSED=1 
for i in 1 2 3
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%
echo $CHECK_SHELL > pehf_border__5.check
cat >> pehf_border__5.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# quantum-classical border option
#
 CRIT1=`$GREP "from site:    37" $log | wc -l`
 CRIT2=`$GREP "from site:     9" $log | wc -l`
 CRIT3=`$GREP "from site:    26" $log | wc -l`
 CRIT4=`$GREP "from site:    39" $log | wc -l`
 CRIT5=`$GREP "from site:     1" $log | wc -l`
 CRIT6=`$GREP "from site:    10" $log | wc -l`
 CRIT7=`$GREP "to neighbouring sites:    25    27    41" $log | wc -l`
 CRIT8=`$GREP "to neighbouring sites:     2     4    16" $log | wc -l`
 CRIT9=`$GREP "to neighbouring sites:    25    27    38" $log | wc -l`
CRIT10=`$GREP "to neighbouring sites:    42    25    27" $log | wc -l`
CRIT11=`$GREP "to neighbouring sites:     2     4    11" $log | wc -l`
CRIT12=`$GREP "to neighbouring sites:     4    13     2" $log | wc -l`
CRIT13=`$GREP "Redistributing multipoles upto 2nd order and polarizabilities" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ $CRIT13 `
CTRL[1]=18
ERROR[1]="REDISTRIBUTION OF PARAMETERS NOT CORRECT"

#
# redistribution of charges
#
 CRIT1=`$GREP "C * 2 * (|0)\.3936" $log | wc -l`
 CRIT2=`$GREP "C * 4 * (\-|\-0)\.0641" $log | wc -l`
 CRIT3=`$GREP "H * 11 * (|0)\.0292" $log | wc -l`
 CRIT4=`$GREP "H * 13 * (|0)\.1626" $log | wc -l`
 CRIT5=`$GREP "H * 16 * (|0)\.1530" $log | wc -l`
 CRIT6=`$GREP "N * 25 * (\-|\-0)\.2603" $log | wc -l`
 CRIT7=`$GREP "C * 27 * (\-|\-0)\.1907" $log | wc -l`
 CRIT8=`$GREP "H * 38 * (|0)\.2188" $log | wc -l`
 CRIT9=`$GREP "H * 41 * (|0)\.1939" $log | wc -l`
CRIT10=`$GREP "H * 42 * (|0)\.1810" $log | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 `
CTRL[2]=10
ERROR[2]="REDISTRIBUTION OF CHARGES NOT CORRECT"

#
# redistribution of dipoles
#
 CRIT1=`$GREP "C * 2 * (\-|\-0)\.1213 * (\-|\-0)\.2392 * (|0)\.1322" $log | wc -l`
 CRIT2=`$GREP "C * 4 * (|0)\.1537 * (\-|\-0)\.0681 * (|0)\.0764" $log | wc -l`
 CRIT3=`$GREP "H * 11 * (|0)\.2449 * (|0)\.1227 * (|0)\.0243" $log | wc -l`
 CRIT4=`$GREP "H * 13 * (|0)\.2741 * (\-|\-0)\.1517 * (|0)\.3303" $log | wc -l`
 CRIT5=`$GREP "H * 16 * (\-|\-0)\.3498 * (\-|\-0)\.2781 * (\-|\-0)\.0453" $log | wc -l`
 CRIT6=`$GREP "N * 25 * (\-|\-0)\.0269 * (|0)\.0302 * (\-|\-0)\.0403" $log | wc -l`
 CRIT7=`$GREP "C * 27 * (|0)\.1783 * (|0)\.2098 * (\-|\-0)\.0623" $log | wc -l`
 CRIT8=`$GREP "H * 38 * (\-|\-0)\.1042 * (\-|\-0)\.0122 * (\-|\-0)\.0787" $log | wc -l`
 CRIT9=`$GREP "H * 41 * (|0)\.1662 * (|0)\.3350 * (|0)\.0075" $log | wc -l`
CRIT10=`$GREP "H * 42 * (|0)\.2344 * (\-|\-0)\.0123 * (|0)\.2789" $log | wc -l`
TEST[3]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 `
CTRL[3]=10
ERROR[3]="REDISTRIBUTION OF DIPOLES NOT CORRECT"

#
# redistribution of quadrupoles
#
 CRIT1=`$GREP "C * 2 * (\-|\-0)\.3469 * (|0)\.0555 * (\-|\-0)\.5663 * (|0)\.5876 * (\-|\-0)\.3199 * (\-|\-0)\.2407" $log | wc -l`
 CRIT2=`$GREP "C * 4 * (\-|\-0)\.1550 * (\-|\-0)\.1742 * (|0)\.0477 * (\-|\-0)\.0053 * (\-|\-0)\.0105 * (|0)\.1604" $log | wc -l`
 CRIT3=`$GREP "H * 11 * (|0)\.1025 * (|0)\.2861 * (\-|\-0)\.0392 * (|0)\.0665 * (|0)\.0797 * (\-|\-0)\.1689" $log | wc -l`
 CRIT4=`$GREP "H * 13 * (|0)\.0401 * (\-|\-0)\.1665 * (|0)\.3623 * (\-|\-0)\.2084 * (\-|\-0)\.1845 * (|0)\.1684" $log | wc -l`
 CRIT5=`$GREP "H * 16 * (|0)\.2101 * (|0)\.3945 * (|0)\.0453 * (|0)\.0498 * (|0)\.0424 * (\-|\-0)\.2598" $log | wc -l`
 CRIT6=`$GREP "N * 25 * (|0)\.0004 * (\-|\-0)\.0627 * (|0)\.8026 * (|0)\.5304 * (|0)\.0374 * (\-|\-0)\.5309" $log | wc -l`
 CRIT7=`$GREP "C * 27 * (|0)\.2422 * (\-|\-0)\.1382 * (|0)\.0205 * (\-|\-0)\.1156 * (\-|\-0)\.0887 * (\-|\-0)\.1266" $log | wc -l`
 CRIT8=`$GREP "H * 38 * (|0)\.0777 * (|0)\.0385 * (|0)\.2529 * (\-|\-0)\.0062 * (|0)\.0434 * (\-|\-0)\.0714" $log | wc -l`
 CRIT9=`$GREP "H * 41 * (\-|\-0)\.1014 * (|0)\.1480 * (\-|\-0)\.0363 * (|0)\.3074 * (|0)\.0873 * (\-|\-0)\.2061" $log | wc -l`
CRIT10=`$GREP "H * 42 * (|0)\.1163 * (\-|\-0)\.0495 * (|0)\.2555 * (\-|\-0)\.2454 * (\-|\-0)\.0097 * (|0)\.1291" $log | wc -l`
TEST[4]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 `
CTRL[4]=10
ERROR[4]="REDISTRIBUTION OF QUADRUPOLES NOT CORRECT"

#
# redistribution of polarizabilities
#
 CRIT1=`$GREP "C * 2 * 11\.6056 * \-2\.6373 * \-4\.1145 * 13\.8197 * 1\.1167 * 11\.0058" $log | wc -l`
 CRIT2=`$GREP "C * 4 * 11\.5368 * \-3\.8309 * \-1\.5308 * 11\.8834 * (|0)\.4532 * 13\.8267" $log | wc -l`
 CRIT3=`$GREP "H * 11 * 5\.3172 * (|0)\.9187 * \-1\.0825 * 5\.0159 * (|0)\.7631 * 3\.3944" $log | wc -l`
 CRIT4=`$GREP "H * 13 * 2\.2290 * (\-|\-0)\.8550 * 1\.8156 * 1\.1107 * \-1\.0876 * 4\.0963" $log | wc -l`
 CRIT5=`$GREP "H * 16 * 4\.0720 * 2\.3372 * (|0)\.5003 * 2\.2216 * (|0)\.3466 * (|0)\.8480" $log | wc -l`
 CRIT6=`$GREP "N * 25 * 10\.1451 * \-5\.5059 * (|0)\.5678 * 16\.1546 * (\-|\-0)\.7334 * 6\.8055" $log | wc -l`
 CRIT7=`$GREP "C * 27 * 16\.6693 * \-1\.7001 * \-1\.3533 * 11\.1132 * \-1\.0914 * 8\.0420" $log | wc -l`
 CRIT8=`$GREP "H * 38 * 4\.6288 * (\-|\-0)\.9651 * 1\.2769 * 4\.2356 * (|0)\.2819 * 2\.5813" $log | wc -l`
 CRIT9=`$GREP "H * 41 * 2\.3791 * 1\.6953 * (\-|\-0)\.3538 * 4\.6384 * (|0)\.2247 * (|0)\.7171" $log | wc -l`
CRIT10=`$GREP "H * 42 * 3\.1705 * (\-|\-0)\.3775 * 1\.7604 * (|0)\.7385 * (|0)\.0429 * 2\.9944" $log | wc -l`
TEST[5]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 `
CTRL[5]=10
ERROR[5]="REDISTRIBUTION OF POLARIZABILITIES NOT CORRECT"

PASSED=1 
for i in 1 2 3 4 5
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%
echo $CHECK_SHELL > pehf_border__6.check
cat >> pehf_border__6.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# quantum-classical border option
#
 CRIT1=`$GREP "from site:    37" $log | wc -l`
 CRIT2=`$GREP "from site:     9" $log | wc -l`
 CRIT3=`$GREP "from site:    26" $log | wc -l`
 CRIT4=`$GREP "from site:    39" $log | wc -l`
 CRIT5=`$GREP "from site:     1" $log | wc -l`
 CRIT6=`$GREP "from site:    10" $log | wc -l`
 CRIT7=`$GREP "to neighbouring sites:    25    27" $log | wc -l`
 CRIT8=`$GREP "to neighbouring sites:     2     4" $log | wc -l`
 CRIT9=`$GREP "to neighbouring sites:    42    25" $log | wc -l`
CRIT10=`$GREP "to neighbouring sites:     4    13" $log | wc -l`
CRIT11=`$GREP "Redistributing multipoles upto 0th order and polarizabilities" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 `
CTRL[1]=18
ERROR[1]="REDISTRIBUTION OF PARAMETERS NOT CORRECT"

#
# redistribution of charges
#
CRIT1=`$GREP "C *  2 * (|0)\.3206" $log | wc -l`
CRIT2=`$GREP "C *  4 * (\-|\-0)\.0699" $log | wc -l`
CRIT3=`$GREP "H * 13 * (|0)\.1850" $log | wc -l`
CRIT4=`$GREP "N * 25 * (\-|\-0)\.2349" $log | wc -l`
CRIT5=`$GREP "C * 27 * (\-|\-0)\.2329" $log | wc -l`
CRIT6=`$GREP "H * 42 * (|0)\.2036" $log | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[2]=6
ERROR[2]="REDISTRIBUTION OF CHARGES NOT CORRECT"

#
# redistribution of polarizabilities
#
CRIT1=`$GREP "C *  2 * 13\.0581 * -2\.5964 * -4\.9244 * 15\.3208 *  1\.8676 * 11\.3839" $log | wc -l`
CRIT2=`$GREP "C *  4 * 13\.4886 * -4\.0271 * -1\.9249 * 13\.8744 * (|0)\.6621 * 15\.9132" $log | wc -l`
CRIT3=`$GREP "H * 13 *  2\.3954 * (\-|\-0)\.9340 *  1\.9542 *  1\.2740 * -1\.2682 *  4\.6657" $log | wc -l`
CRIT4=`$GREP "N * 25 * 12\.2237 * -5\.8994 * (|0)\.4965 * 18\.1768 * (\-|\-0)\.6506 *  8\.1848" $log | wc -l`
CRIT5=`$GREP "C * 27 * 18\.4004 * -2\.0861 * -1\.5290 * 12\.7675 * -1\.4836 *  7\.8363" $log | wc -l`
CRIT6=`$GREP "H * 42 *  3\.2864 * (\-|\-0)\.3800 *  1\.7952 * (|0)\.8611 * (|0)\.2012 *  3\.5228" $log | wc -l`
TEST[3]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[3]=6
ERROR[3]="REDISTRIBUTION OF POLARIZABILITIES NOT CORRECT"

PASSED=1 
for i in 1 2 3
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%

#######################################################################
