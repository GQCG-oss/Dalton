#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > rsp_esr.info <<'%EOF%'
   rsp_esr
   -------
   Molecule:         ClO2
   Wave Function:    Open-shell SCF
   Test Purpose:     Single-point calculation of ESR parameters
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > rsp_esr.mol <<'%EOF%'
INTGRL
Calculation of ESR parameters

s   2    2  X  Y      1.00D-15
       17.    1    4    3    2    1    1
Cl    0.00000    0.00000   1.0000
    7    0
456100.0
68330.00
15550.00
4405.000
1439.000
520.4000
203.1000
    7    0
83.96000
36.20000
15.83000
6.334000
2.694000
.9768000
.4313000
    1    0
.1625000
    5    0
663.3000
156.8000
49.98000
18.42000
7.240000
    4    4
2.922000  .35033400 -.0947742 .00000000 .00000000
1.022000  .05854950 .26228900 1.0000000 .00000000
.3818000  -.00458423.56466700 .00000000 .00000000
.1301000  .00226970 .34125000 .00000000 1.0000000
    2    0
1.046000
.3440000
    1    0
0.7060000
        8.    1    4    2    1    1    1
O1    0.00000    2.37360  -0.44317
    5    0
15330.00
2299.000
522.4000
147.3000
47.55000
    5    0
16.76000
6.207000
1.752000
.6882000
.2384000
    5    3
34.46000  .0159280  .00000000 .00000000
7.749000  .0997400  .00000000 .00000000
2.280000  .3104920  .00000000 .00000000
.7156000  .4910260  1.0000000 .00000000
.2140000  .3363370  .00000000 1.0000000
    2    0
2.314000
.6450000
    1    0
1.428000
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > rsp_esr.dal <<'%EOF%'
**DALTON INPUT
.RUN RESPONSE
**INTEGRALS
.FC
.SD
**WAVE FUNCTIONS
.HF
**RESPON
.TRPFLG
*ESR
.MAX IT
   30
.TRPPRP
FC Cl 01
.TRPPRP
FC O1 02
.TRPPRP
FC O1 03
.TRPPRP
SD 001 x
.TRPPRP
SD 001 y
.TRPPRP
SD 001 z
.TRPPRP
SD 002 x
.TRPPRP
SD 002 y
.TRPPRP
SD 002 z
.TRPPRP
SD 003 x
.TRPPRP
SD 003 y
.TRPPRP
SD 003 z
.TRPPRP
SD 004 x
.TRPPRP
SD 004 y
.TRPPRP
SD 004 z
.TRPPRP
SD 005 x
.TRPPRP
SD 005 y
.TRPPRP
SD 005 z
.TRPPRP
SD 006 x
.TRPPRP
SD 006 y
.TRPPRP
SD 006 z
.TRPPRP
SD 007 x
.TRPPRP
SD 007 y
.TRPPRP
SD 007 z
.TRPPRP
SD 008 x
.TRPPRP
SD 008 y
.TRPPRP
SD 008 z
.TRPPRP
SD 009 x
.TRPPRP
SD 009 y
.TRPPRP
SD 009 z
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >rsp_esr.check
cat >>rsp_esr.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Integral setup
CRIT1=`$GREP "Calculation of one\- and two\-electron Hamiltonian integrals\." $log | wc -l`
CRIT1b=`$GREP "Calculation of one\-electron Hamiltonian integrals\." $log | wc -l`
CRIT2=`$GREP "The following one\-electron property integrals are calculated" $log | wc -l`
CRIT3=`$GREP "\- overlap integrals" $log | wc -l`
CRIT4=`$GREP "\- Fermi contact integrals" $log | wc -l`
CRIT5=`$GREP "\(Dirac delta function integrals\)" $log | wc -l`
CRIT6=`$GREP "\- spin\-dipole integrals" $log | wc -l`
CRIT7=`$GREP "\(electron spin \- nuclear moment coupling\)" $log | wc -l`
CRIT8=`$GREP "Integrals for all indirect spin\-spin coupling and/or shielding tensors are calculated\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT1b \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[1]=8
ERROR[1]="INTEGRAL SETUP NOT CORRECT"

# Symmetry
CRIT1=`$GREP "Number of coordinates in each symmetry\: * 3 * 2 * 3 * 1" $log | wc -l`
CRIT2=`$GREP "Number of orbitals in each symmetry\: * 56 * 23 * 39 * 13" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2`
CTRL[2]=2
ERROR[2]="SYMMETRY NOT CORRECT"

# Energy
CRIT1=`$GREP "Final * HF energy\: * \-609\.054201710..." $log | wc -l`
TEST[3]=`expr	$CRIT1`
CTRL[3]=1
ERROR[3]="ENERGY NOT CORRECT"

# ESR parameters
CRIT1=`$GREP "TRIPLET OPERATOR\: \"FC Cl 01\" LAGRANGIAN\: * 1\.9643.. AVERAGE\: * (0| )\.000000 TOTAL\: * 1\.9643" $log | wc -l`
CRIT2=`$GREP "TRIPLET OPERATOR\: \"FC O1 02\" LAGRANGIAN\: * 2\.1563.. AVERAGE\: * (0| )\.000000 TOTAL\: * 2\.1563" $log | wc -l`
CRIT3=`$GREP "TRIPLET OPERATOR\: \"SD * 002 y\" LAGRANGIAN\: (\-0| \-)\.1878.. AVERAGE\: \-1\.4717.. TOTAL\: \-1\.6595" $log | wc -l`
CRIT4=`$GREP "TRIPLET OPERATOR\: \"SD * 003 y\" LAGRANGIAN\: (\-0| \-)\.6396.. AVERAGE\: \-1\.1474.. TOTAL\: \-1\.7870" $log | wc -l`
CRIT5=`$GREP "TRIPLET OPERATOR\: \"SD * 004 y\" LAGRANGIAN\: * (0| )\.0110.. AVERAGE\: (\-0| \-)\.0251.. TOTAL\: (\-0| \-)\.0140" $log | wc -l`
CRIT6=`$GREP "TRIPLET OPERATOR\: \"SD * 005 x\" LAGRANGIAN\: * (0| )\.6311.. AVERAGE\: * 2\.9517.. TOTAL\: * 3\.5828" $log | wc -l`
CRIT7=`$GREP "TRIPLET OPERATOR\: \"SD * 006 x\" LAGRANGIAN\: * 1\.1568.. AVERAGE\: * 2\.3244.. TOTAL\: * 3\.4812" $log | wc -l`
CRIT8=`$GREP "TRIPLET OPERATOR\: \"SD * 007 z\" LAGRANGIAN\: (\-0| \-)\.4433.. AVERAGE\: \-1\.4799.. TOTAL\: \-1\.9232" $log | wc -l`
CRIT9=`$GREP "TRIPLET OPERATOR\: \"SD * 008 z\" LAGRANGIAN\: * (0| )\.0110.. AVERAGE\: (\-0| \-)\.0251.. TOTAL\: (\-0| \-)\.0140" $log | wc -l`
CRIT10=`$GREP "TRIPLET OPERATOR\: \"SD * 009 z\" LAGRANGIAN\: (\-0| \-)\.5172.. AVERAGE\: \-1\.1769.. TOTAL\: \-1\.6941" $log | wc -l`
CRIT11=`$GREP "TRIPLET OPERATOR\: \"SD * 001 y\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT12=`$GREP "TRIPLET OPERATOR\: \"SD * 005 z\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT13=`$GREP "TRIPLET OPERATOR\: \"SD * 006 z\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT14=`$GREP "TRIPLET OPERATOR\: \"SD * 007 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT15=`$GREP "TRIPLET OPERATOR\: \"SD * 008 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT16=`$GREP "TRIPLET OPERATOR\: \"SD * 009 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT17=`$GREP "TRIPLET OPERATOR\: \"FC O1 03\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT18=`$GREP "TRIPLET OPERATOR\: \"SD * 001 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT19=`$GREP "TRIPLET OPERATOR\: \"SD * 002 z\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT20=`$GREP "TRIPLET OPERATOR\: \"SD * 003 z\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT21=`$GREP "TRIPLET OPERATOR\: \"SD * 004 z\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT22=`$GREP "TRIPLET OPERATOR\: \"SD * 007 y\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT23=`$GREP "TRIPLET OPERATOR\: \"SD * 008 y\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT24=`$GREP "TRIPLET OPERATOR\: \"SD * 009 y\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT25=`$GREP "TRIPLET OPERATOR\: \"SD * 001 z\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT26=`$GREP "TRIPLET OPERATOR\: \"SD * 002 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT27=`$GREP "TRIPLET OPERATOR\: \"SD * 003 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT28=`$GREP "TRIPLET OPERATOR\: \"SD * 004 x\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT29=`$GREP "TRIPLET OPERATOR\: \"SD * 005 y\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
CRIT30=`$GREP "TRIPLET OPERATOR\: \"SD * 006 y\" contribution \= (0| )\.0 by symmetry" $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17 \+ $CRIT18 \+ \
		$CRIT19 \+ $CRIT20 \+ $CRIT21 \+ $CRIT22 \+ $CRIT23 \+ $CRIT24 \+ \
		$CRIT25 \+ $CRIT26 \+ $CRIT27 \+ $CRIT28 \+ $CRIT29 \+ $CRIT30`
CTRL[4]=30
ERROR[4]="ESR PARAMETERS NOT CORRECT"

PASSED=1
for i in 1 2 3 4
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
