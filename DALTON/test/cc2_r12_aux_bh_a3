#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi

#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > cc2_r12_aux_bh_a3.info <<'%EOF%'
   cc2_r12_aux_bh_a3
   -----------
   Molecule:         BH 
   Wave Function:    CC2-R12/A2/B / AhlrichsVTZ AhlrichsVTZ
   Test Purpose:     Check CC2-R12/A2/B method with auxiliary basis 
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > cc2_r12_aux_bh_a3.mol <<'%EOF%'
BASIS
Ahlrichs-VTZ Ahlrichs-VTZ
BH
                                                                            
    4    0            0.10D-14
 1      5.    1    3    3    2    1
B        0.0000000000000     0.0000000000000     0.0000000000000
 1      1.    1
H        0.0000000000000     0.0000000000000     2.3288983083247
 2      5.0   1
B        0.0000000000000     0.0000000000000     0.0000000000000
 2      1.0   1
H        0.0000000000000     0.0000000000000     2.3288983083247
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > cc2_r12_aux_bh_a3.dal <<'%EOF%'
**DALTON INPUT
.RUN WAVE FUNCTION
.DIRECT
*MOLBAS
.R12AUX
**INTEGRALS
.R12
**WAVE FUNCTION
.CC
*ORBITAL INPUT
*SCF INPUT
.THRESH
 1.0D-12
*CC INPUT
.CC2
.PRINT
 3 
.FREEZE
  1 0
.THRENR
 1.0D-12
.MAX IT
 300
*CCEXCI
.THREXC
 1.D-10
.NCCEXCI
 8 
*R12 INPUT
.NO HYB
.CC2
 3B
**END OF DALTON INPUT
%EOF%

#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >cc2_r12_aux_bh_a3.check
cat >>cc2_r12_aux_bh_a3.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi


#             Total SCF   energy:                   -25.1195868955
#             Total MP2-R12/B energy:               -25.1924845508
#             Total CC2-R12/B energy:               -25.1928102641
# 
# 
#  +=============================================================================+
#  |  sym. | Exci.  |        CC2-R12/B  Excitation energies            | ||T1||  |
#  |(spin, |        +------------------------------------------------------------+
#  | spat) |        |     Hartree    |       eV.      |     cm-1       |    %    |
#  +=============================================================================+
#  | ^1A   |    1   |     0.1229973  |       3.34693  |     26994.794  |  98.67  |
#  | ^1A   |    2   |     0.1229973  |       3.34693  |     26994.794  |  98.67  |
#  | ^1A   |    3   |     0.3304039  |       8.99075  |     72515.283  |  97.71  |
#  | ^1A   |    4   |     0.3484357  |       9.48142  |     76472.796  |  97.31  |
#  | ^1A   |    5   |     0.3609128  |       9.82094  |     79211.213  |  97.12  |
#  | ^1A   |    6   |     0.3609128  |       9.82094  |     79211.213  |  97.12  |
#  | ^1A   |    7   |     0.4472515  |      12.17033  |     98160.356  |  98.10  |
#  | ^1A   |    8   |     0.4472515  |      12.17033  |     98160.356  |  98.10  |
#  +=============================================================================+
# 

CRIT1=`$GREP "Total MP2-R12/B energy: *  \-25\.1924845508" $log | wc -l`
TEST[1]=`expr	$CRIT1`
CTRL[1]=2
ERROR[1]="MP2-R12/B ENERGY NOT CORRECT"
CRIT2=`$GREP "Total CC2-R12/B energy: *  \-25\.1928102641" $log | wc -l`
TEST[2]=`expr	$CRIT2`
CTRL[2]=2
ERROR[2]="CC2-R12/B ENERGY NOT CORRECT"
#
CRIT3=`$GREP "[ \|]* \^1A[ \|]* 1[ \|]* ( |0)\.12299..[ \|]* 3\.3469.[ \|]* 26994\....[ \|]* 98\.6.[ \|]" $log | wc -l`
TEST[3]=`expr	$CRIT3`
CTRL[3]=1
ERROR[3]="CC2-R12/B 1A1 1 EXCITATION ENERGY NOT CORRECT"
CRIT4=`$GREP "[ \|]* \^1A[ \|]* 2[ \|]* ( |0)\.12299..[ \|]* 3\.3469.[ \|]* 26994\....[ \|]* 98\.6.[ \|]" $log | wc -l`
TEST[4]=`expr	$CRIT4`
CTRL[4]=1
ERROR[4]="CC2-R12/B 1A1 2 EXCITATION ENERGY NOT CORRECT"
CRIT5=`$GREP "[ \|]* \^1A[ \|]* 3[ \|]* ( |0)\.33040..[ \|]* 8\.9907.[ \|]* 72515\....[ \|]* 97\.7.[ \|]" $log | wc -l`
TEST[5]=`expr	$CRIT5`
CTRL[5]=1
ERROR[5]="CC2-R12/B 1A1 3 EXCITATION ENERGY NOT CORRECT"
CRIT6=`$GREP "[ \|]* \^1A[ \|]* 4[ \|]* ( |0)\.34843..[ \|]* 9\.4814.[ \|]* 76472\....[ \|]* 97\.3.[ \|]" $log | wc -l`
TEST[6]=`expr	$CRIT6`
CTRL[6]=1
ERROR[6]="CC2-R12/B 1A1 4 EXCITATION ENERGY NOT CORRECT"
CRIT7=`$GREP "[ \|]* \^1A[ \|]* 5[ \|]* ( |0)\.36091..[ \|]* 9\.8209.[ \|]* 79211\....[ \|]* 97\.1.[ \|]" $log | wc -l`
TEST[7]=`expr	$CRIT7`
CTRL[7]=1
ERROR[7]="CC2-R12/B 1A1 5 EXCITATION ENERGY NOT CORRECT"
CRIT8=`$GREP "[ \|]* \^1A[ \|]* 6[ \|]* ( |0)\.36091..[ \|]* 9\.8209.[ \|]* 79211\....[ \|]* 97\.1.[ \|]" $log | wc -l`
TEST[8]=`expr	$CRIT8`
CTRL[8]=1
ERROR[8]="CC2-R12/B 1A1 6 EXCITATION ENERGY NOT CORRECT"
CRIT9=`$GREP "[ \|]* \^1A[ \|]* 7[ \|]* ( |0)\.44725..[ \|]* 12\.1703.[ \|]* 98160\....[ \|]* 98\.1.[ \|]" $log | wc -l`
TEST[9]=`expr	$CRIT9`
CTRL[9]=1
ERROR[9]="CC2-R12/B 1A1 7 EXCITATION ENERGY NOT CORRECT"
CRIT10=`$GREP "[ \|]* \^1A[ \|]* 8[ \|]* ( |0)\.44725..[ \|]* 12\.1703.[ \|]* 98160\....[ \|]* 98\.1.[ \|]" $log | wc -l`
TEST[10]=`expr	$CRIT10`
CTRL[10]=1
ERROR[10]="CC2-R12/B 1A1 8 EXCITATION ENERGY NOT CORRECT"

#
PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10
do 
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done 

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM 
  exit 1
fi

%EOF%
#######################################################################
