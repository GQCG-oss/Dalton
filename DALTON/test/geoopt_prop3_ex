#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > geoopt_prop3_ex.info <<'%EOF%'
   geoopt_prop3_ex
   ---------------
   Molecule:         O3
   Wave Function:    MCSCF (CAS) / aug-cc-pVDZ / excited state
   Test Purpose:     Geometry optimization using .OPTIMIZE module
                     (2nd order) of the first excited state,
                     with a calculation of quadrupole moment,
                     magnetizabilit,y and nuclear shieldings at the
                     optimized geometry, along with a vibrational analysis.

                     Also test the use of "new" integral transformation
                     for geometry optimization and properties.
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > geoopt_prop3_ex.mol <<'%EOF%'
BASIS
aug-cc-pVDZ
Geometry optimization, calculation of magnetizabilities
and nuclear shieldings at the optimized geometry
    1    2  Y  Z
        8.    2
OS         .0000000000        0.0000000000         .0000000000             *
OP        1.2634502500        2.0449019100         .0000000000             *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > geoopt_prop3_ex.dal <<'%EOF%'
**DALTON INPUT
.OPTIMIZE
.NEWTRA
*OPTIMIZE
.2NDORDER
**WAVE FUNCTIONS
.HF
.MP2
.MCSCF
*SCF INPUT
.DOUBLY OCCUPIED
 6 4 1 1
*OPTIMIZATION
.STATE
 2
*CONFIGURATION INPUT
.SYMMETRY
 1
.SPIN MUL
 1
.INACTIVE
 4 2 0 0
.ELECTRONS
 12
.CAS SPACE
 3 3 2 1
**EACH STEP
.VIBANA
**PROPERTIES
.VIBANA
.MAGNET
.SHIELD
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >geoopt_prop3_ex.check
cat >>geoopt_prop3_ex.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi

# Reading molecular geometry:
CRIT1=`$GREP "1 * x *  (0| )\.0000000000" $log | wc -l`
CRIT2=`$GREP "4 * x * 1\.2634502500" $log | wc -l`
CRIT3=`$GREP "5 * y * 2\.0449019100" $log | wc -l`
CRIT4=`$GREP "7 * x * 1\.2634502500" $log | wc -l`
CRIT5=`$GREP "8 * y * \-2\.0449019100" $log | wc -l`
TEST[1]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3  \+ $CRIT4  \+ $CRIT5`
CTRL[1]=5
ERROR[1]="MOLECULAR GEOMETRY NOT CORRECT"

# Nuclear repulsion energy:
CRIT1=`$GREP "Nuclear repulsion energy : * 68\.8991880907[0-9][0-9]" $log | wc -l`
TEST[2]=`expr $CRIT1`
CTRL[2]=1
ERROR[2]="NUCLEAR REPULSION ENERGY NOT CORRECT"

# Symmetry:
CRIT1=`$GREP "Number of coordinates in each symmetry: * 3 * 3 * 2 * 1" $log | wc -l`
CRIT2=`$GREP "Number of orbitals in each symmetry: * 27 * 21 * 12 * 9" $log | wc -l`
TEST[3]=`expr $CRIT1  \+ $CRIT2`
CTRL[3]=2
ERROR[3]="SYMMETRY IS NOT CORRECT"

# SCF energy, 1st iteration:
CRIT1=`$GREP "Hartree\-Fock total * energy\: * \-224\.2905002437[0-9][0-9]" $log | wc -l`
TEST[4]=`expr $CRIT1`
CTRL[4]=1
ERROR[4]="INITIAL HF ENERGY NOT CORRECT"

# MCSCF energy, 1st iteration:
CRIT1=`$GREP "MP2 second order energy *\: * \-224\.963913" $log | wc -l`
CRIT2=`$GREP "Final MCSCF energy\: * \-224\.347735417[2-4]" $log | wc -l`
TEST[5]=`expr $CRIT1  \+ $CRIT2`
CTRL[5]=2
ERROR[5]="INITIAL MCSCF ENERGY IS NOT CORRECT"

# Occupancies, 1st iteration:
CRIT1=`$GREP " 2.000000000 * 2.000000000 * 2.000000000 * 2.000000000 * 1.9675385.." $log | wc -l`
CRIT2=`$GREP "0*.9666861.. * 0*.0408221.." $log | wc -l`
CRIT3=`$GREP " 2.000000000 * 2.000000000 * 1.0353385.. * 1.9642949.. * 0*.0302875.." $log | wc -l`
CRIT4=`$GREP " 1.9993481.. * 1.9968512.." $log | wc -l`
CRIT5=`$GREP " 1.9988326.." $log | wc -l`
TEST[6]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5`
CTRL[6]=12
ERROR[6]="INITIAL OCCUPANCIES NOT CORRECT"

# SCF energy, 1st iteration:
CRIT1=`$GREP "Total energy * \-224\.347735417" $log | wc -l`
TEST[7]=`expr $CRIT1 `
CTRL[7]=1
ERROR[7]="INITIAL ENERGY NOT CORRECT"

# Gradient, 1st iteration:
CRIT1=`$GREP "OS * x *   0*\.18243213.." $log | wc -l`
CRIT2=`$GREP "OP * x * \-0*\.18243213.." $log | wc -l`
CRIT3=`$GREP "OP * y * \-0*\.22728986.." $log | wc -l`
TEST[8]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[8]=3
ERROR[8]="INITIAL GRADIENT NOT CORRECT"

# Hessian, 1st iteration:
CRIT1=`$GREP "OS * x * (0| )\.1183.." $log | wc -l`
#CRIT2=`$GREP "OP * x * (\-0|\-)\.4296(1|2)[0-9] * (0| )\.4296(1|2)[0-9]" $log | wc -l`
#CRIT3=`$GREP "OP * y * (\-0|\-)\.25142[0-9] * (0| )\.25142[0-9] * (0| )\.92405[0-9]" $log | wc -l`
#CRIT4=`$GREP "OS * y * (0| )\.43032[0-9]" $log | wc -l`
#CRIT5=`$GREP "OP * x * (\-0|\-)\.27072[0-9] * (0| )\.15799[0-9]" $log | wc -l`
#CRIT6=`$GREP "OP * y * (\-0|\-)\.43032[0-9] * (0| )\.27072[0-9] * (0| )\.43032[0-9]" $log | wc -l`
#CRIT7=`$GREP "OS * z * (\-0|\-)\.00784[0-9]" $log | wc -l`
#CRIT8=`$GREP "OP * z * (0| )\.00784[0-9] * (\-0|\-)\.00784[0-9]" $log | wc -l`
CRIT9=`$GREP "OP * z * \-0*\.1111" $log | wc -l`
#TEST[9]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3  \+ $CRIT4  \+ $CRIT5  \+ \
#              $CRIT6  \+ $CRIT7  \+ $CRIT8  \+ $CRIT9`
TEST[9]=`expr $CRIT1  \+ $CRIT9 `
CTRL[9]=3
ERROR[9]="INITIAL HESSIAN NOT CORRECT"

# Dipole moment, 1st iteration:
CRIT1=`$GREP "( |0)\.070581 * ( | 0)\.179399 * ( |0)\.598411" $log | wc -l`
TEST[10]=`expr $CRIT1 `
CTRL[10]=1
ERROR[10]="INITIAL DIPOLE MOMENT NOT CORRECT"

# Step, 1st iteration:
CRIT1=`$GREP "OS *  \-0*\.203855.... *  0*\.0000000000 * 0*\.0000000000" $log | wc -l`
CRIT2=`$GREP "OP *_1 * 1\.365377.... *   2\.053976.... * 0*\.0000000000" $log | wc -l`
CRIT3=`$GREP "OP *_2 * 1\.365377.... * \-2\.053976.... * 0*\.0000000000" $log | wc -l`
TEST[11]=`expr $CRIT1  \+ $CRIT2 \+ $CRIT3`
CTRL[11]=3
ERROR[11]="INITIAL STEP NOT CORRECT"

# 2nd iteration:
CRIT1=`$GREP "Energy at this geometry is * \: * \-224\.39392" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * (0| )\.13" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * (0| )\.27" $log | wc -l`
TEST[12]=`expr $CRIT1  \+ $CRIT2 \+ $CRIT3`
CTRL[12]=3
ERROR[12]="SECOND ITERATION NOT CORRECT"

# 3rd iteration:
CRIT1=`$GREP "Energy at this geometry is * \: * \-224\.41564" $log | wc -l`
CRIT2=`$GREP -l "Norm of gradient * \: * (0| )\.056" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * (0| )\.30" $log | wc -l`
TEST[13]=`expr $CRIT1  \+ $CRIT2 \+ $CRIT3`
CTRL[13]=3
ERROR[13]="THIRD ITERATION NOT CORRECT"

# Final geometry:
CRIT1=`$GREP "OS *  \-0*\.762129.... *  0*\.0000000000 * 0*\.0000000000" $log | wc -l`
CRIT2=`$GREP "OP *_1 * 1\.644515.... *   1\.389454.... * 0*\.0000000000" $log | wc -l`
CRIT3=`$GREP "OP *_2 * 1\.644515.... * \-1\.389454.... * 0*\.0000000000" $log | wc -l`
TEST[14]=`expr $CRIT1  \+ $CRIT2 \+ $CRIT3`
CTRL[14]=12
ERROR[14]="FINAL GEOMETRY NOT CORRECT"

# Final SCF energy:
CRIT1=`$GREP "Total energy * \-224\.4616394" $log | wc -l`
TEST[15]=`expr $CRIT1 `
CTRL[15]=1
ERROR[15]="FINAL ENERGY NOT CORRECT"

# Magnetizability:
CRIT1=`$GREP "Isotropic magnetizability\: * \-3\.041" $log | wc -l`
CRIT2=`$GREP "Diamagnetic contribution\: * \-15\.951" $log | wc -l`
CRIT3=`$GREP "Paramagnetic contribution\: * \-*12\.909" $log | wc -l`
CRIT4=`$GREP "1st anisotropy\: * \-3\.11" $log | wc -l`
CRIT5=`$GREP "2nd anisotropy\: * 1\.55" $log | wc -l`
TEST[16]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3  \+ $CRIT4  \+ $CRIT5  `
CTRL[16]=5
ERROR[16]="MAGNETIZABILITIES NOT CORRECT"

# Molecular rotational g-tensors:
CRIT1=`$GREP "Isotropic g-tensor * \: * \-0*\.1674" $log | wc -l`
CRIT2=`$GREP "Nuclear contribution * \: *  (0| )\.5037983" $log | wc -l`
TEST[17]=`expr $CRIT1  \+ $CRIT2 `
CTRL[17]=2
ERROR[17]="ROTATIONAL G-TENSOR NOT CORRECT"

# Chemical shielding:
CRIT1=`$GREP "Shielding constant\: * \-310\.64.. ppm" $log | wc -l`
CRIT2=`$GREP "Anisotropy\: * \-868\.9... ppm" $log | wc -l`
CRIT3=`$GREP "Asymmetry\: * (0| )\.262" $log | wc -l`
CRIT4=`$GREP "S parameter\: * 878\.9" $log | wc -l`
CRIT5=`$GREP "A parameter\: * (0| )\.0000 ppm" $log | wc -l`
CRIT6=`$GREP "Shielding constant\: * \-310\.61.. ppm" $log | wc -l`
CRIT7=`$GREP "Anisotropy\: * \-868\.9... ppm" $log | wc -l`
CRIT8=`$GREP "Asymmetry\: * (0| )\.262" $log | wc -l`
CRIT9=`$GREP "S parameter\: * 878\.9" $log | wc -l`
CRIT10=`$GREP "A parameter\: * 0*\.02" $log | wc -l`
TEST[18]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3  \+ $CRIT4  \+ $CRIT5  \+ \
               $CRIT6  \+ $CRIT7  \+ $CRIT8  \+ $CRIT9  \+ $CRIT10 `
CTRL[18]=24
ERROR[18]="SHIELDINGS NOT CORRECT"

# Vibrational frequencies:
CRIT1=`$GREP "1 * A1 * 998\.[89]" $log | wc -l`
CRIT2=`$GREP "[23] * A1 * 723\.[89]" $log | wc -l`
CRIT3=`$GREP "[23] * B1 * 723\.[89]" $log | wc -l`
TEST[19]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3`
CTRL[19]=6
ERROR[19]="FREQUENCIES NOT CORRECT"

# Geometry optimization:
CRIT1=`$GREP "Geometry converged in * 8 * iterations\!" $log | wc -l`
CRIT2=`$GREP "Energy at final geometry is * \: * \-224\.461639 a\.u\." $log | wc -l`
CRIT3=`$GREP "Energy change during optimization \: * \-0*\.113904 a\.u\." $log | wc -l`
TEST[20]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3`
CTRL[20]=3
ERROR[20]="GEOMETRY OPTIMIZATION FAILED"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} )"
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
