#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi

#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > cc2_r12_aux2_bh_sym.info <<'%EOF%'
   cc2_r12_aux2_bh_sym
   -----------
   Molecule:         BH 
   Wave Function:    CC2-R12/A1/A / AhlrichsVDZ + AhlrichsVTZ-Auxbasis
   Test Purpose:     Check CC2-R12/A1/A method with auxiliary basis 
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > cc2_r12_aux2_bh_sym.mol <<'%EOF%'
BASIS
Ahlrichs-VDZ Ahlrichs-VTZ
BH
                                                                            
    4    2  X Y     0.10D-14
 1      5.    1    3    3    2    1
B        0.0000000000000     0.0000000000000     0.0000000000000
 1      1.    1
H        0.0000000000000     0.0000000000000     2.3288983083247
 2      5.0   1
B        0.0000000000000     0.0000000000000     0.0000000000000
 2      1.0   1
H        0.0000000000000     0.0000000000000     2.3288983083247
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > cc2_r12_aux2_bh_sym.dal <<'%EOF%'

**DALTON INPUT
.RUN WAVE FUNCTION
.DIRECT
*MOLBAS
.R12AUX
**INTEGRALS
.R12
**WAVE FUNCTION
.CC
*ORBITAL INPUT
.MOSTART
 H1DIAG
*SCF INPUT
.THRESH
 1.0D-10
*CC INPUT
.CC2
.PRINT
 3  
.FROIMP
  1 0 0 0
  0 0 0 0
.THRENR
 1.0D-12
.MAX IT
 300
*CCEXCI
.THREXC
 1.D-10
.NCCEXCI
 4 4 4 4 
*R12 INPUT
#.NO HYB
#.R12XXL
#.NO B
#.NO A'
#.NO 2
.CC2
 1A
**END OF DALTON INPUT
%EOF%

#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >cc2_r12_aux2_bh_sym.check
cat >>cc2_r12_aux2_bh_sym.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi

#            Total SCF   energy:                   -24.8662249632 
#            Total MP2-R12/A energy:               -25.0063026940
#            Total CC2-R12/A energy:               -25.0067051367
#
#

CRIT1=`$GREP "Total MP2-R12/A energy:               -25.006302694" $log | wc -l`
TEST[1]=`expr	$CRIT1`
CTRL[1]=2
ERROR[1]="MP2-R12/A ENERGY NOT CORRECT"
CRIT2=`$GREP "Total CC2-R12/A energy:               -25.006705136" $log | wc -l`
TEST[2]=`expr	$CRIT2`
CTRL[2]=2
ERROR[2]="CC2-R12/A ENERGY NOT CORRECT"
#
CRIT3=`$GREP " *1 .*( |0)\.2843958 .*7\.73880 " $log | wc -l`
TEST[3]=`expr	$CRIT3`
CTRL[3]=1
ERROR[3]="CC2-R12/A 1A1 EXCITATION ENERGY NOT CORRECT"
CRIT4=`$GREP " *2 .*( |0)\.3848740 .*10\.47295 " $log | wc -l`
TEST[4]=`expr	$CRIT4`
CTRL[4]=1
ERROR[4]="CC2-R12/A 2A1 EXCITATION ENERGY NOT CORRECT"
CRIT5=`$GREP " *3 .*( |0)\.5313011 .*14\.45744 " $log | wc -l`
TEST[5]=`expr	$CRIT5`
CTRL[5]=1
ERROR[5]="CC2-R12/A 3A1 EXCITATION ENERGY NOT CORRECT"
CRIT6=`$GREP " *4 .*( |0)\.6087612 .*16\.56524 " $log | wc -l`
TEST[6]=`expr	$CRIT6`
CTRL[6]=1
ERROR[6]="CC2-R12/A 4A1 EXCITATION ENERGY NOT CORRECT"
CRIT7=`$GREP " *1 .*(-|-0)\.0600237 .*-1\.63333 " $log | wc -l`
TEST[7]=`expr   $CRIT7`
CTRL[7]=1
ERROR[7]="CC2-R12/A 1B1 EXCITATION ENERGY NOT CORRECT"
CRIT8=`$GREP " *2 .*( |0)\.2998231 .*8\.15860 " $log | wc -l`
TEST[8]=`expr   $CRIT8`
CTRL[8]=1
ERROR[8]="CC2-R12/A 2B1 EXCITATION ENERGY NOT CORRECT"
CRIT9=`$GREP " *3 .*( |0)\.3606523 .*9\.81385 " $log | wc -l`
TEST[9]=`expr   $CRIT9`
CTRL[9]=1
ERROR[9]="CC2-R12/A 3B1 EXCITATION ENERGY NOT CORRECT"
CRIT10=`$GREP " *4 .*( |0)\.4067781 .*11\.06900 " $log | wc -l`
TEST[10]=`expr   $CRIT10`
CTRL[10]=1
ERROR[10]="CC2-R12/A 4B1 EXCITATION ENERGY NOT CORRECT"
CRIT11=`$GREP " *1 .*( |0)\.4085893 .*11\.11828 " $log | wc -l`
TEST[11]=`expr   $CRIT11`
CTRL[11]=1
ERROR[11]="CC2-R12/A 1B2 EXCITATION ENERGY NOT CORRECT"
CRIT12=`$GREP " *2 .*( |0)\.4969430 .*13\.52251 " $log | wc -l`
TEST[12]=`expr   $CRIT12`
CTRL[12]=1
ERROR[12]="CC2-R12/A 2B2 EXCITATION ENERGY NOT CORRECT"
CRIT13=`$GREP " *3 .*( |0)\.7831850 .*21\.31155 " $log | wc -l`
TEST[13]=`expr   $CRIT13`
CTRL[13]=1
ERROR[13]="CC2-R12/A 3B2 EXCITATION ENERGY NOT CORRECT"
CRIT14=`$GREP " *4 .*( |0)\.8088293 .*22\.00937 " $log | wc -l`
TEST[14]=`expr   $CRIT14`
CTRL[14]=1
ERROR[14]="CC2-R12/A 4B2 EXCITATION ENERGY NOT CORRECT"
CRIT15=`$GREP " *1 .*( |0)\.0491876 .*1\.33846 " $log | wc -l`
TEST[15]=`expr   $CRIT15`
CTRL[15]=1
ERROR[15]="CC2-R12/A 1A2 EXCITATION ENERGY NOT CORRECT"
CRIT16=`$GREP " *2 .*( |0)\.4505150 .*12\.25914 " $log | wc -l`
TEST[16]=`expr   $CRIT16`
CTRL[16]=1
ERROR[16]="CC2-R12/A 2A2 EXCITATION ENERGY NOT CORRECT"
CRIT17=`$GREP " *3 .*( |0)\.8530076 .*23\.21152 " $log | wc -l`
TEST[17]=`expr   $CRIT17`
CTRL[17]=1
ERROR[17]="CC2-R12/A 3A2 EXCITATION ENERGY NOT CORRECT"
CRIT18=`$GREP " *4 .*( |0)\.8536967 .*23\.23027 " $log | wc -l`
TEST[18]=`expr   $CRIT18`
CTRL[18]=1
ERROR[18]="CC2-R12/A 4A2 EXCITATION ENERGY NOT CORRECT"








PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
do 
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done 

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM 
  exit 1
fi

%EOF%
#######################################################################
