#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > pehsrohf_wft.info <<'%EOF%'
   pehsrohf_wft
   -----------
   Molecule:         Formaldehyde and two classical water molecules
   Wave Function:    PE-HSROHF / STO-3G
   Test Purpose:     Testing high-spin restricted open-shell
                     wavefunction using the PE library
%EOF%
#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > pehsrohf_wft.mol <<'%EOF%'
BASIS
STO-3G
Formaldehyde
------------------------
AtomTypes=3 NoSymmetry Angstrom
Charge=6.0 Atoms=1
C           -1.588367    -.770650     .029109 
Charge=8.0 Atoms=1
O           -1.657083     .436069    -.009750 
Charge=1.0 Atoms=2
H           -.620668   -1.294822      .054251 
H           -2.508043   -1.382001     .040282
%EOF%
#######################################################################
#  POTENTIAL INPUT
#######################################################################
cat > pehsrohf_wft.pot <<'%EOF%'
! Two water molecules
@COORDINATES
6
AA
O     0.975536     1.507219    -0.082590
H     0.023200     1.300096    -0.088063
H     1.113831     2.040431     0.704778
O     1.633705    -1.233280    -0.078786
H     1.600739    -0.258639    -0.086953
H     2.303878    -1.461228     0.570065
@MULTIPOLES
ORDER 0
6
 1    -0.739083
 2     0.367781
 3     0.371302
 4    -0.739251
 5     0.367701
 6     0.371549
ORDER 1
6
 1    -0.130726     0.053697     0.127642
 2     0.206730     0.034515    -0.015142
 3    -0.012978    -0.115434    -0.176127
 4     0.104509     0.119958     0.105009
 5    -0.007017    -0.209358    -0.012012
 6    -0.149391     0.032310    -0.145096
ORDER 2
6
 1    -3.891547     0.304260     0.173633    -4.459360     0.423169    -4.191583
 2    -0.005325     0.100015    -0.012868    -0.496247    -0.009445    -0.522055
 3    -0.512511     0.030179     0.049587    -0.348072     0.235727    -0.153360
 4    -4.353401    -0.233572     0.425650    -3.805243    -0.203696    -4.384519
 5    -0.519714    -0.002960    -0.007650     0.013940     0.010074    -0.519177
 6    -0.250836    -0.075418     0.246439    -0.497307    -0.073459    -0.266235
@POLARIZABILITIES
ORDER 1 1
6
 1     5.476036    -0.086680    -0.072168     5.582289    -0.124016     5.513301
 2     3.488465     0.298404    -0.071204     1.739307    -0.350308     1.360585
 3     1.185490     0.051653     0.313695     2.359411     0.746038     2.948993
 4     5.555285     0.085929    -0.120805     5.451407     0.074565     5.566247
 5     1.509477    -0.036783    -0.366362     3.554625     0.100598     1.528430
 6     2.658086    -0.248537     0.746655     1.223737    -0.356653     2.608086
EXCLISTS
6 3
 1 2 3
 2 1 3
 3 1 2
 4 5 6
 5 4 6
 6 4 5
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > pehsrohf_wft.dal <<'%EOF%'
**DALTON
.RUN PROPERTIES
.PEQM
*PEQM
.VERBOSE
**WAVE FUNCTIONS
.HF
*SCF INPUT
.MAX ERR
10
.DOUBLY OCCUPIED
6
.SINGLY OCCUPIED
2
**END OF
%EOF%
#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL > pehsrohf_wft.check
cat >> pehsrohf_wft.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# Potential readin
#
CRIT1=`$GREP "Number of classical sites: * 6" $log | wc -l`
CRIT2=`$GREP "Multipole moments upto 2nd order." $log | wc -l`
CRIT3=`$GREP "Dipole-dipole polarizabilities." $log | wc -l`
CRIT4=`$GREP "Iterative solver for induced moments will be used" $log | wc -l`
CRIT5=`$GREP "with convergence threshold: 1\.0E\-08" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 `
CTRL[1]=5
ERROR[1]="INCORRECT POTENTIAL"

#
# Convergence
#
CRIT1=`$GREP " DIIS converged in  44 iterations" $log | wc -l`
TEST[2]=`expr $CRIT1 `
CTRL[2]=1
ERROR[2]="CONVERGENCE PROBLEM"

#
# Energies
#
CRIT1=`$GREP "Monopoles * ( |0)\.001447......" $log | wc -l`
CRIT2=`$GREP "Dipoles * (\-|\-0)\.003653......" $log | wc -l`
CRIT3=`$GREP "Quadrupoles * ( |0)\.007585......" $log | wc -l`
CRIT4=`$GREP "Electronic * ( |0)\.228251......" $log | wc -l`
CRIT5=`$GREP "Nuclear * (\-|\-0)\.259766......" $log | wc -l`
CRIT6=`$GREP "Multipole * (\-|\-0)\.003579......" $log | wc -l`
CRIT7=`$GREP "Total PE energy: * (\-|\-0)\.029715......" $log | wc -l`
CRIT8=`$GREP "Final HF energy: * \-111\.257389......" $log | wc -l`
TEST[3]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 `
CTRL[3]=8
ERROR[3]="ENERGY CONTRIBUTIONS NOT CORRECT"

#
# Induced dipole moments in environment
#
 CRIT1=`$GREP "  1 * ( |0)\.12473... * ( |0)\.27132... * (\-|\-0)\.01765..." $log | wc -l`
 CRIT2=`$GREP "  2 * ( |0)\.20285... * ( |0)\.12868... * (\-|\-0)\.03160..." $log | wc -l`
 CRIT3=`$GREP "  3 * ( |0)\.03080... * ( |0)\.08745... * ( |0)\.06416..." $log | wc -l`
 CRIT4=`$GREP "  4 * ( |0)\.29873... * ( |0)\.02220... * (\-|\-0)\.02167..." $log | wc -l`
 CRIT5=`$GREP "  5 * ( |0)\.06133... * ( |0)\.16073... * (\-|\-0)\.01224..." $log | wc -l`
 CRIT6=`$GREP "  6 * ( |0)\.08835... * (\-|\-0)\.01079... * ( |0)\.03173..." $log | wc -l`
TEST[4]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[4]=6
ERROR[4]="INDUCED DIPOLE MOMENTS NOT CORRECT"

#
# dipole moment of formaldehyde
#
CRIT1=`$GREP "x * ( |0)\.14604..." $log | wc -l`
CRIT2=`$GREP "y * \-1\.61526..." $log | wc -l`
CRIT3=`$GREP "z * ( |0)\.04849..." $log | wc -l`
TEST[5]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 `
CTRL[5]=3
ERROR[5]="DIPOLE MOMENT NOT CORRECT"

PASSED=1 
for i in 1 2 3 4 5
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi                
%EOF%
chmod +x pehsrohf_wft.check
#######################################################################
