#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > pehf_cube.info <<'%EOF%'
   pehf_cube
   -----------
   Molecule:         Formaldehyde and two classical water molecules
   Wave Function:    PE-HF / STO-3G
   Test Purpose:     Test the calculation of cube files containing the
                     electrostatic potential and electric field from
                     the embedding potential using the PE library
                     NOTE: if using the TEST script then the option
                     -param "-get *.cube" is required
%EOF%
#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > pehf_cube.mol <<'%EOF%'
BASIS
STO-3G
Formaldehyde
------------------------
AtomTypes=3 NoSymmetry Angstrom
Charge=6.0 Atoms=1
C           -1.588367    -.770650     .029109
Charge=8.0 Atoms=1
O           -1.657083     .436069    -.009750
Charge=1.0 Atoms=2
H           -.620668   -1.294822      .054251
H           -2.508043   -1.382001     .040282
%EOF%
#######################################################################
#  POTENTIAL INPUT
#######################################################################
cat > pehf_cube.pot <<'%EOF%'
! Two water molecules
@COORDINATES
6
AA
O     0.975536     1.507219    -0.082590
H     0.023200     1.300096    -0.088063
H     1.113831     2.040431     0.704778
O     1.633705    -1.233280    -0.078786
H     1.600739    -0.258639    -0.086953
H     2.303878    -1.461228     0.570065
@MULTIPOLES
ORDER 0
6
 1    -0.739083
 2     0.367781
 3     0.371302
 4    -0.739251
 5     0.367701
 6     0.371549
@POLARIZABILITIES
ORDER 1 1
6
 1     5.476036    -0.086680    -0.072168     5.582289    -0.124016     5.513301
 2     3.488465     0.298404    -0.071204     1.739307    -0.350308     1.360585
 3     1.185490     0.051653     0.313695     2.359411     0.746038     2.948993
 4     5.555285     0.085929    -0.120805     5.451407     0.074565     5.566247
 5     1.509477    -0.036783    -0.366362     3.554625     0.100598     1.528430
 6     2.658086    -0.248537     0.746655     1.223737    -0.356653     2.608086
EXCLISTS
6 3
 1 2 3
 2 1 3
 3 1 2
 4 5 6
 5 4 6
 6 4 5
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > pehf_cube.dal <<'%EOF%'
**DALTON
.RUN WAVE FUNCTION
.PEQM
*PEQM
.CUBE
COARSE
FIELD
**WAVE FUNCTIONS
.HF
**END OF
%EOF%
#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL > pehf_cube.check
cat >> pehf_cube.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# electrostatic potential cube file test
#
CRIT1=`$GREP "4 * \-12\.739514 * \-10\.611603 * \-8\.018425" pehf_cube.embedding_potential.cube | wc -l`
CRIT2=`$GREP "59 * 0*\.333333 * 0*\.000000 * 0*\.000000" pehf_cube.embedding_potential.cube | wc -l`
CRIT3=`$GREP "59 * 0*\.000000 * 0*\.333333 * 0*\.000000" pehf_cube.embedding_potential.cube | wc -l`
CRIT4=`$GREP "49 * 0*\.000000 * 0*\.000000 * 0*\.333333" pehf_cube.embedding_potential.cube | wc -l`
# line 11
CRIT5=`$GREP "\-0*\.19211E\-02 * \-0*\.19246E\-02 * \-0*\.19265E\-02 * \-0*\.19267E\-02 * \-0*\.19252E\-02 * \-0*\.19220E\-02" pehf_cube.embedding_potential.cube | wc -l`
# line 100
CRIT6=`$GREP "\-0*\.15862E\-02 * \-0*\.15650E\-02 * \-0*\.15414E\-02 * \-0*\.15155E\-02 * \-0*\.14872E\-02 * \-0*\.14566E\-02" pehf_cube.embedding_potential.cube | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[1]=6
ERROR[1]="EMBEDDING POTENTIAL CUBE FILE NOT CORRECT"

#
# electric field cube file test
#
CRIT1=`$GREP "4 * \-12\.739514 * \-10\.611603 * \-8\.018425" pehf_cube.embedding_field_1.cube | wc -l`
CRIT2=`$GREP "59 * 0*\.333333 * 0*\.000000 * 0*\.000000" pehf_cube.embedding_field_1.cube | wc -l`
CRIT3=`$GREP "59 * 0*\.000000 * 0*\.333333 * 0*\.000000" pehf_cube.embedding_field_1.cube | wc -l`
CRIT4=`$GREP "49 * 0*\.000000 * 0*\.000000 * 0*\.333333" pehf_cube.embedding_field_1.cube | wc -l`
# line 11
CRIT5=`$GREP "0*\.26466E\-03 * 0*\.26925E\-03 * 0*\.27362E\-03 * 0*\.27777E\-03 * 0*\.28165E\-03 * 0*\.28524E\-03" pehf_cube.embedding_field_1.cube | wc -l`
# line 100
CRIT6=`$GREP "0*\.30282E\-03 * 0*\.30456E\-03 * 0*\.30579E\-03 * 0*\.30648E\-03 * 0*\.30661E\-03 * 0*\.30616E\-03" pehf_cube.embedding_field_1.cube | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[2]=6
ERROR[2]="EMBEDDING FIELD X COMPONENT CUBE FILE NOT CORRECT"

#
# electric field cube file test
#
CRIT1=`$GREP "4 * \-12\.739514 * \-10\.611603 * \-8\.018425" pehf_cube.embedding_field_2.cube | wc -l`
CRIT2=`$GREP "59 * 0*\.333333 * 0*\.000000 * 0*\.000000" pehf_cube.embedding_field_2.cube | wc -l`
CRIT3=`$GREP "59 * 0*\.000000 * 0*\.333333 * 0*\.000000" pehf_cube.embedding_field_2.cube | wc -l`
CRIT4=`$GREP "49 * 0*\.000000 * 0*\.000000 * 0*\.333333" pehf_cube.embedding_field_2.cube | wc -l`
# line 11
CRIT5=`$GREP "\-0*\.18002E\-04 * \-0*\.19405E\-04 * \-0*\.20912E\-04 * \-0*\.22528E\-04 * \-0*\.24255E\-04 * \-0*\.26095E\-04" pehf_cube.embedding_field_2.cube | wc -l`
# line 100
CRIT6=`$GREP "\-0*\.16101E\-03 * \-0*\.16707E\-03 * \-0*\.17319E\-03 * \-0*\.17937E\-03 * \-0*\.18558E\-03 * \-0*\.19180E\-03" pehf_cube.embedding_field_2.cube | wc -l`
TEST[3]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[3]=6
ERROR[3]="EMBEDDING FIELD Y COMPONENT CUBE FILE NOT CORRECT"

#
# electric field cube file test
#
CRIT1=`$GREP "4 * \-12\.739514 * \-10\.611603 * \-8\.018425" pehf_cube.embedding_field_3.cube | wc -l`
CRIT2=`$GREP "59 * 0*\.333333 * 0*\.000000 * 0*\.000000" pehf_cube.embedding_field_3.cube | wc -l`
CRIT3=`$GREP "59 * 0*\.000000 * 0*\.333333 * 0*\.000000" pehf_cube.embedding_field_3.cube | wc -l`
CRIT4=`$GREP "49 * 0*\.000000 * 0*\.000000 * 0*\.333333" pehf_cube.embedding_field_3.cube | wc -l`
# line 11
CRIT5=`$GREP "0*\.12792E\-04 * 0*\.81417E\-05 * 0*\.32685E\-05 * \-0*\.18202E\-05 * \-0*\.71156E\-05 * \-0*\.12607E\-04" pehf_cube.embedding_field_3.cube | wc -l`
# line 100
CRIT6=`$GREP "\-0*\.60268E\-04 * \-0*\.67217E\-04 * \-0*\.74229E\-04 * \-0*\.81270E\-04 * \-0*\.88306E\-04 * \-0*\.9530[12]E\-04" pehf_cube.embedding_field_3.cube | wc -l`
TEST[4]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 `
CTRL[4]=6
ERROR[4]="EMBEDDING FIELD Z COMPONENT CUBE FILE NOT CORRECT"

PASSED=1
for i in 1 2 3 4
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi
%EOF%
chmod +x pehf_cube.check
#######################################################################
