#!/usr/bin/env python

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from runtest_dalton import Filter, TestRun

test = TestRun(__file__, sys.argv)

f = Filter()

# HF energy (4 times)
f.add(string = 'Final HF energy',
      tolerance = 1.0e-10)

# Numerical differentiation set up
f.add(from_string = 'Molecular properties transformed to the following Eckart frame',
      num_lines = 5,
      ignore_below = 1.0e-8,
      tolerance = 1.0e-8)

# Molecular gradients
f.add(from_string = 'Molecular gradient (au)',
      num_lines    = 5,
      ignore_below = 1.0e-9,
      tolerance = 1.0e-6)

# Molecular hessians (Low numbers, so difficult to test)
f.add(from_string = 'Molecular Hessian (au)',
      num_lines    = 12,
      ignore_below = 1.0e-5,
      tolerance = 1.0e-4)

# Chemical shielding for fluor and hydrogen
f.add(from_string = 'Chemical shielding for ',
      num_lines = 10,
      ignore_below = 1.0e-4,
      tolerance = 1.0e-7)

# Chemical shielding summary
f.add(string = '@1 H ',
      tolerance = 1.0e-10)
f.add(string = '@1 F ',
      tolerance = 1.0e-10)
f.add(string = '@2 H ',
      tolerance = 1.0e-10)
f.add(string = '@2 F ',
      tolerance = 1.0e-10)

# Projected gradient
f.add(string = 'Norm of projected gradient',
      tolerance = 1.0e-5)

# Second derivatives
# (many small numbers, difficult to test with high enough precision)
f.add(from_string = 'All displacements are now done',
      to_string = 'Vibrationally averaged molecular properties', 
      ignore_below = 1.0e-1,
      tolerance = 1.0e-5)

# Vibrationally averaged molecular properties
# (many small numbers, difficult to test with high enough precision)
f.add(from_string = 'Vibrationally averaged molecular properties', 
      to_string = 'Numerical differentiation complete.',
      ignore_below = 1.0e-8,
      tolerance = 1.0e-8)

test.run(['walk_vibave2.dal'], ['hf_ano-4.mol'], {'out': f})

sys.exit(test.return_code)
