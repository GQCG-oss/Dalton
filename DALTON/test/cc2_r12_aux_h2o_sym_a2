#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi

#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > cc2_r12_aux_h2o_sym_a2.info <<'%EOF%'
   cc2_r12_aux_h2o_sym_a2
   -----------
   Molecule:         H2O 
   Wave Function:    CC2-R12/A2/B / 6-311G/6-311++G**
   Test Purpose:     Check CC2-R12/A2/B method with auxiliary basis 
                     - test .R12ORB option
                     - test non-direct mode
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > cc2_r12_aux_h2o_sym_a2.mol <<'%EOF%'
BASIS
6-311G 6-311++G**
H2O with symmetry

    4    2 X Z
 1      8.    1
O     0.0 -0.2249058930 0.0
 1      1.    1
H     1.45235 0.899623 0.0
 2      8.    1
O     0.0 -0.2249058930 0.0
 2      1.    1
H     1.45235 0.899623 0.0
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > cc2_r12_aux_h2o_sym_a2.dal <<'%EOF%'
**DALTON INPUT
.RUN WAVE FUNCTION
*MOLBAS
.R12AUX
**INTEGRALS
.R12
**WAVE FUNCTION
.CC
*ORBITAL INPUT
.MOSTART
 H1DIAG
.R12ORB
 1 0 0 0
*SCF INPUT
.THRESH
 1.0D-10
*CC INPUT
.CC2
.PRINT
 3 
.FREEZE
 1 0
.THRENR
 1.0D-12
.MAX IT
 100
*CCEXCI
.THREXC
 1.D-10
.NCCEXCI
 4 4 4 4 
*R12 INPUT
.NO HYB
.CC2
 2B
**END OF DALTON INPUT
%EOF%

#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >cc2_r12_aux_h2o_sym_a2.check
cat >>cc2_r12_aux_h2o_sym_a2.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi


#           Total SCF   energy:                   -76.0085552989
#           Total MP2-R12/B energy:               -76.2604786891
#           Total CC2-R12/B energy:               -76.2624773272
#
#    Total energies in Hartree:
#
#            1 ^1A1       -75.8902490817
#            2 ^1A1       -75.6092812760
#            3 ^1A1       -75.4865202779
#            4 ^1A1       -75.3223271449
#
#            1 ^1B2       -75.7971528462
#            2 ^1B2       -75.7236754481
#            3 ^1B2       -75.5105286656
#            4 ^1B2       -75.2900157703
#
#            1 ^1B1       -75.9710072313
#            2 ^1B1       -75.5661683737
#            3 ^1B1       -75.1951544166
#            4 ^1B1       -75.1393403851
#
#            1 ^1A2       -75.8819379068
#            2 ^1A2       -75.6201313757
#            3 ^1A2       -75.0938523250
#            4 ^1A2       -74.9687034344
#
CRIT1=`$GREP "Total MP2-R12/B energy: *-76\.2604786891" $log | wc -l`
TEST[1]=`expr	$CRIT1`
CTRL[1]=2
ERROR[1]="MP2-R12/B ENERGY NOT CORRECT"
CRIT2=`$GREP "Total CC2-R12/B energy: *-76\.2624773272" $log | wc -l`
TEST[2]=`expr	$CRIT2`
CTRL[2]=2
ERROR[2]="CC2-R12/B ENERGY NOT CORRECT"
#
CRIT3=`$GREP "1 \^1A1 *-75\.89024908.." $log | wc -l`
TEST[3]=`expr	$CRIT3`
CTRL[3]=1
ERROR[3]="CC2-R12/B 1A1 EXCITATION ENERGY NOT CORRECT"
CRIT4=`$GREP "2 \^1A1 *-75\.60928127.." $log | wc -l`
TEST[4]=`expr	$CRIT4`
CTRL[4]=1
ERROR[4]="CC2-R12/B 2A1 EXCITATION ENERGY NOT CORRECT"
CRIT5=`$GREP "3 \^1A1 *-75\.48652027.." $log | wc -l`
TEST[5]=`expr	$CRIT5`
CTRL[5]=1
ERROR[5]="CC2-R12/B 3A1 EXCITATION ENERGY NOT CORRECT"
CRIT6=`$GREP "4 \^1A1 *-75\.32232714.." $log | wc -l`
TEST[6]=`expr	$CRIT6`
CTRL[6]=1
ERROR[6]="CC2-R12/B 4A1 EXCITATION ENERGY NOT CORRECT"
CRIT7=`$GREP "1 \^1B2 *-75\.79715284.." $log | wc -l`
TEST[7]=`expr   $CRIT7`
CTRL[7]=1
ERROR[7]="CC2-R12/B 1B2 EXCITATION ENERGY NOT CORRECT"
CRIT8=`$GREP "2 \^1B2 *-75\.72367544.." $log | wc -l`
TEST[8]=`expr   $CRIT8`
CTRL[8]=1
ERROR[8]="CC2-R12/B 2B2 EXCITATION ENERGY NOT CORRECT"
CRIT9=`$GREP "3 \^1B2 *-75\.51052866.." $log | wc -l`
TEST[9]=`expr   $CRIT9`
CTRL[9]=1
ERROR[9]="CC2-R12/B 3B2 EXCITATION ENERGY NOT CORRECT"
CRIT10=`$GREP "4 \^1B2 *-75\.29001577.." $log | wc -l`
TEST[10]=`expr   $CRIT10`
CTRL[10]=1
ERROR[10]="CC2-R12/B 4B2 EXCITATION ENERGY NOT CORRECT"
CRIT11=`$GREP "1 \^1B1 *-75\.97100723.." $log | wc -l`
TEST[11]=`expr   $CRIT11`
CTRL[11]=1
ERROR[11]="CC2-R12/B 1B1 EXCITATION ENERGY NOT CORRECT"
CRIT12=`$GREP "2 \^1B1 *-75\.56616837.." $log | wc -l`
TEST[12]=`expr   $CRIT12`
CTRL[12]=1
ERROR[12]="CC2-R12/B 2B1 EXCITATION ENERGY NOT CORRECT"
CRIT13=`$GREP "3 \^1B1 *-75\.19515441.." $log | wc -l`
TEST[13]=`expr   $CRIT13`
CTRL[13]=1
ERROR[13]="CC2-R12/B 3B1 EXCITATION ENERGY NOT CORRECT"
CRIT14=`$GREP "4 \^1B1 *-75\.13934038.." $log | wc -l`
TEST[14]=`expr   $CRIT14`
CTRL[14]=1
ERROR[14]="CC2-R12/B 4B1 EXCITATION ENERGY NOT CORRECT"
CRIT15=`$GREP "1 \^1A2 *-75\.88193790.." $log | wc -l`
TEST[15]=`expr   $CRIT15`
CTRL[15]=1
ERROR[15]="CC2-R12/B 1A2 EXCITATION ENERGY NOT CORRECT"
CRIT16=`$GREP "2 \^1A2 *-75\.62013137.." $log | wc -l`
TEST[16]=`expr   $CRIT16`
CTRL[16]=1
ERROR[16]="CC2-R12/B 2A2 EXCITATION ENERGY NOT CORRECT"
CRIT17=`$GREP "3 \^1A2 *-75\.09385232.." $log | wc -l`
TEST[17]=`expr   $CRIT17`
CTRL[17]=1
ERROR[17]="CC2-R12/B 3A2 EXCITATION ENERGY NOT CORRECT"
CRIT18=`$GREP "4 \^1A2 *-74\.96870343.." $log | wc -l`
TEST[18]=`expr   $CRIT18`
CTRL[18]=1
ERROR[18]="CC2-R12/B 4A2 EXCITATION ENERGY NOT CORRECT"


PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
do 
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done 

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM 
  exit 1
fi

%EOF%
#######################################################################
