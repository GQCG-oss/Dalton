#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > dft_disp_d3.info <<'%EOF%'
   DFT D3 Dispersion Correction  
   --------------------------
   Molecule:         CH4 Dimer 
   Wave Function:    DFT / BLYP / STO-3G (Geom. Opt.)
   Test Purpose:     Run a geometry optimization with symm. using the
                     DFT-D3 empirical dispersion correction. BLYP 
                     uncorrected gives a C-C separation of ~4.6 Ang,
                     the corrected version gives ~3.5 Ang. The 
                     S22 geometry is ~3.7 Ang  
                                                                
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > dft_disp_d3.mol <<'%EOF%'
BASIS
STO-3G
CH4 Dimer
----------
Atomtypes=2 Angstrom
Atoms=2  Charge=6.0
C   0.000000  -0.000140   1.859161
C   0.000000   0.000140  -1.859161
Atoms=8  Charge=1.0
H  -0.888551   0.513060   1.494685
H   0.888551   0.513060   1.494685
H   0.000000  -1.026339   1.494868
H   0.000000   0.000089   2.948284
H   0.000000  -0.000089  -2.948284
H  -0.888551  -0.513060  -1.494685
H   0.888551  -0.513060  -1.494685
H   0.000000   1.026339  -1.494868
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > dft_disp_d3.dal <<'%EOF%'
**DALTON INPUT
.RUN WAVEFUNCTION
.DIRECT
.OPTIMIZE
**WAVE FUNCTIONS
.DFT
 BLYP
*DFT INPUT
.DFTD3
.GRID TYPE
BECKE
*SCF INPUT
.THRESH
 1.0D-06
**END OF INPUT
%EOF%
#######################################################################

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >dft_disp_d3.check
cat >>dft_disp_d3.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Check 1:
CRIT1=`$GREP "E_disp:   *  -0.002241" $log | wc -l`
TEST[1]=`expr $CRIT1`
CTRL[1]=2
ERROR[1]="1ST DISPERSION ENERGY NOT CORRECT"


# Check 2:
CRIT1=`$GREP "Final DFT energy:   *   -79.990697" $log | wc -l`
TEST[2]=`expr $CRIT1`
CTRL[2]=1
ERROR[2]="1ST DFT ENERGY NOT CORRECT"

# Check 3:
#CRIT1=`$GREP "C   _1: *   ( |0)\.000000" $log | wc -l`
CRIT2=`$GREP "C   _2: *   3\.498195  *  ( |0)\.000000" $log | wc -l`
CRIT3=`$GREP "H   _1: *   1\.104411  *  3\.308885  *  ( |0)\.000000" $log | wc -l`
CRIT4=`$GREP "H   _2: *   1\.104411  *  3\.308885  *  1\.802243  *  ( |0)\.000000" $log | wc -l`
CRIT5=`$GREP "H   _3: *   3\.308885  *  1\.104411  *  2\.975136  *  3\.478436  *  ( |0)\.000000" $log | wc -l`
CRIT6=`$GREP "H   _4: *   3\.308885  *  1\.104411  *  3\.478436  *  2\.975136  *  1\.802243  *  ( |0)\.000000" $log | wc -l`
CRIT7=`$GREP "H   _1: *   1\.104395  *  3\.271648  *  1\.802124  *  1\.802124  *  2\.933734  *  2\.933734" $log | wc -l`
CRIT8=`$GREP "H   _2: *   3\.271648  *  1\.104395  *  2\.933734  *  2\.933734  *  1\.802124  *  1\.802124" $log | wc -l`
CRIT9=`$GREP "H   _1: *   1\.104705  *  4\.602690  *  1\.805035  *  1\.805035  *  4\.367843  *  4\.367843" $log | wc -l`
CRIT10=`$GREP "H   _2: *   4\.602690 *   1\.104705 *   4\.367843 *   4\.367843 *   1\.805035 *   1\.805035" $log | wc -l`
TEST[3]=`expr $CRIT2 + $CRIT3 + $CRIT4 + $CRIT5 + $CRIT6 + $CRIT7 + $CRIT8 + $CRIT9 + $CRIT10`
CTRL[3]=18
ERROR[3]="FINAL GEOMETRY NOT CORRECT"

PASSED=1
for i in 1 2 3 
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} )"
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################

