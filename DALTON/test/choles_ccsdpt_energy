#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > choles_ccsdpt_energy.info << '%EOF%'
   choles_ccsdpt_energy
   ---------------
   Molecule:         NH3 in Cs
   Wave Function:    CCSD, CCSD(T) / aug-cc-pVTZ
   Test Purpose:     Cholesky CCSD(T) energy
%EOF%

#######################################################################
#  INTEGRAL INPUT
#######################################################################
cat > choles_ccsdpt_energy.mol << '%EOF%'
BASIS
aug-cc-pVTZ
Cholesky CCSD(T) energy
-----------------------
    2  0              0.10E-14
        7.    1
N       0.0000000000    0.0000000000    0.0973756982
        1.    3
H2      1.5849340778   -0.9150621165   -0.4509907005
H3      0.0000000000    1.8301242329   -0.4509907005
H4     -1.5849340778   -0.9150621165   -0.4509907005
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > choles_ccsdpt_energy.dal << '%EOF%'
**DALTON
.RUN WAVE
**INTEGRALS
.DIPLEN
**WAVE FUNCTION
.CC
*SCF INPUT
.THRESH
 1.0D-10
*PRINT
.PRINTL
   5  11
.PRINTFLAGS
   0  5
  -6  -7  -8  -9  -10
*CC INPUT
.THRENR
  1.0D-10
.PRINT
  1
.FREEZE
  1  0
.CCSD
.CHO(T)
**END OF DALTON INPUT
%EOF%

#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL > choles_ccsdpt_energy.check
cat >> choles_ccsdpt_energy.check << '%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi

# SCF, MP2 and CCSD energies:
CRIT1=`$GREP "Final * HF energy:  * -56\.21914893(50|49)" $log | wc -l`
CRIT2=`$GREP "Total MP2   energy: * -56\.4591059647" $log | wc -l`
CRIT3=`$GREP "Total CCSD  energy: * -56\.47064224" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[1]=7
ERROR[1]="ENERGIES NOT CORRECT"


# Triples corrections
CRIT1=`$GREP  " The E4 doubles and triples: * ( -|-0)\.00849426" $log | wc -l`
CRIT2=`$GREP  " The E5 singles and triples: * ( |0)\.00021204" $log | wc -l`
CRIT3=`$GREP  " Total energy CCSD\(T\): * -56\.47892446" $log | wc -l`

TEST[2]=`expr $CRIT1  \+ $CRIT2  \+ $CRIT3`

CTRL[2]=6
ERROR[2]="TRIPLES CORRECTIONS NOT CORRECT"


PASSED=1
for i in 1 2
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
