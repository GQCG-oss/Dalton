#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > geoopt_parallel.info <<'%EOF%'
   geoopt_parallel
   ---------------
   Molecule:         Acrolein
   Wave Function:    SCF / 3-21G
   Test Purpose:     Parallel second order transition state optimization
                     in redundant internal coordinates. The partitioned
                     rational function method controls the steps and
                     Baker's convergence criteria are used
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > geoopt_parallel.mol <<'%EOF%'
BASIS
3-21G
Locating the rotational transition state of acrolein

    3    0
        6.    3
C    -1.2039490098         .6299819763       -1.8443710751             *
C     1.2056120532         .0000000000        1.9839551839             *
C      .0666798969        -.9449729645        -.3221285864             *
        8.    1
O      .0000000000         .0000000000        3.9490688445             *
        1.    4
H    -2.0522570986        -.0738599558       -3.5620058833             *
H     3.1211832712         .7038419322        1.9619811778             *
H      .2424607776       -2.9181815653        -.8128813887             *
H    -1.3797298905        2.6031905771       -1.3536182728             *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > geoopt_parallel.dal <<'%EOF%'
**DALTON INPUT
.PARALLEL
.OPTIMIZE
*OPTIMIZE
.REDINT
.NEWTON
.SADDLE
.BAKER
.RF
**WAVE FUNCTION
.HF
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >geoopt_parallel.check
cat >>geoopt_parallel.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Geometry optimization
CRIT1=`$GREP "Saddle point optimization has been requested\." $log | wc -l`
CRIT2=`$GREP "2nd order Newton method will be used\." $log | wc -l`
CRIT3=`$GREP "Optimization will be performed in redundant internal coordinates\." $log | wc -l`
CRIT4=`$GREP "Partitioned rational function method will be used to control step\." $log | wc -l`
CRIT5=`$GREP "The eigenvector corresponding to the lowest non-zero eigenvalue is chosen" $log | wc -l`
CRIT6=`$GREP "as reaction mode \(default\)\." $log | wc -l`
CRIT7=`$GREP "Baker.s convergence criteria will be used\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7`
CTRL[1]=7
ERROR[1]="GEOMETRY OPTIMIZATION NOT SET UP CORRECTLY"

# Geometry
CRIT1=`$GREP "1 * x * \-1\.2039490098" $log | wc -l`
CRIT2=`$GREP "2 * y * (0| )\.6299819763" $log | wc -l`
CRIT3=`$GREP "3 * z * \-1\.8443710751" $log | wc -l`
CRIT4=`$GREP "4 * x * 1\.2056120532" $log | wc -l`
CRIT5=`$GREP "6 * z * 1\.9839551839" $log | wc -l`
CRIT6=`$GREP "7 * x * (0| )\.0666798969" $log | wc -l`
CRIT7=`$GREP "8 * y * (\-0|\-)\.9449729645" $log | wc -l`
CRIT8=`$GREP "9 * z * (\-0|\-)\.3221285864" $log | wc -l`
CRIT9=`$GREP "12 * z * 3\.9490688445" $log | wc -l`
CRIT10=`$GREP "13 * x * \-2\.0522570986" $log | wc -l`
CRIT11=`$GREP "14 * y * (\-0|\-)\.0738599558" $log | wc -l`
CRIT12=`$GREP "15 * z * \-3\.5620058833" $log | wc -l`
CRIT13=`$GREP "16 * x * 3\.1211832712" $log | wc -l`
CRIT14=`$GREP "17 * y * (0| )\.7038419322" $log | wc -l`
CRIT15=`$GREP "18 * z * 1\.9619811778" $log | wc -l`
CRIT16=`$GREP "19 * x * (0| )\.2424607776" $log | wc -l`
CRIT17=`$GREP "20 * y * \-2\.9181815653" $log | wc -l`
CRIT18=`$GREP "21 * z * (\-0|\-)\.8128813887" $log | wc -l`
CRIT19=`$GREP "22 * x * \-1\.3797298905" $log | wc -l`
CRIT20=`$GREP "23 * y * 2\.6031905771" $log | wc -l`
CRIT21=`$GREP "24 * z * \-1\.3536182728" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17 \+ $CRIT18 \+ \
		$CRIT19 \+ $CRIT20 \+ $CRIT21`
CTRL[2]=21
ERROR[2]="GEOMETRY NOT READ CORRECTLY"

# Initial energy
CRIT1=`$GREP "Final * HF energy\: * \-189\.671241580." $log | wc -l`
TEST[3]=`expr	$CRIT1`
CTRL[3]=1
ERROR[3]="INITIAL ENERGY NOT CORRECT"

# Initial gradient
CRIT1=`$GREP "C * \-0*\.01430..... *   0*\.02271..... * \-0*\.01487....." $log | wc -l`
CRIT2=`$GREP "C *   0*\.01182..... *   0*\.00379..... * \-0*\.03969....." $log | wc -l`
CRIT3=`$GREP "C *   0*\.01550..... * \-0*\.01559..... *   0*\.05047....." $log | wc -l`
CRIT4=`$GREP "O * \-0*\.01250..... * \-0*\.00477..... *   0*\.00186....." $log | wc -l`
CRIT5=`$GREP "H *   0*\.00020..... * \-0*\.00684..... * \-0*\.00477....." $log | wc -l`
CRIT6=`$GREP "H * \-0*\.00157..... *   0*\.00043..... *   0*\.00508....." $log | wc -l`
CRIT7=`$GREP "H * \-0*\.00139..... * \-0*\.00377..... * \-0*\.00412....." $log | wc -l`
CRIT8=`$GREP "H *   0*\.00223..... *   0*\.00404..... *   0*\.00603....." $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[4]=8
ERROR[4]="INITIAL GRADIENT NOT CORRECT"

# Initial Hessian
CRIT1=`$GREP "C * z * (0| )\.2911.. * (\-0|\-)\.0011.. * (0| )\.6497.." $log | wc -l`
CRIT2=`$GREP "C * x * (\-0|\-)\.0035.. * (\-0|\-)\.0082.. * (\-0|\-)\.0263.. * (0| )\.7382.." $log | wc -l`
CRIT3=`$GREP "C * y * (0| )\.0115.. * (0| )\.0157.. * (0| )\.0268.. * (0| )\.1278.. * (0| )\.3205.." $log | wc -l`
CRIT4=`$GREP "C * z * (\-0|\-)\.0190.. * (\-0|\-)\.0064.. * (\-0|\-)\.0272.. * (\-0|\-)\.1960.. * (0| )\.0693.. * (0| )\.9155.." $log | wc -l`
CRIT5=`$GREP "C * x * (\-0|\-)\.2074.. * (0| )\.1408.. * (\-0|\-)\.1554.. * (\-0|\-)\.1430.. * (\-0|\-)\.0327.. * (\-0|\-)\.0808.." $log | wc -l`
CRIT6=`$GREP "C * y * (0| )\.1441.. * (\-0|\-)\.3015.. * (0| )\.1520.. * (\-0|\-)\.0257.. * (\-0|\-)\.1354.. * (\-0|\-)\.0486.." $log | wc -l`
CRIT7=`$GREP "C * z * (\-0|\-)\.1547.. * (0| )\.1499.. * (\-0|\-)\.2806.. * (\-0|\-)\.0723.. * (\-0|\-)\.0591.. * (\-0|\-)\.2152.." $log | wc -l`
CRIT8=`$GREP "O * x * (\-0|\-)\.0002.. * (0| )\.0012.. * (0| )\.0010.. * (\-0|\-)\.3008.. * (\-0|\-)\.0117.. * (0| )\.3117.." $log | wc -l`
CRIT9=`$GREP "H * y * (\-0|\-)\.0421.. * (\-0|\-)\.1080.. * (\-0|\-)\.0939.. * (0| )\.0051.. * (\-0|\-)\.0027.. * (\-0|\-)\.0008.." $log | wc -l`
CRIT10=`$GREP "H * z * (\-0|\-)\.0059.. * (0| )\.0257.. * (0| )\.0119.. * (0| )\.0027.. * (\-0|\-)\.0291.. * (\-0|\-)\.0003.." $log | wc -l`
CRIT11=`$GREP "O * x * (0| )\.0231.. * (\-0|\-)\.0015.. * (\-0|\-)\.0080.. * (0| )\.300..." $log | wc -l`
CRIT12=`$GREP "H * y * (0| )\.0143.. * (0| )\.0116.. * (0| )\.0251.. * (\-0|\-)\.0011.. * (0| )\.0003.. * (0| )\.0006.." $log | wc -l`
CRIT13=`$GREP "H * z * (\-0|\-)\.0265.. * (\-0|\-)\.0136.. * (0| )\.0015.. * (0| )\.0539.. * (0| )\.0126.. * (\-0|\-)\.0074.." $log | wc -l`
CRIT14=`$GREP "H * x * (0| )\.0071.. * (0| )\.0222.. * (0| )\.0019.. * (0| )\.0005.. * (0| )\.0010.. * (0| )\.0021.." $log | wc -l`
CRIT15=`$GREP "H * y * (0| )\.0002.. * (0| )\.0008.. * (\-0|\-)\.0011.. * (0| )\.1116.. * (0| )\.0676.." $log | wc -l`
CRIT16=`$GREP "H * z * (0| )\.0051.. * (0| )\.0010.. * (\-0|\-)\.0016.. * (\-0|\-)\.0020.. * (0| )\.0009.. * (\-0|\-)\.0015.." $log | wc -l`
CRIT17=`$GREP "H * x * (0| )\.0083.. * (0| )\.0038.. * (\-0|\-)\.0079.. * (0| )\.0459.." $log | wc -l`
TEST[5]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17`
CTRL[5]=17
ERROR[5]="INITIAL HESSIAN NOT CORRECT"

# Initial step
CRIT1=`$GREP "C * \-1\.193....... *   0*\.620....... *  \-1\.880" $log | wc -l`
CRIT2=`$GREP "C *   1\.170....... * \-0*\.016....... *    2\.068" $log | wc -l`
CRIT3=`$GREP "C *  0*\.029....... * \-0*\.898....... * \-0*\.345" $log | wc -l`
CRIT4=`$GREP "O *  0*\.106....... * \-0*\.060....... *    4\.096" $log | wc -l`
CRIT5=`$GREP "H * \-2\.020....... * \-0*\.048....... *  \-3\.606" $log | wc -l`
CRIT6=`$GREP "H *   3\.096....... *   0*\.682....... *    1\.913" $log | wc -l`
CRIT7=`$GREP "H *  0*\.241....... *  \-2\.874....... * \-0*\.778" $log | wc -l`
CRIT8=`$GREP "H * \-1\.429....... *    2\.596....... *  \-1\.467" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[6]=8
ERROR[6]="INITIAL STEP NOT CORRECT"

# Second iteration
CRIT1=`$GREP "Energy at this geometry is * \: * \-189\.67565" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * 0*\.009(09|10)" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * 0*\.0333" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[7]=3
ERROR[7]="SECOND ITERATION NOT CORRECT"

# Third iteration
CRIT1=`$GREP "Norm of gradient * \: * 0*\.00023" $log | wc -l`
CRIT2=`$GREP "Norm of step * \: * 0*\.00(09|1)" $log | wc -l`
TEST[8]=`expr	$CRIT1 \+ $CRIT2`
CTRL[8]=2
ERROR[8]="THIRD ITERATION NOT CORRECT"

# Final geometry
CRIT1=`$GREP "C * \-0\.63487..... *   0\.33093..... * \-0\.99997....." $log | wc -l`
CRIT2=`$GREP "C *   0\.61875..... * \-0\.01094..... *   1\.10391....." $log | wc -l`
CRIT3=`$GREP "C *   0\.00906..... * \-0\.47071..... * \-0\.18096....." $log | wc -l`
CRIT4=`$GREP "O *   0\.07000..... * \-0\.03525..... *   2\.18119....." $log | wc -l`
CRIT5=`$GREP "H * \-1\.05988..... * \-0\.02650..... * \-1\.91765....." $log | wc -l`
CRIT6=`$GREP "H *   1\.63755..... *   0\.35227..... *   1\.01014....." $log | wc -l`
CRIT7=`$GREP "H *   0\.12827..... * \-1\.51511..... * \-0\.40893....." $log | wc -l`
CRIT8=`$GREP "H * \-0\.76889..... *   1\.37531..... * \-0\.78772....." $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[9]=8
ERROR[9]="FINAL GEOMETRY NOT CORRECT"

# Optimization converged
CRIT1=`$GREP "Geometry converged in * 4 * iterations\!" $log | wc -l`
CRIT2=`$GREP "Energy at final geometry is * \: * \-189\.67574[0-9] a\.u\." $log | wc -l`
CRIT3=`$GREP "Energy change during optimization \: * \-0*\.00449[0-9] a\.u\." $log | wc -l`
TEST[10]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[10]=3
ERROR[10]="GEOMETRY OPTIMIZATION NOT CONVERGED"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} )"
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
