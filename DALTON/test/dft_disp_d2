#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > dft_disp_d2.info <<'%EOF%'
   DFT D2 Dispersion Correction  
   --------------------------
   Molecule:         CH4 Dimer 
   Wave Function:    DFT / BLYP / STO-3G (Geom. Opt.)
   Test Purpose:     Run a geometry optimization with symm. using the
                     DFT-D2 empirical dispersion correction. BLYP 
                     uncorrected gives a C-C separation of ~4.6 Ang,
                     the corrected version gives ~3.4 Ang. The 
                     S22 geometry is ~3.7 Ang  
                                                                
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > dft_disp_d2.mol <<'%EOF%'
BASIS
STO-3G
CH4 Dimer
----------
Atomtypes=2 Angstrom
Atoms=2  Charge=6.0
C_a   0.000000  -0.000140   1.859161
C_b   0.000000   0.000140  -1.859161
Atoms=8  Charge=1.0
H_aa  -0.888551   0.513060   1.494685
H_ab   0.888551   0.513060   1.494685
H_ac   0.000000  -1.026339   1.494868
H_ad   0.000000   0.000089   2.948284
H_ba   0.000000  -0.000089  -2.948284
H_bb  -0.888551  -0.513060  -1.494685
H_bc   0.888551  -0.513060  -1.494685
H_bc   0.000000   1.026339  -1.494868
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > dft_disp_d2.dal <<'%EOF%'
**DALTON INPUT
.RUN WAVEFUNCTION
.DIRECT
.OPTIMIZE
*OPTIMIZE
.NATNRM
.VLOOSE
**WAVE FUNCTIONS
.DFT
 BLYP
*DFT INPUT
.DFTD2
.GRID TYPE
BECKE
*SCF INPUT
.THRESH
 1.0D-06
**END OF INPUT
%EOF%
#######################################################################

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >dft_disp_d2.check
cat >>dft_disp_d2.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Check 1:
CRIT1=`$GREP "E_disp *: * -0.003944" $log | wc -l`
TEST[1]=`expr $CRIT1`
CTRL[1]=2
ERROR[1]="1ST DISPERSION ENERGY NOT CORRECT"


# Check 2:
CRIT1=`$GREP "Final DFT energy:    *    -79.992399" $log | wc -l`
TEST[2]=`expr $CRIT1`
CTRL[2]=1
ERROR[2]="1ST DFT ENERGY NOT CORRECT"

# Check 3:
#CRIT1=`$GREP "C   _1: * ( |0)\.000000" $log | wc -l`
#CRIT2=`$GREP "C * _2: * 3\.43....  *  ( |0)\.000000" $log | wc -l`
#CRIT3=`$GREP "H * _1: * 1\.1063..  *  3\.31....  *  ( |0)\.000000" $log | wc -l`
#CRIT4=`$GREP "H * _2: * 1\.1063..  *  3\.31....  *  1\.8058..  *  ( |0)\.000000" $log | wc -l`
#CRIT5=`$GREP "H * _3: * 3\.31....  *  1\.1063..  *  3\.05....  *  3\.55....  *  ( |0)\.000000" $log | wc -l`
#CRIT6=`$GREP "H * _4: * 3\.31....  *  1\.1063..  *  3\.55....  *  3\.0(5|6)....  *  1\.8058..  *  ( |0)\.000000" $log | wc -l`
#CRIT7=`$GREP "H * _1: * 1\.1061..  *  3\.08....  *  1\.8050..  *  1\.8050..  *  2\.8124..  *  2\.8124.." $log | wc -l`
#CRIT8=`$GREP "H * _2: * 3\.08....  *  1\.1061..  *  2\.8124..  *  2\.8124..  *  1\.8050..  *  1\.8050.." $log | wc -l`
#CRIT9=`$GREP "H * _1: * 1\.1067..  *  4\.53....  *  1\.8079..  *  1\.8079..  *  4\.35....  *  4\.35...." $log | wc -l`
#CRIT10=`$GREP "H * _2: * 4\.53.... *   1\.1067.. *   4\.35.... *   4\.35.... *   1\.8079.. *   1\.8079.." $log | wc -l`
#TEST[3]=`expr $CRIT2 + $CRIT3 + $CRIT4 + $CRIT5 + $CRIT6 + $CRIT7 + $CRIT8 + $CRIT9 + $CRIT10`
#CTRL[3]=18
#ERROR[3]="FINAL GEOMETRY NOT CORRECT"

 CRIT1=`$GREP "bond distance\: * H_ab_1 * C_a _1 * 1\.1063.." $log | wc -l`
 CRIT2=`$GREP "bond distance\: * H_ab_2 * C_a _1 * 1\.1063.." $log | wc -l`
 CRIT3=`$GREP "bond distance\: * H_ab_3 * C_a _2 * 1\.1063.." $log | wc -l`
 CRIT4=`$GREP "bond distance\: * H_ab_4 * C_a _2 * 1\.1063.." $log | wc -l`
 CRIT5=`$GREP "bond distance\: * H_ac_1 * C_a _1 * 1\.106[12].." $log | wc -l`
 CRIT6=`$GREP "bond distance\: * H_ac_2 * C_a _2 * 1\.106[12].." $log | wc -l`
 CRIT7=`$GREP "bond distance\: * H_ad_1 * C_a _1 * 1\.1067.." $log | wc -l`
 CRIT8=`$GREP "bond distance\: * H_ad_2 * C_a _2 * 1\.1067.." $log | wc -l`
TEST[3]=`expr $CRIT1 + $CRIT2 + $CRIT3 + $CRIT4 + $CRIT5 + $CRIT6 + $CRIT7 + $CRIT8`
CTRL[3]=16
ERROR[3]="FINAL BOND DISTANCES NOT CORRECT"

 CRIT1=`$GREP "bond angle\: * H_ab_1 * C_a _1 * H_ab_2 *  109\.(39|40)" $log | wc -l`
 CRIT2=`$GREP "bond angle\: * H_ab_1 * C_a _1 * H_ac_1 *  109\.3[34]" $log | wc -l`
 CRIT3=`$GREP "bond angle\: * H_ab_1 * C_a _1 * H_ad_1 *  109\.5[56]" $log | wc -l`
 CRIT4=`$GREP "bond angle\: * H_ab_2 * C_a _1 * H_ac_1 *  109\.3[34]" $log | wc -l`
 CRIT5=`$GREP "bond angle\: * H_ab_2 * C_a _1 * H_ad_1 *  109\.5[56]" $log | wc -l`
 CRIT6=`$GREP "bond angle\: * H_ac_1 * C_a _1 * H_ad_1 *  109\.6[12]" $log | wc -l`
 CRIT7=`$GREP "bond angle\: * H_ab_3 * C_a _2 * H_ab_4 *  109\.(39|40)" $log | wc -l`
 CRIT8=`$GREP "bond angle\: * H_ab_3 * C_a _2 * H_ac_2 *  109\.3[34]" $log | wc -l`
 CRIT9=`$GREP "bond angle\: * H_ab_3 * C_a _2 * H_ad_2 *  109\.5[56]" $log | wc -l`
CRIT10=`$GREP "bond angle\: * H_ab_4 * C_a _2 * H_ac_2 *  109\.3[34]" $log | wc -l`
CRIT11=`$GREP "bond angle\: * H_ab_4 * C_a _2 * H_ad_2 *  109\.5[56]" $log | wc -l`
CRIT12=`$GREP "bond angle\: * H_ac_2 * C_a _2 * H_ad_2 *  109\.6[12]" $log | wc -l`
TEST[4]=`expr $CRIT1 + $CRIT2 + $CRIT3 + $CRIT4 + $CRIT5 + $CRIT6 + $CRIT7 + $CRIT8 + $CRIT9 + $CRIT10 + $CRIT11 + $CRIT12`
CTRL[4]=24
ERROR[4]="FINAL BOND ANGLES NOT CORRECT"


PASSED=1
for i in 1 2 3 4
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} )"
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################

