#!/usr/bin/env python

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from runtest_dalton import Filter, TestRun

test = TestRun(__file__, sys.argv)

f = Filter()

# Energy
f.add(re = 'Final CI energy',
      rel_tolerance = 1.0e-10)
f.add(re = 'Final MCSCF energy:',
      rel_tolerance = 1.0e-10)
f.add(re = 'Nuclear repulsion:',
      rel_tolerance = 1.0e-10)
f.add(re = 'Hartree-Fock total',
      rel_tolerance = 1.0e-10)
f.add(re = 'MP2 second order energy',
      rel_tolerance = 1.0e-10)


# Molecular gradients (Low numbers, so difficult to test)
#ADJUST
f.add(from_re = 'Molecular gradient \(au\)',
      num_lines    = 6,
      abs_tolerance = 1.0e-5)

# Molecular hessians (Low numbers, so difficult to test)
#ADJUST
f.add(from_re = 'Molecular Hessian \(au\)',
      num_lines    = 35,
      abs_tolerance = 1.0e-5)

# Dipole moment 
f.add(from_re = 'Dipole moment components',
      num_lines    = 5,
      mask = [3],
      rel_tolerance = 1.0e-5)

f.add(re = 'bond distance:',
      rel_tolerance = 1.0e-6)
f.add(re = 'bond angle:',
      rel_tolerance = 1.0e-5)
f.add(re = 'Norm of molecular gradient:',
      rel_tolerance = 1.0e-4)
f.add(re = 'Energy at current point:',
      rel_tolerance = 1.0e-11)
f.add(re = 'Geometry optimization has converged\.',
      rel_tolerance = 1.0e-6)

# Symmetry
f.add(re = 'Number of coordinates in each symmetry:',
      rel_tolerance = 1.0e-6)
f.add(re = 'Number of orbitals in each symmetry:',
      rel_tolerance = 1.0e-6)


test.run(['walk_polar2.dal'], ['o2_aug-cc-pvdz.mol'], {'out': f})

sys.exit(test.return_code)
