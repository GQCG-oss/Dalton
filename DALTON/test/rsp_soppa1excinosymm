#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > rsp_soppa1excinosymm.info <<'%EOF%'
   rsp_soppa1excinosymm
   --------------------
   Molecule:         H2O
   Wave Function:    MP2 (SOPPA) / cc-pVDZ
   Test Purpose:     Singlet excitation energies. No symmetry
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > rsp_soppa1excinosymm.mol <<'%EOF%'
BASIS
cc-pVDZ
SOPPA calculation of singlet excitation energies. No symmetry

    2    0
        8.    1
O     0.0 -0.2249058930 0.0
        1.    2
H     1.45235 0.899623 0.0
H    -1.45235 0.899623 0.0
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > rsp_soppa1excinosymm.dal <<'%EOF%'
**DALTON INPUT
.RUN RESPONSE
**WAVE FUNCTION
.HF
.MP2
**RESPONSE
.SOPPA
*LINEAR
.SINGLE
.DIPLEN
.ROOTS
 4
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >rsp_soppa1excinosymm.check
cat >>rsp_soppa1excinosymm.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a -i"
else
   GREP="egrep -i"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi

# Basis set
CRIT1=`$GREP "O * 1 * 8\.0000 * 26 * 14 * \[9s4p1d\|3s2p1d\]" $log | wc -l`
CRIT2=`$GREP "H * 2 * 1\.0000 * 7 * 5 * \[4s1p\|2s1p\]" $log | wc -l`
CRIT3=`$GREP "total\: * 3 * 10\.0000 * 40 * 24" $log | wc -l`
CRIT4=`$GREP "Spherical harmonic basis used\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[1]=4
ERROR[1]="BASIS SET NOT READ CORRECTLY"

# Geometry
CRIT1=`$GREP "Total number of coordinates\: * 9" $log | wc -l`
CRIT2=`$GREP "1 * x * (0| )\.0000000000" $log | wc -l`
CRIT3=`$GREP "2 * y * (\-0|\-)\.2249058930" $log | wc -l`
CRIT4=`$GREP "3 * z * (0| )\.0000000000" $log | wc -l`
CRIT5=`$GREP "4 * x * 1\.4523500000" $log | wc -l`
CRIT6=`$GREP "5 * y * (0| )\.8996230000" $log | wc -l`
CRIT7=`$GREP "6 * z * (0| )\.0000000000" $log | wc -l`
CRIT8=`$GREP "7 * x * \-1\.4523500000" $log | wc -l`
CRIT9=`$GREP "8 * y * (0| )\.8996230000" $log | wc -l`
CRIT10=`$GREP "9 * z * (0| )\.0000000000" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10`
CTRL[2]=10
ERROR[2]="GEOMETRY NOT READ CORRECTLY"

# Energies
CRIT1=`$GREP "Hartree\-Fock total energy *\: * \-76\.025681483" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy *\: * \-76\.2306668" $log | wc -l`
TEST[3]=`expr	$CRIT1 \+ $CRIT2`
CTRL[3]=2
ERROR[3]="ENERGIES NOT CORRECT"

# Response setup
CRIT1=`$GREP "4 Excitation energies are calculated for symmetry no\. * 1" $log | wc -l`
CRIT2=`$GREP "3 property residues are calculated with labels\:" $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2`
CTRL[4]=2
ERROR[4]="RESPONSE CALCULATION NOT SET UP CORRECTLY"

# Transition moments
CRIT1=`$GREP "\@ *STATE NO\: * 1 \*TRANSITION MOMENT\: * (\-| )[0-9]\.[0-9]......[0-9](D|E)\-1[4-9] \*ENERGY\(eV\)\: * 7\.75445.[0-9]" $log | wc -l`
CRIT2=`$GREP "\@ *STATE NO\: * 2 \*TRANSITION MOMENT\: * (\-| )[0-9]\.[0-9]......[0-9](D|E)\-1[4-9] \*ENERGY\(eV\)\: * 9\.77784.[0-9]" $log | wc -l`
CRIT3=`$GREP "\@ *STATE NO\: * 3 \*TRANSITION MOMENT\: (\-| )[0-9]\.[0-9]......[0-9](D|E)\-1[3-9] \*ENERGY\(eV\)\: * 10\.3953.[0-9]" $log | wc -l`
CRIT4=`$GREP "\@ *STATE NO\: * 4 \*TRANSITION MOMENT\: (\-0| \-| 0|  )\.500616.. * \*ENERGY\(eV\)\: * 12\.4652.[0-9]" $log | wc -l`
CRIT5=`$GREP "\@ *STATE NO\: * 3 \*TRANSITION MOMENT\: (\-0| \-| 0|  )\.611592(8|9). * \*ENERGY\(eV\)\: * 10\.3953.[0-9]" $log | wc -l`
CRIT6=`$GREP "\@ *STATE NO\: * 4 \*TRANSITION MOMENT\: ( |\-)[0-9]\.[0-9]......[0-9](D|E)\-1[4-9] \*ENERGY\(eV\)\: * 12\.4652.[0-9]" $log | wc -l`
CRIT7=`$GREP "\@ *STATE NO\: * 1 \*TRANSITION MOMENT\: * (\-0| \-| 0|  )\.362459.. * \*ENERGY\(eV\)\: * 7\.75445.[0-9]" $log | wc -l`
TEST[5]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7`
CTRL[5]=12
ERROR[5]="TRANSITION MOMENTS NOT CORRECT"

# State 1
CRIT1=`$GREP "\@ *Excited state no\: * 1" $log | wc -l`
CRIT2=`$GREP "\@ *Excitation energy \: * 0*\.2849708. * au" $log | wc -l`
CRIT3=`$GREP "\@ *Total energy \: * \-75\.740711 * au" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.26 \%" $log | wc -l`
CRIT5=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.74 \%" $log | wc -l`
CRIT6=`$GREP "\@ *Oscillator strength \(LENGTH\) * \: * 2\.4959(0|1)...(D|E)\-02" $log | wc -l`
CRIT7=`$GREP "Transition moment.* \: *\-*0*\.362459" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7`
CTRL[6]=7
ERROR[6]="STATE 1 NOT CORRECT"

# State 2
CRIT1=`$GREP "\@ *Excited state no\: * 2" $log | wc -l`
CRIT2=`$GREP "\@ *Excitation energy \: * 0*\.359329.. * au" $log | wc -l`
CRIT3=`$GREP "\@ *Total energy \: * \-75\.666352 * au" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.51 \%" $log | wc -l`
CRIT5=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.49 \%" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5`
CTRL[7]=5
ERROR[7]="STATE 2 NOT CORRECT"

# State 3
CRIT1=`$GREP "\@ *Excited state no\: * 3" $log | wc -l`
CRIT2=`$GREP "\@ *Excitation energy \: * 0*\.382022.. * au" $log | wc -l`
CRIT3=`$GREP "\@ *Total energy \: * \-75\.643659 * au" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.22 \%" $log | wc -l`
CRIT5=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.78 \%" $log | wc -l`
CRIT6=`$GREP "\@ *Oscillator strength \(LENGTH\) * \: * 9\.5262(4|5)...(D|E)\-02" $log | wc -l`
CRIT7=`$GREP "Transition moment.* \: *\-*0*\.611592" $log | wc -l`
TEST[8]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7`
CTRL[8]=7
ERROR[8]="STATE 3 NOT CORRECT"

# State 4
CRIT1=`$GREP "\@ *Excited state no\: * 4" $log | wc -l`
CRIT2=`$GREP "\@ *Excitation energy \: * 0*\.458087.. * au" $log | wc -l`
CRIT3=`$GREP "\@ *Total energy \: * \-75\.567594 * au" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.54 \%" $log | wc -l`
CRIT5=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.46 \%" $log | wc -l`
CRIT6=`$GREP "\@ *Oscillator strength \(LENGTH\) * \: * 7\.6536(4|5)...(D|E)\-02" $log | wc -l`
CRIT7=`$GREP "Transition moment.* \: *\-*0*\.500616" $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7`
CTRL[9]=7
ERROR[9]="STATE 4 NOT CORRECT"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
