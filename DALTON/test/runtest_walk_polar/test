#!/usr/bin/env python

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from runtest_dalton import Filter, TestRun

test = TestRun(__file__, sys.argv)

f = Filter()

# HF energy (3 times)
f.add(string = 'Final HF energy',
      tolerance = 1.0e-10)

# Symmetry
f.add(string = 'Number of coordinates in each symmetry:')
f.add(string = 'Number of orbitals in each symmetry:')

# Relativistic corrections
f.add(from_string = 'Relativistic corrections',
      num_lines = 8,
      tolerance = 1.0e-8)

# Molecular gradients (Low numbers, so difficult to test)
#ADJUST
f.add(from_string = 'Molecular gradient (au)',
      num_lines    = 6,
      ignore_below = 1.0e-3,
      tolerance = 1.0e-4)

# Molecular hessians (Low numbers, so difficult to test)
#ADJUST
f.add(from_string = 'Molecular Hessian (au)',
      num_lines    = 60,
      ignore_below = 1.0e-3,
      tolerance = 1.0e-4)

# Dipole moment 
f.add(from_string = 'Dipole moment components',
      num_lines    = 5,
      mask = [3],
      tolerance = 1.0e-5)

# Dipole moment gradient
f.add(from_string = 'Dipole moment gradient',
      num_lines    = 40,
      tolerance = 1.0e-5)

# Geometry optimization converged
f.add(string = 'Change in energy since start of walk',
      tolerance = 1.0e-6)
f.add(string = 'Geometry optimization has converged.')


# Cioslowski charges
f.add(from_string = 'APT Population Analysis',
      num_lines    = 10,
      tolerance = 1.0e-4)


# Static polarizabilities
f.add(from_string = 'Static polarizabilities (au)',
      num_lines    = 8,
      ignore_below = 1.0e-5,
      tolerance = 1.0e-6)

# Frequency dependent polarizabilities
f.add(from_string = 'Frequency dependent polarizabilities',
      num_lines    = 35,
      ignore_below = 1.0e-5,
      tolerance = 1.0e-6)

# Isotopic Masses
f.add(from_string = 'Isotopic Masses',
      num_lines    = 7,
      tolerance = 1.0e-6)

# Rotational constants
f.add(from_string = 'Rotational constants',
      num_lines    = 8,
      tolerance = 1.0e-8)

# Vibrational Frequencies and IR Intensities
f.add(from_string = 'Vibrational Frequencies and IR Intensities',
      num_lines    = 12,
      mask = [3,5],
      tolerance = 1.0e-5)

# Molecular Partition Functions
f.add(from_string = 'Molecular Partition Functions',
      num_lines    = 26,
      tolerance = 1.0e-5)

# Vibrational Polarizabilities
f.add(from_string = 'Vibrational Polarizabilities (au)',
      num_lines    = 8,
      tolerance = 1.0e-4)

# Linear response
f.add(string = 'Value of linear response',
      tolerance = 1.0e-5)

test.run(['walk_polar.dal'], ['h2o_6-311G_pol.mol'], {'out': f})

sys.exit(test.return_code)
