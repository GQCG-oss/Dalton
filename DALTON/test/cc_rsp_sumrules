#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > cc_rsp_sumrules.info <<'%EOF%'
   cc_rsp_sumrules
   ---------------
   Molecule:         HF in C2
   Wave Function:    CC2 / 6-31G**
   Test Purpose:     Finite difference on one-photon transition moments
%EOF%

#######################################################################
#  INTEGRAL INPUT
#######################################################################
cat > cc_rsp_sumrules.mol <<'%EOF%'
BASIS
aug-cc-pVQZ
Helium
test sum rules for CCS
    1    
        2.0   1    
He    0.0000000000000000  0.0000000000000000  0.0
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > cc_rsp_sumrules.dal <<'%EOF%'
**DALTON INPUT
.RUN WAVE FUNCTIONS
**INTEGRAL
.DIPLEN
**WAVE FUNCTIONS
.CC
*ORBITAL
.NOSUPSYM
*SCF INPUT 
.THRESH
 1.0d-12
*CC INPUT 
.CCS
.THRENR
 1.0d-10
.THRLEQ
 1.0d-9
*CCEXCI
.NCCEXCI
0 8 8 0 8 0 0 0
.THREXC
 1.0d-7
*CCLRSD
.DIPOLE
.SUMRULES
**END OF DALTON INPUT
%EOF%
#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >cc_rsp_sumrules.check
cat >>cc_rsp_sumrules.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# SCF energy:
CRIT1=`$GREP "Final * HF energy:" $log | $GREP "\-2.8615219(8|9)." | wc -l`
TEST[1]=`expr $CRIT1`
CTRL[1]=1
ERROR[1]="ENERGY NOT CORRECT"

# CCS excitation energies
CRIT1=`$GREP "\^1B.  \|    1   \|     ( |0)\.909344.  \|      24\.7445.  \|    199578\...  \|  100.00" $log | wc -l`
CRIT2=`$GREP "\^1B.  \|    2   \|     1\.913841.  \|      52\.0782.  \|    420039\....  \|  100.00" $log | wc -l`
CRIT5=`$GREP "\^1B.  \|    3   \|     3\.375005.  \|      91\.8385.  \|    740728\....  \|  100.00" $log | wc -l`
CRIT6=`$GREP "\^1B.  \|    4   \|     3\.375005.  \|      91\.8385.  \|    740728\....  \|  100.00" $log | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT5 \+ $CRIT6`
CTRL[2]=12
ERROR[2]="CCS EXCITATION ENERGIES NOT CORRECT"

# CCS onephoton transition moments:
CRIT1=`$GREP "\^1B.  \|    1   \|        ( |0)\.495733.      \|      ( |0)\.300528.       \|    X " $log | wc -l`
CRIT2=`$GREP "\^1B.  \|    2   \|        ( |0)\.247658.      \|      ( |0)\.315986.       \|    X " $log | wc -l`
CRIT3=`$GREP "\^1B.  \|    3   \|        ( |0)\.000000.      \|      ( |0)\.000000.       \|    \- " $log | wc -l`
CRIT5=`$GREP "\^1B.  \|    4   \|        ( |0)\.000000.      \|      ( |0)\.000000.       \|    \- " $log | wc -l`
TEST[3]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT5`
CTRL[3]=4
ERROR[3]="CCS ONEPHOTON TRANSITON MOMENTS NOT CORRECT"

# CCS Sum Rules
CRIT1=`$GREP "-6      1.61384          1.61384          1.61384          1.61384 " $log | wc -l`
CRIT2=`$GREP " 0      2.08922          2.08922          2.08922          2.08922 " $log | wc -l`
CRIT3=`$GREP " 2      19.5593          19.5593          19.5593          19.5593 " $log | wc -l`
TEST[4]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 `
CTRL[4]=3
ERROR[4]="CCS LENGTH SUM RULE NOT CORRECT



PASSED=1
for i in 1 2 3 4
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi                
%EOF%
#######################################################################
