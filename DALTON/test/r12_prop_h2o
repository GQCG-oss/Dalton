#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > r12_prop_h2o.info <<'%EOF%'
   r12_prop_h2o
   ----------
   Molecule:         H2O
   Wave Function:    MP2-R12 / AhlrichsVDZ AhlrichsVTZ
   Test Purpose:     Check R12 Dipole moment with symmetry
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > r12_prop_h2o.mol <<'%EOF%'
BASIS
Ahlrichs-VDZ Ahlrichs-VTZ
H2O

    4    2  X  Y
 1      8.    1
O       .000000000000000    .000000000000000  0.000000000000000       *
 1      1.    1
H      1.427450200000000    .000000000000000   1.110746000000000       *
 2      8.    1
O       .000000000000000    .000000000000000  0.000000000000000       *
 2      1.    1
H      1.427450200000000    .000000000000000   1.110746000000000       *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > r12_prop_h2o.dal <<'%EOF%'
**DALTON
.DIRECT
.RUN WAVE FUNCTION
**INTEGRAL
.DIPLEN
.R12
**WAVE FUNCTION
.CC
*SCF INPUT
.THRESH
 1.0D-10
*ORBITAL INPUT
.MOSTART
 H1DIAG
*CC INP
.MP2
.PRINT
 20
.THRENR
1.0D-10
.THRLEQ
1.0D-07
*R12
.NO 2
.R12XXL
.R12PRP
.NO RXR
*CCFOP
.DIPMOM
**END OF DALTON INPUT
%EOF%

#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >r12_prop_h2o.check
cat >>r12_prop_h2o.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

if $GREP -q "not implemented for parallel calculations" $log; then
   echo "TEST ENDED AS EXPECTED"
   exit 0
fi

# ?
CRIT1=`$GREP "Electronic dipole moment \(au\)\: * (0| )\.000000000( |0E\+00) * (0| )\.000000000( |0E\+00) * \-1\.106791823" $log | wc -l`
TEST[1]=`expr   $CRIT1`
CTRL[1]=1
ERROR[1]="ELECTRONIC DIPOLEMOMENT(APPROXIMATION A) NOT CORRECT"

# ?
CRIT1=`$GREP "Electronic dipole moment \(au\)\: * (0| )\.000000000( |0E\+00) * (0| )\.000000000( |0E\+00) * \-1\.059744837" $log | wc -l`
TEST[2]=`expr   $CRIT1`
CTRL[2]=1
ERROR[2]="ELECTRONIC DIPOLEMOMENT(APPROXIMATION A') NOT CORRECT"

# ?
CRIT1=`$GREP "Electronic dipole moment \(au\)\: * (0| )\.000000000( |0E\+00) * (0| )\.000000000( |0E\+00) * \-1\.208972302" $log | wc -l`
TEST[3]=`expr   $CRIT1`
CTRL[3]=1
ERROR[3]="ELECTRONIC DIPOLEMOMENT(APPROXIMATION B) NOT CORRECT"



PASSED=1
for i in 1 2 3 
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################

