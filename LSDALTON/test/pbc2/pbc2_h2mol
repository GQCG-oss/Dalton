#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > pbc2_h2STO6G.info <<'%EOF%'
   pbc2_h2SCF_iter1
   -------------
   Molecule:         H2
   Wave Function:    HF/4-31G,Ahlrichs-Coulomb-Fit
   Test Purpose:     Check HOMO/LUMO at first SCF iteration
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > pbc2_h2STO6G.mol <<'%EOF%'
BASIS
H-431G Aux=Ahlrichs-Coulomb-Fit
LDA molecular hessian without symmetry
Ethane LDA molecular hessian without symmetry
Atomtypes=1 Charge=0 Nosymmetry PBC
        1.    2
H     4.6000000000      0.0000000000     0.0000000000
H     -4.6000000000      0.0000000000     0.0000000000
a1 = 100.0 0.0 0.0 active
a2 = 0.0 10.0 0.0 inactive
a3 = 0.0 0.0 10.0 inactive
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > pbc2_h2STO6G.dal <<'%EOF%'
**GENERAL
.NOGCBASIS
**INTEGRALS
.THRESH
1.0D-18
.NOLINK
.NO PS
.NO CS
**WAVE FUNCTIONS
.HF
*DENSOPT
.START
H1DIAG
**PBC
.STARTDENS
3
.MLMAX
15
.DIIS
25 7 1.0E-8
.LATTICE
10 3
.NFIELD
6
.NDENSMATCUTOFF
6
.RECLAT
5 1 1
*END OF INPUT
%EOF%

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >pbc2_h2STO6G.check
cat >> pbc2_h2STO6G.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# ENERGY test
CRIT1=`$GREP "numbers of lattice vectors * 21" $log | wc -l`
TEST[1]=`expr  $CRIT1`
CTRL[1]=1
ERROR[1]="Number of lattice vectors not correct -"

CRIT1=`$GREP "number of basis * 4" $log | wc -l`
TEST[2]=`expr  $CRIT1`
CTRL[2]=1
ERROR[2]="Basis not correct"

# Test HOMO ENERGY
CRIT1=`$GREP "final E\(HOMO\) \= * \-0\.238941" $log | wc -l`
TEST[3]=`expr  $CRIT1`
CTRL[3]=1
ERROR[3]="HOMO energy not correct -"

# Test LUMO energy
CRIT1=`$GREP "final E\(LUMO\) \= * 1\.177417" $log | wc -l`
TEST[4]=`expr  $CRIT1`
CTRL[4]=1
ERROR[4]="LUMO energy at first iteration not correct -"

# Memory test
CRIT1=`$GREP "Allocated memory \(TOTAL\): * 0 byte" $log | wc -l`
TEST[5]=`expr  $CRIT1`
CTRL[5]=1
ERROR[5]="Memory leak -"

PASSED=1
for i in 1 2 3 4 5
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
      echo ${ERROR[i]}
      PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
   echo TEST ENDED PROPERLY
   exit 0
else
   echo THERE IS A PROBLEM
   exit 1
fi

%EOF%
#######################################################################
