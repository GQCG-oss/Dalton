#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > decmp2_energy_FO.info <<'%EOF%'
   DEC-MP2 energies for full DEC
   -----------------------------
   Molecule:         ethane
   Wave Function:    MP2 / 3-21G
   Test Purpose:     Test DEC calculation using fragment adapted orbitals (Kasper K)
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > decmp2_energy_FO.mol <<'%EOF%'
BASIS
3-21G
Ethane

Atomtypes=2 Charge=0 Nosymmetry Angstrom
Charge=1.0 Atoms=6
H         -4.76577        1.91343        0.96555
H         -4.76581        0.14249        0.45690
H         -4.76577        1.12214       -1.02239
H         -2.48498        0.99665        1.02239
H         -2.48495        1.97630       -0.45690
H         -2.48498        0.20536       -0.56555
Charge=6.0 Atoms=2
C         -4.38136        1.05954       -0.00007
C         -2.86939        1.05925        0.00007
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > decmp2_energy_FO.dal <<'%EOF%'
**WAVE FUNCTIONS
.HF
*DENSOPT
.ARH DAVID
.START
TRILEVEL
.CONVDYN
TIGHT
**DEC
.FrozenCore
.FragmentAdapted
.MEMORY
2.0
*END OF INPUT
%EOF%
#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >decmp2_energy_FO.check
cat >>decmp2_energy_FO.check <<'%EOF%'

log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# HF ENERGY 
CRIT1=`$GREP "Final HF energy: * \-78\.75744888" $log | wc -l`
TEST[1]=`expr   $CRIT1`
CTRL[1]=1
ERROR[1]="HF ENERGY NOT CORRECT -"

# Total correlation energy
CRIT1=`$GREP "Correlation energy  \: * \-0\.1923" $log | wc -l`
TEST[2]=`expr   $CRIT1`
CTRL[2]=1
ERROR[2]="Total correlation energy is not correct"

# Memory test for total memory                                             
CRIT1=`$GREP "Allocated memory \(TOTAL\): * 0 byte" $log | wc -l`         
TEST[3]=`expr  $CRIT1`                                                    
CTRL[3]=1                                                                 
ERROR[3]="Memory leak -"
                                                                          
# MPI Memory test
CRIT1=`$GREP "[0-9][0-9] byte  \- Should be zero \- otherwise a leakage is present" $log | wc -l`
TEST[4]=`expr  $CRIT1`
CTRL[4]=0
ERROR[4]="MPI Memory leak -"

PASSED=1
for i in 1 2 3 4
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%




