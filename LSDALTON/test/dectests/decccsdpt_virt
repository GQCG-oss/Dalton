#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > decccsdpt_virt.info <<'%EOF%'
   DEC-CCSD(T) energy using virtual partitioning
   --------------------------------------------------
   Molecule:         Ethane
   Wave Function:    CCSD(T) / 6-31G
   Test Purpose:     Test virtual partitioning and DEC-CCSD(T) 
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > decccsdpt_virt.mol <<'%EOF%'
BASIS
3-21G
This molecule should give orbital distribution with
0 virtual orbitals assigned to the 1. and 4. He atom (and 0 occ on 4.)
Atomtypes=1 Charge=0 Nosymmetry Angstrom
Charge=2.0 Atoms=8
He   0.00000000     0.00000000     0.00000000     
He   0.00000000     0.00000000     0.25000000     
He   0.00000000     0.00000000     0.50000000     
He   0.00000000     0.00000000     1.00000000     
He   0.00000000     0.00000000     1.50000000     
He   0.00000000     0.00000000     2.00000000     
He   0.00000000     0.00000000     3.00000000     
He   0.00000000     0.00000000     4.00000000     
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > decccsdpt_virt.dal <<'%EOF%'
**WAVE FUNCTIONS
.HF
*DENSOPT
.ARH
.START
TRILEVEL
.NOATOMSTART
.CONVTHR
1.0d-5
**INFO
.DEBUG_MPI_MEM
**DEC
.FRAGEXPMODEL
.CCSD
.FRAGREDMODEL
.CCSD
.ONLYVIRTPART
.FOT
3
.CCSD(T)
.ccThr
1.0d-5
.MEMORY
2.0
*END OF INPUT
%EOF%
#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL > decccsdpt_virt.check
cat >> decccsdpt_virt.check <<'%EOF%'

log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# HF ENERGY
CRIT1=`$GREP "Final HF energy: * -8\.8728715" $log | wc -l`
TEST[1]=`expr   $CRIT1`
CTRL[1]=1
ERROR[1]="HF energy not correct"

# CCSD ENERGY (unocc. part. scheme)
CRIT1=`$GREP "CCSD virtual  correlation energy : * \-0\.1428" $log | wc -l`
TEST[2]=`expr   $CRIT1`
CTRL[2]=1
ERROR[2]="CCSD correlation energy (unocc. part. scheme) is not correct"

# E[4] contribution to (T) energy correction (unocc. part. scheme)
CRIT1=`$GREP "\(T\) virtual  4th order energy * : * \-0\.1188" $log | wc -l`
TEST[3]=`expr   $CRIT1`
CTRL[3]=1
ERROR[3]="4th-order contribution to (T) energy correction (unocc. part. scheme) is not correct"

# E[5] contribution to (T) energy correction (unocc. part. scheme)
CRIT1=`$GREP "\(T\) virtual  5th order energy * : * 0\.1251" $log | wc -l`
TEST[4]=`expr   $CRIT1`
CTRL[4]=1
ERROR[4]="5th-order contribution to (T) energy correction (unocc. part. scheme) is not correct"

# Total CCSD(T) correlation energy (unocc. part. scheme)
CRIT1=`$GREP "Total CCSD\(T\) virtual  correlation energy : * \-0\.1440" $log | wc -l`
TEST[5]=`expr   $CRIT1`
CTRL[5]=1
ERROR[5]="Total CCSD(T) correlation energy (unocc. part. scheme) is not correct"

# Memory test for total memory                                             
CRIT1=`$GREP "Allocated memory \(TOTAL\): * 0 byte" $log | wc -l`         
TEST[6]=`expr  $CRIT1`                                                    
CTRL[6]=1                                                                 
ERROR[6]="Memory leak present"

# Memory test for array3
CRIT1=`$GREP "Memory in use for array3 * \: * 0.000 * GB" $log | wc -l`   
TEST[7]=`expr  $CRIT1`                                                    
CTRL[7]=1                                                                 
ERROR[7]="Memory leak for array3"

# Memory test for array4
CRIT1=`$GREP "Memory in use for array4 * \: * 0.000 * GB" $log | wc -l`   
TEST[8]=`expr  $CRIT1`                                                    
CTRL[8]=1                                                                 
ERROR[8]="Memory leak for array4" 

PASSED=1
for i in 1 2 3 4 5 6 7 8
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%




