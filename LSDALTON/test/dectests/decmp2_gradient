#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > decmp2_gradient.info <<'%EOF%'
   DEC-MP2 gradient for frozen core approx
   ---------------------------------------
   Molecule:         3 LiH molecules
   Wave Function:    MP2 / STO-3G
   Test Purpose:     Test MP2 gradient/frozen core using full machinery of the DEC scheme (KK)
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > decmp2_gradient.mol <<'%EOF%'
BASIS                                                   
STO-3G
                                                        
                                                        
Atomtypes=2 NoSymmetry
Charge=3.0 Atoms=3
Li          0.000000      0.0000000    0.0000000
Li          6.000000      0.0000000    2.0000000
Li          12.000000     0.0000000    0.0000000
Charge=1.0 Atoms=3
H          0.000000      2.0000000    0.0000000
H          6.000000      0.0000000    0.0000000
H          12.000000     0.0000000    2.0000000
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > decmp2_gradient.dal <<'%EOF%'
**WAVE FUNCTIONS
.HF
*DENSOPT
.ARH
.START
TRILEVEL
.CONVDYN
TIGHT
$INFO
DEBUG_MPI_MEM
$END INFO
**DEC
.GRADIENT
.FOT
5
.FROZENCORE
*END OF INPUT
%EOF%
#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >decmp2_gradient.check
cat >>decmp2_gradient.check <<'%EOF%'

log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# TOTAL MP2 ENERGY
CRIT1=`$GREP "Total MP2 energy * \: * \-23.4313" $log | wc -l`
TEST[1]=`expr   $CRIT1`
CTRL[1]=1
ERROR[1]="Total MP2 energy is not correct"

# Hartree-Fock contribution to MP2 energy
CRIT1=`$GREP "Hartree-Fock energy \: * \-23.39815[7-8]" $log | wc -l`
TEST[2]=`expr   $CRIT1`
CTRL[2]=1
ERROR[2]="Hartree-Fock energy is not correct"

# MP2 correlation energy
CRIT1=`$GREP "Correlation energy  \: * \-0.0331" $log | wc -l`
TEST[3]=`expr   $CRIT1`
CTRL[3]=1
ERROR[3]="MP2 correlation energy is not correct"

# MP2 gradient for first Li atom
CRIT1=`$GREP "Li * \-0.005[0-9][0-9][0-9][0-9][0-9][0-9][0-9] * 0.207[0-9][0-9][0-9][0-9][0-9][0-9][0-9] * \0.005[0-9][0-9][0-9][0-9][0-9][0-9][0-9]" $log | wc -l`
TEST[4]=`expr   $CRIT1`
CTRL[4]=1
ERROR[4]="MP2 gradient for Li atom is not correct"

# MP2 gradient for first H atom
CRIT1=`$GREP "H * 0.004[0-9][0-9][0-9][0-9][0-9][0-9][0-9] * \-0.209[0-9][0-9][0-9][0-9][0-9][0-9][0-9] * \-0.005[0-9][0-9][0-9][0-9][0-9][0-9][0-9]" $log | wc -l`
TEST[5]=`expr   $CRIT1`
CTRL[5]=1
ERROR[5]="MP2 gradient for H atom is not correct"

# Memory test for total memory                                             
CRIT1=`$GREP "Allocated memory \(TOTAL\): * 0 byte" $log | wc -l`         
TEST[6]=`expr  $CRIT1`                                                    
CTRL[6]=1                                                                 
ERROR[6]="Memory leak -"

# Memory test for array4
CRIT1=`$GREP "Memory in use for array4 * \: * 0.000 * GB" $log | wc -l`
TEST[7]=`expr  $CRIT1`
CTRL[7]=1
ERROR[7]="Memory leak for array4 -"

# MPI Memory test
CRIT1=`$GREP "[0-9][0-9] byte  \- Should be zero \- otherwise a leakage is present" $log | wc -l`
TEST[8]=`expr  $CRIT1`
CTRL[8]=0
ERROR[8]="MPI Memory leak -"

PASSED=1
for i in 1 2 3 4 5 6 7 8
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%




