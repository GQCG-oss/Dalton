#!/usr/bin/env python

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..','..','tools',))

from runtest_lsdalton import Filter, TestRun
from output_parser import *

test = TestRun(__file__, sys.argv)

# Input files:
# ============
DAL = "fullccsdpt_print"
MOL = "H2O"

f = Filter()
f.add(string = 'Final HF energy',
              rel_tolerance = 1.0e-6)
f.add(string = 'Nuclear repulsion',
              rel_tolerance = 1.0e-6)

f.add(from_string = 'Print frag. energies',
              to_string   = 'ABC partitioning')

f.add(from_string = 'Print single and pair fragment energies',
              to_string   = 'CC Memory summary',
                    abs_tolerance = 1.0e-6)

# to ignore sign set                      ignore_sign = True   
# to ignore numbers below 1.0e-4 set      ignore_below = 1.0e-4

f.add(string = 'Allocated memory (TOTAL)')

f.add(string = 'Allocated MPI memory a cross all slaves')

test.run([DAL+'.dal'], [MOL+'.mol'], {'out': f})


name = "_".join([DAL,MOL])

#---------------------------------------------
# Test LSDalton Output parser script
fullccsdpt = lsoutput(name+'.out')

ccinfo = open(name+'.cc','w') 
fullccsdpt.ccinfo.print_cc_info(ccinfo)
ccinfo.close()

decinfo = open(name+'.dec','w') 
fullccsdpt.decinfo.print_dec_info(decinfo)
decinfo.close()

f2 = Filter()
f2.add(from_string = 'Correlation energy',
       num_lines = 6,
       abs_tolerance = 1.0e-6)

f3 = Filter()
f3.add(from_string = 'CCSD    occupied correlation energy',
       num_lines = 29,
       abs_tolerance = 1.0e-6)

test.skip_run = True

test.run([DAL+'.dal'], [MOL+'.mol'], {'cc': f2})
test.run([DAL+'.dal'], [MOL+'.mol'], {'dec': f3})
#---------------------------------------------

sys.exit(test.return_code)


