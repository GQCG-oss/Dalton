#!/usr/bin/env python
#
#   DEC-CC2 energy for full molecule
#   --------------------------------
#   Molecule:         HF
#   Wave Function:    CC2 / cc-pVDZ
#   Test Purpose:     Test full molecule CC2 energy using DEC program (Kasper K)
#                     also test output_parser.py

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..','..','tools',))

from runtest_lsdalton import Filter, TestRun
from output_parser import *

test = TestRun(__file__, sys.argv)

# Input files:
# ============
DAL = "fullcc2"
MOL = "FH"

f1 = Filter()
f1.add(string = 'Final HF energy',
      rel_tolerance = 1.0e-8)
f1.add(string = 'Nuclear repulsion',
      rel_tolerance = 1.0e-8)

f1.add(string = 'Correlation energy',
      rel_tolerance = 1.0e-8)

# to ignore sign set                      ignore_sign = True   
# to ignore numbers below 1.0e-4 set      ignore_below = 1.0e-4

f1.add(string = 'Allocated memory (TOTAL)')

f1.add(string = 'Allocated MPI memory a cross all slaves')

f1.add(string = 'Memory in use for array4',
      rel_tolerance = 1.0e-9)

test.run([DAL+'.dal'], [MOL+'.mol'], {'out': f1})

name = ('_').join([DAL,MOL])

#---------------------------------------------
# Test LSDalton Output parser script

fullcc2 = lsoutput(name+'.out')

ccinfo = open(name+'.cc','w')
fullcc2.ccinfo.print_cc_info(ccinfo)
ccinfo.close()

f2 = Filter()

f2.add(from_string = 'Correlation energy',
       num_lines = 6,
       abs_tolerance = 1.0e-7)

test.skip_run = True

test.run([DAL+'.dal'], [MOL+'.mol'], {'cc': f2})
#---------------------------------------------

sys.exit(test.return_code)


