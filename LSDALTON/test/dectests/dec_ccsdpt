#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > dec_ccsdpt.info <<'%EOF%'
   DEC-CCSD(T) energy for simulated superfragment calculation
   ----------------------------------------------------------
   Molecule:         Ethane
   Wave Function:    CCSD(T) / 6-31G
   Test Purpose:     Test simulated superfragment DEC-CCSD(T) energy (Janus J. Eriksen)
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > dec_ccsdpt.mol <<'%EOF%'
BASIS
6-31G


Atomtypes=2 Charge=0 Nosymmetry Angstrom
Charge=6.0 Atoms=2
C          0.65790       -0.00446        0.06398
C         -0.65783        0.00446       -0.06385
Charge=1.0 Atoms=4
H          1.16103        0.06607        1.02388
H          1.33519       -0.08301       -0.78143
H         -1.33549        0.08301        0.78127
H         -1.16080       -0.06606       -1.02386
%EOF%
#######################################################################
#  DALTON INPUT
#######################################################################
cat > dec_ccsdpt.dal <<'%EOF%'
**WAVE FUNCTIONS
.HF
*DENSOPT
.ARH
.NOGCBASIS
.START
TRILEVEL
.CONVTHR
1.0d-5
.LCM
# LOCALIZE USING ORBITAL VARIANCE, m=2 for occ and virt
.MLO
2 2
$INFO
DEBUG_MPI_MEM
$END INFO
**DEC
.CCSDsolver_par
.manual_batchsizes
19 19
.MPIsplit
0
.CCSD(T)
.ccThr
1.0d-6
.IncludeFullMolecule
.SimulateSF
.ReassignHatoms
*END OF INPUT
%EOF%
#######################################################################

 

#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL > dec_ccsdpt.check
cat >> dec_ccsdpt.check <<'%EOF%'

log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# HF ENERGY
CRIT1=`$GREP "Final HF energy: * \-78\.00374[8-9]" $log | wc -l`
TEST[1]=`expr   $CRIT1`
CTRL[1]=1
ERROR[1]="HF energy not correct"

# CCSD ENERGY (occ. part. scheme)
CRIT1=`$GREP "CCSD occupied correlation energy : * \-0\.20909[7-8]" $log | wc -l`
TEST[2]=`expr   $CRIT1`
CTRL[2]=1
ERROR[2]="CCSD correlation energy (occ. part. scheme) is not correct"

# CCSD ENERGY (unocc. part. scheme)
CRIT1=`$GREP "CCSD virtual  correlation energy : * \-0\.20909[7-8]" $log | wc -l`
TEST[3]=`expr   $CRIT1`
CTRL[3]=1
ERROR[3]="CCSD correlation energy (unocc. part. scheme) is not correct"

# E[4] contribution to (T) energy correction (occ. part. scheme)
CRIT1=`$GREP "\(T\) occupied 4th order energy * : * \-0\.54436[6-7]" $log | wc -l`
TEST[4]=`expr   $CRIT1`
CTRL[4]=1
ERROR[4]="4th-order contribution to (T) energy correction (occ. part. scheme) is not correct"

# E[4] contribution to (T) energy correction (unocc. part. scheme)
CRIT1=`$GREP "\(T\) virtual  4th order energy * : * \-0\.54436[6-7]" $log | wc -l`
TEST[5]=`expr   $CRIT1`
CTRL[5]=1
ERROR[5]="4th-order contribution to (T) energy correction (unocc. part. scheme) is not correct"

# E[5] contribution to (T) energy correction (occ. part. scheme)
CRIT1=`$GREP "\(T\) occupied 5th order energy * : * 0\.23709[5-6]" $log | wc -l`
TEST[6]=`expr   $CRIT1`
CTRL[6]=1
ERROR[6]="5th-order contribution to (T) energy correction (occ. part. scheme) is not correct"

# E[5] contribution to (T) energy correction (unocc. part. scheme)
CRIT1=`$GREP "\(T\) virtual  5th order energy * : * 0\.23709[5-6]" $log | wc -l`
TEST[7]=`expr   $CRIT1`
CTRL[7]=1
ERROR[7]="5th-order contribution to (T) energy correction (unocc. part. scheme) is not correct"

# Total CCSD(T) correlation energy (occ. part. scheme)
CRIT1=`$GREP "Total CCSD\(T\) occupied correlation energy : * \-0\.21430[4-5]" $log | wc -l`
TEST[8]=`expr   $CRIT1`
CTRL[8]=1
ERROR[8]="Total CCSD(T) correlation energy (occ. part. scheme) is not correct"

# Total CCSD(T) correlation energy (unocc. part. scheme)
CRIT1=`$GREP "Total CCSD\(T\) virtual  correlation energy : * \-0\.21430[4-5]" $log | wc -l`
TEST[9]=`expr   $CRIT1`
CTRL[9]=1
ERROR[9]="Total CCSD(T) correlation energy (unocc. part. scheme) is not correct"

# Memory test for total memory                                             
CRIT1=`$GREP "Allocated memory \(TOTAL\): * 0 byte" $log | wc -l`         
TEST[10]=`expr  $CRIT1`                                                    
CTRL[10]=1                                                                 
ERROR[10]="Memory leak present"

# Memory test for array3
CRIT1=`$GREP "Memory in use for array3 * \: * 0.000 * GB" $log | wc -l`   
TEST[11]=`expr  $CRIT1`                                                    
CTRL[11]=1                                                                 
ERROR[11]="Memory leak for array3"

# Memory test for array4
CRIT1=`$GREP "Memory in use for array4 * \: * 0.000 * GB" $log | wc -l`   
TEST[12]=`expr  $CRIT1`                                                    
CTRL[12]=1                                                                 
ERROR[12]="Memory leak for array4" 

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%




