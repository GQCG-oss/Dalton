#!/bin/bash

# Use in the test directory like: ./MakeRunTest linsca/linsca_admmQ

# it will generate the basic files 
# linsca/linsca_admmQ/linsca_admmQ.dal
# linsca/linsca_admmQ/linsca_admmQ.mol
# linsca/linsca_admmQ/result/linsca_admmQ_linsca_admmQ.out
# linsca/linsca_admmQ/test

# you need to modify the test directory yourself and test 
# then you need to "git add" and push

# The script assumes you have build directoy in the root directory 

echo "Processing file $1"
testcase=$1               #with the path. 
item=`basename $testcase` #without the path.
source $testcase
mv $testcase $testcase.old
mkdir $testcase
mv $item.mol $testcase/$item.mol
mv $item.dal $testcase/$item.dal


cat > $testcase/test <<'%EOF%'
#!/usr/bin/env python

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from runtest_lsdalton import Filter, TestRun

test = TestRun(__file__, sys.argv)

f = Filter()
f.add(string = 'Final HF energy',
      rel_tolerance = 1.0e-8)
f.add(string = 'Nuclear repulsion',
      rel_tolerance = 1.0e-8)

#f.add(string = 'Correlation energy',
#      rel_tolerance = 1.0e-8)

#f.add(from_string = 'Summary For Counter Poise Correction',
#      to_string   = 'Interaction Energy',
#      rel_tolerance = 1.0e-8)


# to ignore sign set                      ignore_sign = True   
# to ignore numbers below 1.0e-4 set      ignore_below = 1.0e-4

#f.add(string = 'Allocated memory (TOTAL)')

#f.add(string = 'Memory in use for array4',
#      rel_tolerance = 1.0e-9)

#test.run(['.dal'], ['.mol'], {'out': f})

sys.exit(test.return_code)

%EOF%

#cp ref/$item.ref $testcase/result/$item.out
cd $testcase

# Here we assume the location of the build directory to get the lsdalton. 
../../../../build/lsdalton -noarch $item.dal $item.mol
mkdir result
mv $item.out result/$item_$item.out
#
#git add $item.mol
#git add $item.dal
#git add test
#git add result/$item.out

