#!/bin/bash
#
# Shell script for configuring Makefile.config needed to build the LSDALTON
# quantum chemistry code. 
#
# It tries to determine what platform we are on (although allowing builds 
# for other platforms, as needed for crosscompiling), as well as detect any
# interesting mathematical libraries on the present computer.
#
#
# Known problems: The parallelization installation is rudimentary
#                 The checks for compilers and libraries hopefully works
#
# Written by K.Ruud, Dec-1 1996
# Revised 970401 hjaaj
# Linux support added 970414 by Konrad Hinsen.
# HP revisions 970505-ekd/Konrad Hinsen. Combined by kr 080597
# Updated for LSDALTON release, S. Host October 2010
#
# Check specific processor for optimization flags for linux machines 
# (uname -m) -mpentiumpro for i686, -mpentium for i586, and -m486 otherwise
# 990831-ekd
# More intelligent attempts at including pdpack files according to available
# machine libraries
#

# defaults section for quick config
do_quick_config=n
# separator for CPP defines, just a white space for most compilers
# with exception for xlf.
cppsep=' '

ECHO=printf

# set the target def 
set_parallel_def() {
    if [ "$1" = "mpi" ]; then
       $ECHO ERROR: $mesp is not implemented for this version of LSDALTON
       exit 1
       def='lsdalton_par.x'
    else
       $ECHO ERROR: $mesp is not implemented for this version of LSDALTON
       exit 1
       def='lsdalton_pvm.x'
    fi
}

# Read of yes/no answer, the output in standardized to 'y' or 'n'. /hjaaj
get_yes_or_no() {
    if test "$do_quick_config" = y; then
        answer="$2"
    else
        answer=
    fi
    while [ "$answer" != "y" -a "$answer" != "n" ]
    do
        if [ "$2" = "y" ]; then $ECHO "$1 [Y/n] "
      elif [ "$2" = "n" ]; then $ECHO "$1 [y/N] "
      else  $ECHO "$1 [y/n] "; fi
      
      read answer
      if [ "$answer" = "" ]; then answer="$2"; fi
#     standardize answer
      case $answer in
        y* | Y*) answer="y" ;;
        n* | N*) answer="n" ;;
      esac
    done
}
#
# Define backup function /hjaaj
#
backup () {
  if [ "$1" = "-v" ]; then ekko=1; shift
  else ekko=0;
  fi
  for i in $* ; do
     if [ -f "${i}" ]; then
        for j in 6 5 4 3 2 1 0 ; do
           jp=`expr $j + 1`
           if [ -f "${i}.${j}" ]; then
              [ $ekko -eq 1 ] && echo "Backup: renaming ${i}.${j} to ${i}.${jp}"
              mv -f "${i}.${j}" "${i}.${jp}"
           fi
        done
        if [ $ekko -eq 1 ]; then echo "Backup: renaming ${i} to ${i}.0"; fi
        mv -f "${i}" "${i}.0"
     fi
  done
}


if [ "$2" = "" ]; then pref=lsdalton; else pref="$2"; fi
def="$pref.x"

$ECHO '\n'
echo  '------------------------------------------------------------------------'
$ECHO '   Configuring the LSDALTON Makefile.config and "lsdalton" run script\n'
echo  '------------------------------------------------------------------------'
$ECHO '\n'
blas="false"
blas2="false"
blas3="false"
lapack="false"
opsys=`uname -s`
    $ECHO "   INFO: Operating system from 'uname -s' : $opsys\n"
if [ "${opsys:0:5}" = 'Linux' -o "${opsys:0:6}" = Darwin -o "${opsys:0:6}" = "CYGWIN" ]; then
    prc=`uname -m`
    $ECHO "   INFO: Processor type   from 'uname -m' : $prc\n\n"
fi

arclist='aix cygwin darwin linux'

#
# Attempting auto-configuration. The list of replies from uname should be
# extended!
#
if test x"$1" = x-q -o x"$1" = x--quick; then
   do_quick_config=y
   shift
fi

if [ -z "$1" ]; then
    case $opsys in
        AIX )     ARCH="-aix";;
        CYGWIN* ) ARCH="-cygwin";;
        Darwin )  ARCH="-darwin";;
        Linux|FreeBSD ) ARCH="-linux";;
        * ) $ECHO "Error: No architecture specified.\nPlease enter architecture on command line as 'configure -architecture'\n\nThe following architectures are allowed:\n    $arclist\n"
        exit 1;;
    esac
    $ECHO "No architecture specified, attempting auto-configuration:\n"
    get_yes_or_no "This appears to be a \"$ARCH\" architecture. Is this correct? " y
    if [ "$answer" = "n" ]; then
        $ECHO "\nPlease configure manually from command line: 'configure -architecture'\n\nThe following architectures are allowed:\n    $arclist\n"
        exit
    else
      $ECHO "\n"
    fi
else
    ARCH="$1"
fi
$ECHO "   Installing LSDALTON on a $ARCH computer\n\n"
case $ARCH in
    -aix|-rs6000 ) WHICH="rs6000";;
    -linux ) WHICH="linux";;
    -darwin ) WHICH="darwin";;  
    -?|-help ) $ECHO " Run from command line: 'configure -architecture'\n\n The following architectures are allowed:\n    $arclist\n"
        exit;;
    * ) $ECHO "$1 is an unsupported architecture. Choose one of\n   $arclist\n\n NOTE: The syntax is 'configure -architecture'\n\n"
        exit;;
esac
#
# Now we try to check the compiler and find some mathematical libraries. 
# I don't think I will find more than two possible libraries of interest, 
# thus define only two for each computer type.
# Check first local libraries (hoping they were installed there for a
# reason), then system-provided libraries.
dirlist="$DIRLIST /lib /usr/local/lib /usr/lib64 /usr/lib /usr/local/lib/ATLAS"

case $WHICH in
    rs6000)   liblist='libessl.a libblas.a'
	      complist='xlf f77 f90'
              compf90list='xlf90 f90'
              ccmplist='xlc cc';;
    linux)    liblist='libacml.a libmkl_p3.a libatlas.a libblas.a'
              complist='ifort ifc pgf77 gfortran'
              compf90list='ifort ifc pgf90 gfortran'
              ccmplist='icc ecc pgcc gcc';;
    darwin)   liblist='libatlas.a libblas.a'
              complist='gfortran'
              compf90list='gfortran'
              ccmplist='gcc';;
esac
#
if [ $WHICH = "linux" ]; then
    if  which ifort 1>/dev/null 2>&1; then
      mkllib=`locate libmkl_p3.a`
      if [ "$mkllib" != "" ]; then
        mkllib=`dirname $mkllib`
      fi
      dirlist="$mkllib $dirlist"
    elif [ ! -z $PGI ]; then
      if [ $PGI != "" ]; then
          dirlist="$PGI/linux86/lib $PGI/linux86-64/*/lib $dirlist"
            echo "dirlist=$dirlist"
      fi
    fi
fi
#
# For AIX systems we need to know which version of the operating system we
# have.
#
opsys=
if [ $WHICH = 'rs6000' ]; then
   opsys=`uname -v`
fi
#
# Parallel LSDalton?
#
#
#
mesp='dummy'
#get_yes_or_no 'Do you want to install the program in a parallel MPI version?' n
#if [ "$answer" = "y" ]; then
##
## Determine message passing protocol to be used
##
#
#    mesp=
#    while [ "$mesp" != "mpi" -a "$mesp" != "pvm" ]
#    do
#        $ECHO 'Do you want to use "mpi" or "pvm" for message passing? '
#        read mesp
#    done
#    parinc=
#    parlib=
#    parlibp=
#    parnod=
#    parnodp=
##
#    if [ "$mesp" = "mpi" ]; then
#        $ECHO "\n   WARNING: Makefiles for mpi architecture are difficult to guess"
#        $ECHO "   Please compare the generated Makefile.config with local documentation."
##
## The only computer I can think of with a separate compiler for parallel
## MPI code is IBMs xlf
##
#        if [ "$WHICH" = "rs6000" ]; then
#            ccmplist='mpcc xlc cc'
#            parlib='no'
#        else
#            parlib='yes'
#        fi
##
#        pardir=dirlist
#        incdir='/usr/include /usr/local/include /local/include'
#
##
## MPI settings, first we do the mpi-library
##
#        if [ $parlib = 'yes' ]; then
#          parlib=
#          tmplib='libmpi.a libmpi.so'
#          incfile='mpif.h'
#          for testdir in $pardir; do
#             for testlib in $tmplib; do
#                if test -f $testdir/$testlib; then
#                  parlib='-lmpi'
#                  parlibp=-L$testdir
#                  break
#                fi
#             done
#             test -n "$parlib" && break
#          done
##
## Now we try to find an include directory
##
#          for testdir in $incdir; do
#              if test -f $testdir/$incfile; then
#                parinc=$testdir
#                break
#              fi
#          done
#        elif [ "$parlib" = "no" ]; then
#          parlib=
#        fi
##
## PVM settings, we need two PVM library files
##
#    elif [ $mesp = 'pvm' ]; then
#      parinc='-I$(PVM_ROOT)/include'
#      parlibp='-L$(PVM_ROOT)/lib/$(PVM_ARCH)'
#      parlib='-lfpvm3 -lpvm3'
#      parnodp='$(HOME)/pvm3/bin/$(PVM_ARCH)'
#      parnod='node.x'
#    fi
#fi
#
# Parallel information finished setting
#
# No need to determine if F90 compiler should be used. It has to. 
# 
usef90="true" 
  
# 
# Test for the existence of F77 compiler 
# 

$ECHO "\n   Checking for Fortran 77 compiler ..." 
$ECHO   "   from this list: $complist \n\n" 
 
for comp in $complist; do 
    set dummy $comp; ac_word=$2 
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:" 
    for ac_dir in $PATH; do 
        test -z "$ac_dir" && ac_dir=. 
       if [ -f $ac_dir/$ac_word ]; then 
            get_yes_or_no "   $comp Compiler $ac_dir/$ac_word found, use this compiler?" y 
            if [ $answer = 'y' ]; then           
                ac_cv_prog_F77=$ac_word 
                break 
            fi 
        fi   
    done 
    IFS="$ac_save_ifs" 
    test -z "$ac_cv_prog_F77" && ac_cv_prog_F77="" 
    F77="$ac_cv_prog_F77" 
    if test -n "$F77"; then 
        $ECHO "\n   Compiler $F77 found and accepted.\n" 
        break 
    fi 
done 
if test -z "$F77"; then 
    $ECHO "\n   No compiler found on this computer\n" 
    $ECHO "   Cannot proceed without a Fortran compiler in path\n" 
    exit 
fi 
#
# Test for the existence of F90 compiler
#
    $ECHO "   Checking for Fortran 90 compiler ..."
    $ECHO "   from this list: $compf90list \n\n"
    for comp in $compf90list; do
        set dummy $comp; ac_word=$2
        IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
        for ac_dir in $PATH; do
          test -z "$ac_dir" && ac_dir=.

          if [ -f $ac_dir/$ac_word ]; then
            get_yes_or_no "   $comp Compiler $ac_dir/$ac_word found, use this compiler?" y
            if [ $answer = 'y' ]; then
               ac_cv_prog_F90=$ac_word
               break
            fi
          fi
        done
        IFS="$ac_save_ifs"
        test -z "$ac_cv_prog_F90" && ac_cv_prog_F90=""
        F90="$ac_cv_prog_F90"
        if test -n "$F90"; then
            $ECHO "\n   Compiler $F90 found and accepted.\n"
            break
        fi
    done
    if test -z "$F90"; then
        $ECHO "\n   No Fortran90 compiler found on this computer\n"
        $ECHO   "   LSDALTON cannot be compiled without Fortran90 support\n"
        exit 1
    fi

#
#   Test to see whether the compiler has necessary F90 support
#
cat <<EOF > test.f90
      PROGRAM TEST
      ALLOCATABLE WORK(:)
      ALLOCATE(WORK(199))
      END PROGRAM
EOF
$F90 -o test.x test.f90 >/dev/null 2>&1
if [ ! -r test.x ]; then
    $ECHO Sorry, $F90 was not able to compile test.f90:
    cat test.f90
    rm -f test.x test.o test.f90
    exit 1
else
    ./test.x
    rm -f test.x test.o test.f90
fi
#
$ECHO "   Checking for C compiler ..."
$ECHO "   from this list: $ccmplist \n\n"
for comp in $ccmplist; do
    set dummy $comp; ac_word=$2
    IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}:"
    for ac_dir in $PATH; do
        test -z "$ac_dir" && ac_dir=.
        if [ -f $ac_dir/$ac_word ]; then
          get_yes_or_no "   $comp Compiler $ac_dir/$ac_word found, use this compiler?" y
          if [ $answer = 'y' ]; then
            ac_cv_prog_C=$ac_word
            g2clib=`find $ac_dir/lib/ -name libg2c.a -print`
            break
          fi
        fi
    done
    IFS="$ac_save_ifs"
    test -z "$ac_cv_prog_C" && ac_cv_prog_C=""
    CC="$ac_cv_prog_C"
    if test -n "$CC"; then
        $ECHO "\n   Compiler $CC found and accepted.\n"
        break
    fi
done
if test -z "$CC"; then
    $ECHO "\n   No C compiler found on this computer\n"
    $ECHO   "   Cannot proceed without a C compiler in path\n"
    exit 1
fi
#
# Check out mathematical libraries. May have to expand library list?
#
# For rs6000 we first try ESSL, then BLAS
#
pdpackextras="linpack.o eispack.o cholesky.o invroutines.o"

LIB=''
for testdir in $dirlist; do
  if [ -n "$liblist" ]; then
    for testlib in $liblist; do
        echo "testing existence of $testdir/$testlib"
      if test -f $testdir/$testlib; then

         case $testlib in
            libacml.a) LIB='-lacml'; blas3=true;;
           libatlas.a) LIB='-lf77blas -latlas'; blas3='true'
                       pdpackextras="$pdpackextras gp_zlapack.o";;
            libessl.a) LIB='-lessl'
                     blas3="true" # - but not complete...
                     # Never try use lapack with essl, it is wrong.
                     lapack=true
                       pdpackextras="$pdpackextras gp_zlapack.o gp_dlapack.o";;
            libesslp2.a) LIB='-lesslp2'
                       blas3="true";;
            libcomplib.sgimath.a) LIB='-lcomplib.sgimath'
                                  blas3='true';;
            libmkl_p3.a) LIB="-L$mkllib -lmkl_p3 -lguide -lpthread -static"
                         blas3="true";;
            lib[cd]xml.a) LIB='-ldxml'
                       blas3="true"; lapack="true"
                       cpp='-DVAR_DXML';;
            libblas.a) LIB='-lblas'
                       if nm $testdir/$testlib | grep "gemm" > /dev/null
                       then
                          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
                          then
                          blas2="true"
                       else
                          blas="true"
                       fi;;
            liblapack.a) LIB='-llapack';;
            libveclib.a) LIB='-lveclib -lm'
                       if nm $testdir/$testlib | grep "gemm" > /dev/null 
                       then
                          blas3="true"
                       elif nm $testdir/$testlib | grep "gemv" > /dev/null
                       then
                          blas2="true"
                       else
                          blas="true"
                       fi;;
            libmath.a) LIB='-lmath -lm -nx';;
            libblas0_640.a) LIB="-l-lblas0_640 -l-leispack0_640 -l-llinpack0_640";;
          esac
          break
        fi
      done
      test -n "$LIB" && break
    fi
done

#
# Look for LAPACK library.
#
if test lapack = false; then
for testdir in $dirlist; do
    if test -f $testdir/liblapack.a; then
        lapack=true; LIB="-llapack $LIB"
        break
    fi
done
fi

#
# Figure out list of needed numerical libraries.
#

[ "$lapack" = "true" ] || pdpackextras="$pdpackextras gp_dlapack.o gp_zlapack.o"
if [ "$blas3" != "true" ] ; then
    pdpackextras="$pdpackextras gp_dblas3.o gp_sblas.o"
    if [ "$blas2" != "true" ] ; then
       pdpackextras="$pdpackextras gp_dblas2.o"
       if [ "$blas" != "true" ] ; then
          pdpackextras="$pdpackextras gp_dblas1.o gp_zblas.o"
       fi
    fi
fi

if [ -z "$LIB" -a -n "$liblist" ]; then
    $ECHO '   No mathematical libraries seem to be available\n'
    $ECHO '   I will proceed without them\n\n'
elif [ -n "$LIB" ]; then
    $ECHO '   I have found the following mathematical library(ies): '$LIB'\n\n'
fi      


#ask for OpenMP support
useDEBUG="false"
if [ $WHICH = "rs6000" ] || [ $WHICH = "linux" ]; then
 get_yes_or_no 'Do you want to use debug compiler options ?' n
 if [ "$answer" = "y" ]; then
    useDEBUG="true"
 fi
fi

#ask for OpenMP support
useOMP="false"
if [ $WHICH = "rs6000" ] || [ $WHICH = "linux" ]; then
 get_yes_or_no 'Do you want to install the program with OpenMP parallelization?' y
 if [ "$answer" = "y" ]; then
    useOMP="true"
 fi
fi

#ask for BSM support
#useBSM="false"
#get_yes_or_no 'Do you want to enable BSM (Block Sparse Matrix) algebra?' y
# if [ "$answer" = "y" ]; then
#    useBSM="true"
# fi
#

# Stinne: For release, this is commented out, since it does not work properly for all
# architechtures/compilers. Instead, there is a section in the manual. People will probably
# be more likely to expect it to work out of the box, if this question is here!
#ask if 64-bit integers should be enabled 
int64="false"
#get_yes_or_no 'Do you want to enable 64-bit integers (for large-scale calculations)?' y
# if [ "$answer" = "y" ]; then
#    int64="true"
# fi

# Stinne: For release, this is commented out, since it does not work properly for all
# architechtures/compilers. Instead, there is a section in the manual. People will probably
# be more likely to expect it to work out of the box, if this question is here!
#ask if CSR matrices should be enabled 
csr="false"
#get_yes_or_no 'Do you want to enable Compressed-Sparse Row (CSR) matrices (for large-scale calculations)?' y
# if [ "$answer" = "y" ]; then
#    csr="true"
# fi

#
# Determine location for executable and run script
#

curr=`pwd`
$ECHO '\n   Current directory is '$curr'\n'

# use absolute path for include
lsdalroot=$curr

INSTALL_DIR=$curr
get_yes_or_no 'Use default . as installation directory for LSDALTON binaries and scripts?' y

while [ "$answer" = "n" ]
do
    $ECHO 'Please enter another installation directory: '
    read INSTALL_DIR
    if [ ! -d "$INSTALL_DIR" ]; then
        $ECHO "ERROR: $INSTALL_DIR does not exist, will be created now."
        mkdir "$INSTALL_DIR"; mkdir_ok=$?
        if [ $mkdir_ok ]; then answer="ok"
        else $ECHO "Sorry, the specified directory could not be created"; fi
    else
        answer="ok"
    fi

done

# Thomas: temporay for development purposes
#ask if single precision version should be enabled 
SPver="false"
get_yes_or_no 'Do you want to enable Single Precision?' n
if [ "$answer" = "y" ]; then
    SPver="true"
    cp $curr/tools/ChangeDP2SP.sh .
    ./ChangeDP2SP.sh >& ChangeDP2SPLogFile
    rm -rf ChangeDP2SP.sh
    cp $curr/tools/ChangeSP2DP.sh .
    echo "WARNING: you cannot commit any changes before running the script ChangeSP2DP.sh"
    echo "WARNING: Be very careful - or call a local expert, like Thomas Kjaergaard or Branislav Jansik"
fi

# make sure INSTALL_DIR exists, also if bin
if [ ! -d "$INSTALL_DIR" ]; then
   mkdir "$INSTALL_DIR"
fi

#   Make sure  pathname to INSTALL_DIR is absolute path and not relative path
cd $INSTALL_DIR; INSTALL_DIR=`pwd`; cd $OLDPWD

$ECHO '\n   LSDALTON executable and script will be placed in '$INSTALL_DIR' directory\n\n'

#
# Determine default basis set library location
#
INSTALL_BASDIR=$curr/../basis
get_yes_or_no 'Use basis as default basis set directory?' y
if [ "$answer" = "n" ];  then
    $ECHO 'Please enter antoher default basis set directory (must end with /)\n'
    read INSTALL_BASDIR
    $ECHO '\n   Default basis set directory will be '$INSTALL_BASDIR'\n\n'
fi

#   Make sure  pathname to INSTALL_BASDIR is absolute path and not relative path
cd $INSTALL_BASDIR; INSTALL_BASDIR=`pwd`; cd $OLDPWD

#
# Determine default scratch disk space for calculations
#

if [ -d '/work' ]; then
    worksp='/work'
elif [ -d '/scratch' ]; then
    worksp='/scratch'
elif [ -d '/scr' ]; then
    worksp='/scr'
elif [ -d '/temp' ]; then
    worksp='/temp'
else
    $ECHO '\nI did not find /work, /scratch, /scr, or /temp. I will use /tmp\n'
    worksp='/tmp'
fi

    $ECHO '\n   Job specific directories under '$worksp'/$USER\n   will be used for temporary files when running LSDALTON\n\n'

get_yes_or_no 'Use SCRATCH='$worksp' as default root scratch space in "lsdalton" run script?' y

if [ "$answer" = "n" ];  then
    $ECHO 'Please enter default root scratch directory:'
    read worksp
fi

#
#
# We are beginning to see the end of the installation requirements
#
# We will now dump machine specific things to Makefile.config
#
tab=`$ECHO "\t"`

$ECHO '   Updating Makefile.config\n'

if [ -f Makefile.config ]; then
    $ECHO '   Ooops. Makefile.config exists. I take a backup:\n'
    backup -v Makefile.config
fi

#
# Parallel preprocessor directive need to be set
#

if [ "$mesp" = "mpi" ]; then
    parop='VAR_MPI'
elif [ "$mesp" = "pvm" ]; then
    parop='VAR_PVM'
else
    parop=
fi

ARFLAGS=""
AR="ar"
MAKE="make"
case "$WHICH" in
    rs6000) case $opsys in
		2) if [ "$mesp" = "dummy" ]; then
                   cpp="-w -P -DSYS_AIX -DSYS_AIX23 -D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"' -D$parop"
                   if [ "$mesp" = "mpi" ]; then
                      def='parallel.x'
                   else
                      def='dalpvm.x'
		       fi
		   fi
#              inc="-I${lsdalroot}/include"
               cpp=${cpp}" -DVAR_LINSCA -DIMPLICIT_NONE"
               ;;
            *)
               cppsep=','
               if [ "$mesp" = "dummy" ]; then
                    cpp="-WF,-DSYS_AIX,-D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"'"
               else
                    cpp="-WF,-DSYS_AIX,-D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"',-D$parop"
		        set_parallel_def $mesp
                    copt="$copt -DVAR_MPI"
		   fi
#		   inc="-I${lsdalroot}/include"
               cpp=${cpp}",-DVAR_LINSCA,-DIMPLICIT_NONE"
               ;;
            esac
            copt="$copt -DSYS_AIX -D_LARGE_FILES -qlanglvl=stdc99 -DRESTRICT=restrict -O3 -qarch=auto -qtune=auto -q64"
            opt='-O3 -qstrict -qarch=auto -qtune=auto -q64 -qextname'
	      AR="$AR -X64"
	      MAKE="gmake" # the only hope...
	      cxx_ldflags="-lC"
	      ldflags="$ldflags -lmass -lmassv -L/usr/local/mass"
            f90opt="$opt -qsuffix=f=f90:cpp=f90 -qlanglvl=90std -qinit=f90ptr"
            ;;
       linux) 
          if [ "$mesp" = "dummy" -a $F90 != "ifc" ]; then
             cpp="-DSYS_LINUX -D_FILE_OFFSET_BITS=64 -D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"'"
          elif [ "$mesp" = "dummy" -a $F90 = "ifc" ]; then
             cpp="-DSYS_LINUX -D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"'"
          else
            cpp="-DSYS_LINUX -D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"' -D$parop"
            set_parallel_def $mesp
          fi
          case $F90 in
          [ei]fc|ifort)
             if  grep -q sse2 /proc/cpuinfo 2>/dev/null; then
                 proc=''
             elif [ $prc = 'i686' ]; then
                 proc='-tpp6 -xK'
             elif [ $prc = 'i586' ]; then
                 proc='-tpp5 -xi'
             else
                 proc=''
             fi
#            cpp="-DMOD_FMM $cpp"
	     if [ $useDEBUG = "true" ]; then
		 opt="-g -O0 -traceback $proc -ip -w"
		 safe_opt="-g -O0 -traceback -w"
	     else
		 opt="-O3 $proc -ip -w"
		 safe_opt="-O2 -w"
	     fi
	     if [ $useDEBUG = "true" ]; then
		 case $CC in
                     [ie]cc) copt="-g -O0 -traceback $proc -ip -restrict -DRESTRICT=restrict";;
                     gcc) copt="-g -O0 -malign-double -std=c99 -DRESTRICT=restrict";;
		 esac
	     else
		 case $CC in
                     [ie]cc) copt="-O3 $proc -ip -restrict -DRESTRICT=restrict";;
                     gcc) copt="-O3 -malign-double -std=c99 -DRESTRICT=restrict";;
		 esac
	     fi
             LIB="$LIB -Vaxlib"
             #LIB="-L$g2clib -lg2c -lm $LIB"
	     if [ $useDEBUG = "true" ]; then
		 f90opt="$opt -check all -debug all -fpp1 -fpstkchk"
	     else
		 f90opt="$opt -fpp1"
	     fi
             ;;
          pgf90)
             # vect=idiom gives 40% performance improvement on opteron (pgcc5.2).
	     if [ $useDEBUG = "true" ]; then
		 copt="-c9x -DRESTRICT=restrict"
		 opt=" "; safe_opt=" "
	     else
		 copt="-fastsse -Mvect=idiom -Munroll -c9x -DRESTRICT=restrict"
		 opt="-fastsse -Munroll"; safe_opt="-fastsse"
	     fi
             ;;
          gfortran)
             gfver=`gfortran -v 2>&1 | awk '/^gcc version/{gsub("[^0-9]","", $3);print $3}'`
             case "$prc" in
             x86_64) hopt="-march=x86-64";;
                 *)  hopt="-march=$prc               " 
                #radovan: this -malign-double flag leads to strange format read errors:
#At line 585 of file dalton.F (unit = 1, file = 'DALTON.INP')
#Fortran runtime error: Missing initial left parenthesis in format
                #*)  hopt="-march=$prc -malign-double" 
             esac
             echo "gfortran version $gfver"
             cpp="$cpp -DGFORTRAN=$gfver"
	     if [ $useDEBUG = "true" ]; then
		 copt="$hopt -g -O0 -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1 -ffloat-store"
		 opt="$hopt -g -O0 -ffloat-store"
		 f90opt="$opt -fbounds-check -I. -x f95-cpp-input -ffloat-store -fbacktrace"
		 safeopt="$safe_opt -ffloat-store"
	     else
		 copt="$hopt -O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1 -ffloat-store"
		 opt="$hopt -O3 -ffast-math -funroll-loops -ftree-vectorize -ffloat-store"
		 f90opt="$opt -I. -x f95-cpp-input -ffloat-store"
		 safeopt="$safe_opt -ffloat-store"
	     fi 
             cxx_ldflags="-lstdc++"
             ;;
          *)
              test_linux_g77=false
              if [ -s /etc/redhat-release ]; then
                 if [ `grep "Red Hat Linux 7\.0" /etc/redhat-release | wc -l ` != 0 ]; then
                     test_linux_g77="true"
                 fi
              elif [ -d /proc ]; then
                   if [ `cat /proc/version | grep "Red Hat Linux 7\.0" | wc -l` != "0" ]; then
                      test_linux_g77="true"
                   fi
              fi
              if [ $test_linux_g77 != "false" ]; then
                 if [ `which rpm | wc -l ` != 0 ]; then
                    if [ `rpm -q gcc-g77 | grep '2.96.54' | wc -l` != 0 ]; then
                       $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING\n"
                       $ECHO "There are problems with the native Red Hat 7.0 compiler.\n"
                       $ECHO "You should upgrade your gcc and gcc-g77-2.96.54 compiler to version 2.96.69 or later.\n"
                       $ECHO "LSDalton does NOT run correct with the current compiler.\n"
                       $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING\n"
                    fi
                 else
                    $ECHO "WARNING   WARNING   WARNING   WARNING   WARNING\n"
                    $ECHO "I cannot determine if you use the original g77 compiler from Red Hat Linux 7.0.\n"
                    $ECHO "If you do, upgrade gcc & gcc-g77 to version 2.96.69 or later.\n"
                    $ECHO "LSDalton does NOT run correct with the gcc-g77 2.96.54 compiler\n"
                 fi
              fi
              cpp="$cpp"
              case "$prc" in
              x86_64) copt="-march=x86-64";;
                  *)  copt="-mcpu=$prc -malign-double" 
              esac
              copt="$copt -O3 -ffast-math -fexpensive-optimizations -funroll-loops"
              opt="$copt -fno-globals -Wno-globals"
              copt="$copt -std=c99 -DRESTRICT=restrict"
              cxx_ldflags="-lstdc++"
              ;;
          esac
          if [ "$mesp" = "dummy" ]; then
              def='linux.x'
          else
              def='linuxparallel.x'
          fi
#          inc="-I${lsdalroot}/include"
          cpp=${cpp}" -DVAR_LINSCA -DIMPLICIT_NONE";
          ;;
    darwin) if [ "$mesp" = "dummy" ]; then
              cpp="-DSYS_LINUX -D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"'"
            else       
              cpp="-DSYS_LINUX -D'INSTALL_BASDIR=\"$INSTALL_BASDIR\"' -D$parop"
              set_parallel_def $mesp
            fi
          if [ `echo $F90 | grep -c gfortran` -eq 1 -o "$F90" = mpif90 ]; then
               gfver=`gfortran -v 2>&1 | awk '/^gcc version/{gsub("[^0-9]","", $3);print $3}'`
               echo "gfortran version $gfver prc=$prc"
               cpp="-DVAR_GFORTRAN -DGFORTRAN=$gfver $cpp"
               copt="-O3 -ffast-math -funroll-loops -ftree-vectorize -std=c99 -DRESTRICT=restrict -DFUNDERSCORE=1 -DHAVE_NO_LSEEK64"
               opt="-O3 -Wl,-framework -Wl,vecLib -ffast-math -funroll-loops -ftree-vectorize"
               f90opt="$opt -I. -x f95-cpp-input"
#               cxx_ldflags="-lstdc++"
               if [ "$mesp" != "dummy" ]; then
                  copt="$copt -D$parop"
                  opt="$opt -D$parop"
                  f90opt="$f90opt -D$parop"
                  def='linuxparallel.x'
               fi
#               inc="-I${lsdalroot}/include"
               LIB="-lgcc"
               cpp=${cpp}" -DVAR_LINSCA -DIMPLICIT_NONE"
# use Vector Libraries for BLAS and LAPACK
               pdpackextras='linpack.o eispack.o'
          else
             echo "Sorry - Do not know how to handle $F90 options for darwin'"
             exit 1
          fi;;
esac

# add OpenMP compiler flag and library
if [ $useOMP = "true" ]; then
    #find out install root of F90
    f90root=`which $F90`
    f90root=`dirname $f90root`; 
    libversion=${f90root##*/}
    f90root=`dirname $f90root`
    cpp=${cpp}" -DVAR_OMP"

    case $WHICH in
    rs6000) f90opt="$f90opt -qsmp=omp"
	    copt="$copt -qsmp=omp"
            LIB="$LIB -L/usr/lib -lxlsmp"
            F90=$F90\_r;;
    linux)  case $F90 in
            ifort)   f90opt="$f90opt -openmp"
          	     copt="$copt -openmp"
                     if [ -d "$f90root/lib" ]; then
                       LIB="$LIB -Wl,-rpath=$f90root/lib -lguide -lpthread"
                     else
                       f90root=`dirname $f90root`;
echo $f90root/lib/$libversion
                       if [ -d "$f90root/lib/$libversion" ]; then
                         LIB="$LIB -Wl,-rpath=$f90root/lib/$libversion -lguide -lpthread"
                       else
                        LIB="$LIB -lguide -lpthread"
                       fi
                     fi;;
            ifc)     f90opt="$f90opt -openmp"
	             copt="$copt -openmp"
                     [[ -d "$f90root/lib" ]] && LIB="$LIB -Wl,-rpath=$f90root/lib -lguide -lpthread";;
            pgf90)   f90opt="$f90opt -mp"
	             copt="$copt -mp";;
            gfortran)f90opt="$f90opt -fopenmp"
	             copt="$copt -fopenmp"
                     LIB="$LIB -lgomp";;
            esac;;
    esac
fi

# If single precision (needs more work)
if [ $SPver = "true" ]; then
    cpp=${cpp}" -DSYS_REAL"
fi

# If 64-bit integers (needs more work - libraries!)
if [ $int64 = "true" ]; then
   cpp="${cppsep} -DVAR_INT64 -DVAR_64BITS"
    case $WHICH in
    rs6000) f90opt="$f90opt -qintsize=8"
            opt="$opt -qintsize=8"
            safeopt="$safe_opt -qintsize=8";;
    linux)  case $F90 in
            ifort)   f90opt="$f90opt -i8"
                     opt="$opt -i8"
                     safeopt="$safe_opt -i8";;
            gfortran) #64 bit flag for gfortran??
                     ;;          
            esac;;
    esac
fi

# If CSR matrices should be enabled (needs more work - libraries!)
if [ $csr = "true" ]; then
   cpp="${cppsep} -DVAR_MKL"
fi

#if [ $useBSM = "true" ]; then
#### BSM configuration
#pwd=`pwd`
#if cd lsutil/bsm 2>/dev/null; then
#if test -f configure; then conf=./configure; else conf=./bootstrap.sh; fi
#test "x$force64bit_ints" != "x" && bsmarg="--enable-64bit-int"
#if $conf --prefix="$pwd" $bsmarg; then
#    if test -z "$MAKE"; then cfg_make=make; else cfg_make="$MAKE"; fi
#    if $cfg_make AR="ar $ARFLAGS" install; then
# 	cpp="${cpp}${cppsep}-DHAVE_BSM"
#        stdcpp=`grep '^FLIBS' Makefile | sed 's/FLIBS =//g'`
#	echo $stdcpp
#	ldflags="lib/libqcsparsemat.a $ldflags $cxx_ldflags"
#	test "x$stdcpp" != "x" &&  ldflags="$ldflags $stdcpp"
#	echo " "; echo "BSM Blocked Sparse Matrix code enabled."
#    else
#        echo " "; echo "BSM could not be compiled." 
#    fi
#else 
#    echo " "; echo "Necessary prerequisites for BSM not found. BSM is disabled."
#fi
#cd "$pwd"
#fi
#fi
#
### End of BSM configuration

# for safe compilers, set safe_opt to opt
if [ -z "$safe_opt" ]; then safe_opt="$opt"; fi
copt="$copt -DUSE_UNDERSCORES"

# leave untill we get the work version with Q5Cost
# added by Bin Gao, Gen1Int library in linsca
$ECHO "\nGen1Int is a tool package for computing many different one-electron integrals as well as"
$ECHO "\ntheir high-order magnetic and geometric derivatives using London atomic-orbitals."
$ECHO "\nPlease see http://sourceforge.net/projects/gen1int for more details and"
$ECHO "\nthe instruction of installation. Before enabling this feature, make sure you have"
$ECHO "\nsuccessfully compiled the library of Gen1Int (libgen1int.a).\n"
get_yes_or_no "\nDo you want to activate Gen1Int package for linsca?" n
if [ "$answer" = "y" ]; then
  $ECHO "\n-->Trying to find Gen1Int library libgen1int.a ..."
  lib_genint=`locate libgen1int.a`
  # ask user to manually provide the path of libgen1int.a
  if test ${#lib_genint} -eq 0; then
    $ECHO "\n-->Gen1int not found on the system. Please specify path of libgen1int.a, or enter to skip."
    read lib_genint
  fi
  # checks if there is Gen1Int on the system
  if test ${#lib_genint} -gt 0; then
    $ECHO "\n-->Found Gen1Int $lib_genint"
    # everything is OK to install Gen1Int
    $ECHO "\n-->Modifying Makefile.config ..."
    $ECHO "\n-->(1) Adding -DBUILD_GEN1INT to CPPFLAGS"
    $ECHO "\n-->(2) Adding $lib_genint to LIBS"
    cpp="-DBUILD_GEN1INT $cpp"
    LIB="$LIB $lib_genint"
  else
    $ECHO "\n-->Gen1Int libary was not found and Gen1Int code will not be activated!"
    $ECHO "\n-->You can still activate Gen1Int manually by modifying Makefile.config as follows:"
    $ECHO "\n-->(1) Adding -DBUILD_GEN1INT to CPPFLAGS"
    $ECHO "\n-->(2) Appending libgen1int.a to LIBS"
  fi
fi

cat <<EOF > Makefile.config
ARCH        = $WHICH
FMMDIR      = mm
#
#
CPPFLAGS      = $cpp
F77            = $F77
F90            = $F90
FLNK           = $F90
CC             = $CC
RM             = rm -f
FFLAGS         = $opt
F90OPTFLAGS    = $f90opt
SAFEFFLAGS     = $safe_opt
CFLAGS         = $copt
INCLUDES       = $inc $parinc
LIBS           = $LIB $ldflags
INSTALLDIR     = $INSTALL_DIR
PDPACK_EXTRAS  = $pdpackextras
AR             = ar
ARFLAGS        = $ARFLAGS rvs
#
default : $def
EOF

#
# Insert necessary additional features for parallel calculations
#

if [ "$mesp" = "mpi" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
MPI_INCLUDE_DIR = $parinc
MPI_LIB_PATH    = $parlibp
MPI_LIB         = $parlib
#
EOF
elif [ "$mesp" = "pvm" ]; then
    cat <<EOF >> Makefile.config
#
# Parallel initialization
#
PVM_LIB_PATH = $parlibp
PVM_LIB_LIST = $parlib
PVM_NOD_PATH = $parnodp
PVM_NOD_PROG = $parnod
#
EOF
fi
#
# Include the rule for building the object files
#
cppuse=
if [ "$WHICH" = "rs6000" -a "$opsys" = "2" ]; then
    cppuse='cc'
fi

if [ $WHICH = 'rs6000' ]; then
   if [ $opsys = '2' ]; then
cat <<EOF>> Makefile.config
CPP        = $cppuse
#
# Suffix rules A
#
.SUFFIXES : .f90 .F .f .o .c .F90

.F90.o:
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) \$(F90OPTFLAGS) -c \$*.F90

.f90.o:
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) \$(F90OPTFLAGS) -c \$*.f90

.F.o:
$tab\$(CPP) \$(INCLUDES) \$(CPPFLAGS) \$*.F
$tab mv \$*.i \$*.f
$tab\$(F77) \$(FFLAGS) -c \$*.f
$tab\$(RM) \$*.f

.c.o:
$tab\$(CC) \$(CFLAGS) -c \$*.c
EOF
      else cat <<EOF>> Makefile.config
#
# Suffix rules B
#
.SUFFIXES : .f90 .F .o .c

.f90.o:
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) \$(F90OPTFLAGS) -c \$*.f90

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F

.c.o:
$tab\$(CC) \$(CFLAGS) -c \$*.c
EOF
   fi
else
        cat <<EOF>> Makefile.config
#
# Suffix rules C
#
.SUFFIXES : .F90 .f90 .F .o .c

.F90.o:
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) \$(F90OPTFLAGS) -c \$*.F90

.f90.o:
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) \$(F90OPTFLAGS) -c \$*.f90

.F.o:
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(FFLAGS) -c \$*.F

.c.o:
$tab\$(CC) \$(INCLUDES) \$(CPPFLAGS) \$(CFLAGS) -c \$*.c
EOF
fi
#
# Make sure Makefile.depend files exist
#
touch dft/Makefile.depend
touch pdpack/Makefile.depend
#
# Intel compiler seems to be a bit less optimized for certain routines, at
# least Itanium processors
#
if [ $F90 = 'ifc' -o $F90 = 'efc' ]; then
cat <<EOF>>abacus/Makefile
her2el2.o: her2el2.F
$tab\$(F77) \$(INCLUDES) \$(CPPFLAGS) \$(SAFEFFLAGS) -c \$*.F 

hersym.o: hersym.F
$tab\$(F90) \$(INCLUDES) \$(CPPFLAGS) \$(SAFEFFLAGS) -c \$*.F 
EOF
fi
#
# Update the LSDALTON run-script
#

$ECHO '\n'
$ECHO '\n   Updating the LSDALTON run-script in '$INSTALL_DIR'\n'

#
# When using PVM the name of the executable is renamed
#
DALEXE="lsdalton.x"
if [ $mesp = 'pvm' ]; then
    DALEXE="lsdalton_pvm.x"
fi
mpirun=`which mpirun 2>/dev/null` || mpirun=mpirun

cat <<EOF > $INSTALL_DIR/lsdalton
#!/bin/bash
################################################################################
#                                                                              #
# Shell-script for running LSDALTON                                            #
#                                                                              #
# Version 1.0 February 1997 by T.Enevoldsen, Odense University                 #
# Version 1.1 spring 2000 by K.Ruud and H.J.Aa.Jensen                          #
# Rewritten for lsdalton in 2010-2011 by several authors                       #
#                                                                              #
################################################################################
#
# location of executeables
LSDALTON="$INSTALL_DIR/$DALEXE"
DALMPI="$INSTALL_DIR/dalpar.x"
MPIRUN="$mpirun"
# set TMPDIR (if not defined by e.g. NQS) and WRKDIR
[ -z "\$TMPDIR" ] && TMPDIR="$worksp/\$USER"
EOF
sed '1,5d' lsdalton.in >> $INSTALL_DIR/lsdalton
chmod 755 $INSTALL_DIR/lsdalton

$ECHO '\n   The configuration of LSDALTON has finished succesfully.\n'
$ECHO '   Check compiler flags etc. in Makefile.config and run "make" to get executable.\n\n'

exit
