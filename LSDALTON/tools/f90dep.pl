#! /usr/bin/perl -w
# (c) 2004 Pawel Salek
# a very simple f90 dependency generator. Replace with
# something more sophisticated if this script is found to fail.
#
# C compilers usually can generate dependencies on themselves but
# this capability is not provided by most of F90 compilers.
#
my $verbose = 0;
my $cppOpts = "";
my ($cppPrefix, $cppPostfix) = ('','');;
my $canAcceptOptions = 1;
my @IncludeDirs = ('');


sub printHelp {
    print << "EOF";
-h This very help.
-M Directory to scan for modules (time-consuming!).
-I Directory with include files.
EOF
}

sub processFile($$) {
    my ($onlyModuleDefs, $file) = @_;
    unless(open FL, $cppPrefix . $file . $cppPostfix) {
        warn "cannot open $file for reading.\n";
        next;
    }
    print STDERR "Processing '$file'\n";
    my $objectFile = $file;
    $objectFile =~ s/\.(f90|F|F90|F03)$/.o/;
    print STDERR $file. "\n" if $verbose;
    while(<FL>) {
        my ($module) = ($_ =~ /^ *MODULE +(\w+)/i);
        if(defined $module) {
            $module = lc $module;
            $modules{$module} = $objectFile;
            print STDERR "defines module $module\n" if $verbose;
        }
	next if $onlyModuleDefs;
        my ($use) = ($_ =~ /^\s*USE +(\w+)/i);
        if(defined $use) {
            $use = lc $use;
            $deps{$objectFile}{$use}++;
            print STDERR "    uses $use\n" if $verbose;
        }
	my($include) = ($_ =~ /^#\s*include\s*[<"](\S+?)[">]/);
	if(defined $include) {
	    my $found = 0;
	    for my $dir(@IncludeDirs) {
		if(-f $dir.$include) {
		    $includes{$objectFile}{$dir.$include}++;
		    print STDERR "includes file $dir$include\n" if $verbose;
		    $found = 1;
		    last;
		}
	    }
	    warn "Include file $include not found.\n" unless $found;
	}
    }
    close FL;
}

# Check whether cpp preprocessing can be enabled...
if(1) {
    $cppPrefix = "";
    $cppPostfix = '';
} elsif(0 == system "cpp < /dev/null > /dev/null 2>&1" ) {
    $cppPrefix = "cpp ";
    $cppPostfix = ' 2>/dev/null|';
} elsif( -f '/lib/cpp') {
    $cppPrefix = "/lib/cpp ";
    $cppPostfix = ' 2>/dev/null|';
}    

while($i = shift @ARGV) {
    if($canAcceptOptions and $i =~ /^-/) {
        if($i eq "--") {
            $canAcceptOptions = 0;
	} elsif($i eq "-h") {
	    printHelp;
	    exit 0;
	} elsif($i =~ /^-M/) {
	    my $dirToProcess = ($i eq '-M') ? shift @ARGV : substr $i, 2;
	    my @fileList = glob $dirToProcess . '/*.(F03|F90|f90)';
	    foreach my $f(@fileList) {
		processFile 1, $f;
	    }
	} elsif($i =~ /^-I/) {
	    my $dir = ($i eq '-I') ? shift @ARGV : substr $i, 2;
	    $dir .= '/' unless $dir =~ m,/$,i;
	    push @IncludeDirs, $dir;
	} elsif($cppPrefix ne '') {
            $cppPrefix .=  $i . ' ';
        }
	next;
    }
    processFile 0, $i;
}

open FL, ">Makefile.depend"
    or die "cannot write to Makefile.depend\n";
print FL "# This file has been autogenerated by f90dep.pl by Pawel Salek\n";
foreach $file (sort (keys %deps, keys %includes) ) {
    my %filelist = map { $_ => 1 } keys %{$includes{$file}};
    my $hash = $deps{$file};
    # eliminate duplicate files from the list of modules.
    foreach $module (keys %$hash) {
        if(defined $modules{$module}) {
            $filelist{$modules{$module}} ++ ;
        } else {
            warn "$file depends on unknown module $module.\n";
        }
    }
    print FL "$file : ";
    my $cnt = 0;
    foreach $f (sort keys %filelist) {
	print FL "\\\n\t" if $cnt++ % 3 == 2;
        print FL $f . " " unless $f eq $file;
    }
    print FL "\n\n";
}
close FL;
