#!/usr/bin/env python
# vim:ft=python
#
# primitive frontend to cmake
# (c) Radovan Bast <radovan.bast@irsamc.ups-tlse.fr>
# (c) Jonas Juselius <jonas.juselius@uit.no>
# licensed under the GNU Lesser General Public License

import os
import sys
import string
import re
import subprocess
import shutil

sys.path.append('cmake')
from argparse import ArgumentParser

if sys.version < '2.4':
    print('requires python version >= 2.4')
    sys.exit(1)

root_directory = os.path.dirname(os.path.realpath(__file__))
default_path = os.path.join(root_directory, 'build')

# initialize parser

parser = ArgumentParser(description="setup build configurations")

# define options

parser.add_argument('builddir', nargs='?',
        action='store',
        default=default_path,
        help='build directory [default: %(default)s]',
        metavar='build path')

group = parser.add_argument_group('basic options')
group.add_argument('--fc',
        action='store',
        default=None,
        help='set the Fortran compiler [default: pick automatically or based on FC=...]',
        metavar='STRING')
group.add_argument('--cc',
        action='store',
        default=None,
        help='set the C compiler [default: pick automatically or based on CC=...]',
        metavar='STRING')
group.add_argument('--cxx',
        action='store',
        default=None,
        help='set the C++ compiler [default: pick automatically or based on CXX=...]',
        metavar='STRING')
group.add_argument('--type',
        nargs='?',
        action='store',
        choices=('release', 'debug', 'profile'),
        default='release',
        help='set the CMake build type [default: %(default)s]')
group.add_argument('--int64',
        action='store_true',
        default=False,
        help='enable 64bit integers [default: %(default)s]')
group.add_argument('--prefix',
        action='store',
        default=None,
        help='set the install path for make install [default: %(default)s]',
        metavar='PATH')
group.add_argument('--show',
        action='store_true',
        default=False,
        help='show cmake command and exit [default: %(default)s]')

group = parser.add_argument_group('parallelization')
group.add_argument('--mpi',
        action='store_true',
        default=False,
        help='enable MPI [default: %(default)s]')
group.add_argument('--sgi-mpt',
        action='store_true',
        default=False,
        help='enable SGI MPT [default: %(default)s]')
group.add_argument('--omp',
        action='store_true',
        default=False,
        help='enable OpenMP [default: %(default)s]')

group = parser.add_argument_group('math libraries')
group.add_argument('--mkl',
        nargs='?',
        action='store',
        choices=('sequential', 'parallel', 'cluster'),
        default=None,
        help='pass -mkl=STRING flag to the compiler and linker, sets --blas and --lapack to off [default: %(default)s]')
group.add_argument('--blas',
        nargs='?',
        action='store',
        choices=('on','off'),
        default='on',
        const='on',
        help='enable BLAS [default: %(default)s]')
group.add_argument('--lapack',
        nargs='?',
        action='store',
        choices=('on','off'),
        default='on',
        const='on',
        help='enable LAPACK [default: %(default)s]')
group.add_argument('--explicit-libs',
        action='store',
        default=None,
        help='explicit linker specification for exotic libraries',
        metavar='STRING')
group.add_argument('--cray',
        action='store_true',
        default=False,
        help='use cray wrapper which disables math detection and internal math implementation [default: %(default)s]')
group.add_argument('--csr',
        action='store_true',
        default=False,
        help='build using MKL compressed sparse row [default: %(default)s]')
group.add_argument('--scalapack',
        action='store_true',
        default=False,
        help='build using SCALAPACK [default: %(default)s]')
group.add_argument('--scalasca',
        action='store_true',
        default=False,
        help='build using SCALASCA profiler mode [default: %(default)s]')

group = parser.add_argument_group('advanced options')
group.add_argument('--check',
        action='store_true',
        default=False,
        help='enable bounds checking [default: %(default)s]')
group.add_argument('--coverage',
        action='store_true',
        default=False,
        help='enable code coverage [default: %(default)s]')
group.add_argument('--static',
        action='store_true',
        default=False,
        help='link statically [default: %(default)s]')
group.add_argument('-D',
        action="append",
        dest='define',
        default=[],
        help='forward directly to cmake (example: -D ENABLE_THIS=1 -D ENABLE_THAT=1); \
                you can also forward CPP defintions all the way to the program \
                (example: -D CPP="-DDEBUG")',
                metavar='STRING')
group.add_argument('--host',
        action='store',
        default=None,
        help="use predefined defaults for 'host'",
        metavar='STRING')
group.add_argument('--generator',
        action='store',
        default=None,
        help='set the cmake generator [default: %(default)s]',
        metavar='STRING')
group.add_argument('--timings',
        action='store_true',
        default=False,
        help='build using timings [default: %(default)s]')

group = parser.add_argument_group('external libraries')
group.add_argument('--xcfun',
        action='store_true',
        default=False,
        help='enable XCFun external library [default: %(default)s]')
group.add_argument('--interest',
        action='store_true',
        default=False,
        help='enable interest external library [default: %(default)s]')

# process input

args = parser.parse_args()

def check_cmake_exists():
    p = subprocess.Popen('cmake --version',
            shell=True,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE)
    if not ('cmake version' in p.communicate()[0]):
        print('   This code is built using CMake')
        print('')
        print('   CMake is not found')
        print('   get CMake at http://www.cmake.org/')
        print('   on many clusters CMake is installed')
        print('   but you have to load it first:')
        print('   $ module load cmake')
        sys.exit()

def translate_cmake(s):
    if s:
        return 'ON'
    else:
        return 'OFF'


def gen_cmake_command():
    # create cmake command from flags

    command = ''

    if args.fc:
        command += ' FC=%s'  % args.fc
    if args.cc:
        command += ' CC=%s'  % args.cc
    if args.cxx:
        command += ' CXX=%s' % args.cxx

    if sys.platform != "win32":
        command += ' cmake'
    else:
        # fix for windows
        command = ' cmake ' + command

    command += ' -DENABLE_MPI=%s'            % translate_cmake(args.mpi)
    command += ' -DENABLE_SGI_MPT=%s'        % translate_cmake(args.sgi_mpt)
    command += ' -DENABLE_OMP=%s'            % translate_cmake(args.omp)
    command += ' -DENABLE_64BIT_INTEGERS=%s' % translate_cmake(args.int64)
    command += ' -DENABLE_CSR=%s'            % translate_cmake(args.csr)
    command += ' -DENABLE_SCALAPACK=%s'      % translate_cmake(args.scalapack)
    command += ' -DENABLE_SCALASCA=%s'       % translate_cmake(args.scalasca)
    command += ' -DENABLE_TIMINGS=%s'        % translate_cmake(args.timings)
    command += ' -DENABLE_XCFUN=%s'          % translate_cmake(args.xcfun)
    command += ' -DENABLE_INTEREST=%s'       % translate_cmake(args.interest)
    command += ' -DENABLE_CRAYWRAPPER=%s'    % translate_cmake(args.cray)
    command += ' -DENABLE_STATIC_LINKING=%s' % translate_cmake(args.static)

    if args.mkl:
        command += ' -DMKL_FLAG="-mkl=%s"' % args.mkl
    else:
        command += ' -DENABLE_BLAS=%s'     % args.blas.upper()
        command += ' -DENABLE_LAPACK=%s'   % args.lapack.upper()

    if args.explicit_libs:
        command += ' -DEXPLICIT_LIBS="%s"' % args.explicit_libs

    if args.check:
        command += ' -DENABLE_BOUNDS_CHECK=ON'

    if args.coverage:
        command += ' -DENABLE_CODE_COVERAGE=ON'

    if args.prefix:
        command += ' -DCMAKE_INSTALL_PREFIX=' + args.prefix

    command += ' -DCMAKE_BUILD_TYPE=%s' % args.type

    if args.define:
        for definition in args.define:
            command += ' -D%s' % definition

    if args.generator:
        command += ' -G "%s"' % args.generator

    command += ' %s' % root_directory

    print('%s\n' % command)
    if args.show:
        sys.exit()
    return command

def print_build_help(build_path):
    print('   configure step is done')
    print('   now you need to compile the sources')
    print('')
    print('   to compile with configured parameters (recommended):')
    if (build_path == default_path):
        print('   $ cd build')
    else:
        print('   $ cd ' + build_path)
    print('   $ make')
    print('')
    print('   to modify configured parameters and then compile:')
    if (build_path == default_path):
        print('   $ cd build')
        print('   $ ccmake ..')
    else:
        print('   $ cd ' + build_path)
        print('   $ ccmake ' + root_directory)
    print('   $ make')

def save_setup_command(argv, build_path):
    file_name = os.path.join(build_path, 'setup_command')
    f = open(file_name, 'w')
    f.write(" ".join(sys.argv[:])+"\n")
    f.close()

def setup_build_path(build_path, only_show_command):
    if args.show:
        return
    if os.path.isdir(build_path):
        fname = os.path.join(build_path, 'CMakeCache.txt')
        if os.path.exists(fname):
            if not only_show_command:
                print('aborting setup - build directory %s which contains CMakeCache.txt exists already' % build_path)
                print('remove the build directory and then rerun setup')
                sys.exit()
    else:
        os.makedirs(build_path, 0755)

def run_cmake(command, build_path):
    topdir = os.getcwd()
    os.chdir(build_path)
    p = subprocess.Popen(command,
            shell=True,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE)
    s = p.communicate()[0]
    print(s)
    os.chdir(topdir)
    return s

def main():
    check_cmake_exists()
    build_path = args.builddir
    setup_build_path(build_path, args.show)
    if not configure_host():
        configure_default_compilers()
    command = gen_cmake_command()
    status = run_cmake(command, build_path)

    if 'Configuring incomplete' in status:
        # configuration was not successful
        if (build_path == default_path):
            # remove build_path iff not set by the user
            # otherwise removal can be dangerous
            shutil.rmtree(default_path)
    else:
        # configuration was successful
        save_setup_command(sys.argv, build_path)
        print_build_help(build_path)

# host/system specific configurations
def configure_host():
    if args.host:
        host = args.host
    else:
        if sys.platform != "win32":
            u = os.uname()
        else:
            u = "Windows"
        host = string.join(u)
    msg = None
    # Generic systems
    if re.search('ubuntu', host, re.I):
        msg = "Configuring system: Ubuntu"
        configure_ubuntu()
    if re.search('fedora', host, re.I):
        msg = "Configuring system: Fedora"
        configure_fedora()
    if re.search('osx', host, re.I):
        msg = "Configuring system: MacOSX"
        configure_osx()
    if msg is None:
        return False
    if not args.show:
        print msg
    return True

def configure_default_compilers():
    # if compiler starts with 'mp' turn on mpi
    # it is possible to call compilers with long paths
    if  args.cc  and os.path.basename(args.cc).lower().startswith('mp')  or \
        args.cxx and os.path.basename(args.cxx).lower().startswith('mp') or \
        args.fc  and os.path.basename(args.fc).lower().startswith('mp'):
        args.mpi = 'on'

    # if compiler starts with 'openmpi' turn on mpi
    # it is possible to call compilers with long paths
    if  args.cc  and os.path.basename(args.cc).lower().startswith('openmpi')  or \
        args.cxx and os.path.basename(args.cxx).lower().startswith('openmpi') or \
        args.fc  and os.path.basename(args.fc).lower().startswith('openmpi'):
        args.mpi = 'on'

    if not args.cc:
        args.cc = 'gcc'
    if not args.cxx:
        args.cxx = 'g++'
    if not args.fc:
        args.fc = 'gfortran'

configure_ubuntu = configure_default_compilers
configure_fedora = configure_default_compilers
configure_osx = configure_default_compilers

if __name__ == '__main__':
    main()

# vim:et:ts=4:sw=4
