READ BEFORE IMPLEMENTING NEW DEC CODE.

1. How to implement a new model or correction to existing model.

2. How to handle dependencies with deccc/ folder.



********************************************************************************
*                           1. NEW DEC MODEL/CORRECTION                        *
********************************************************************************

If you want to implement energies for a new model/correction in DEC, then please do the following:

(i) 
Increase the global integer ndecenergies in lsutil/dec_typedef. E.g. if your new model/correction 
requires N energies to be stored, increase ndecenergies by N.

(ii)
Update description of "energies" in ccatom type definition to include your new model/correction.

(iii)
For new model: The model gets the next available "number" to distinguish the various models, see "ccmodel" in type DECsettings in lsutil/dec_typedef.f90. Also change dec_set_default_config and add model to input in config_dec_input. Furthermore, whenever modifying the DECsettings type, REMEMBER TO MODIFY the mpicopy_dec_settings routine accordingly!

For new correction: Insert logical describing whether correction should be done or not in type DECsettings in lsutil/dec_typedef.f90  (e.g. F12 is currently a possible correction). Also include keyword in config_dec_input.

(iv)
For new model (e.g. RPA): Grep for "MODIFY FOR NEW MODEL" in all files in the DEC code. These are the main places you need to change to include your new model. It is hopefully clear from the context and the comments in the code what needs to be to include the new model.

For new correction (e.g. F12): Grep for "MODIFY FOR NEW CORRECTION" in all files in the DEC code. These are the main places you need to change to include your new model. It is hopefully clear from the context and the comments in the code what needs to be to include the new correction".



Note: I have almost certainly forgotten something in the description above, so please feel free
to update and improve the description!





********************************************************************************
*                               2. DEC DEPENDENCIES                            *
********************************************************************************


This is an overview of DEC dependencies.
The list below should ALWAYS be kept up to date!

Rules:

1. Files at level X is allowed to use a subroutine/function in a file on level Y if and only if X>Y!
2. You are of course allowed to introduce new files, shuffle things around etc.
   If you do so, make sure that each files has a place in the hierarchy and that this file is updated!
3. If modifying dependencies, make sure that all DEC depencies are put under the 
   "! DEC DEPENDENCIES (within deccc directory)" comment within each file.
4. Use the "public" and "private" keywords as much as possible for the high-level files (see e.g. dec_main.f90). This significantly speeds up compilation and reduces memory consumption during compilation.


Anyone not obeying these simple rules will get executed by the Jonas Kramer warrior at dawn...


Dependency list:
****************

Level 9
dec_main

Level 8
full_driver, dec_driver,decmpiSlave

Level 7
dec_driver_slave

Level 6
fragment_energy

Level 5
cc_driver

Level 4
rpa

Level 3
ccsd, dec_atom,ccsdpt,mp2_gradient

Level 2 
array_operations,  fullmolecule, mp2, cc_integrals

Level 1
ccorbital, ccarray2_simple, ccarray3_simple, ccarray4_simple, dec_pdm, decmpi

Level 0 
dec_settings, cc_crop, full_driver_f12contractions, CABS,
dec_utils, array3_memory, array4_memory, array_memory, manual_reorderings, ccri_simple
