#!/bin/bash

# radovan: this is to figure out the location of this script
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $SOURCE != /* ]] && SOURCE="$SCRIPT_DIR/$SOURCE"
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

LSLIB_TEST=$SCRIPT_DIR/lslib_tester.x
LSDALTON_EXECUTABLE=$SCRIPT_DIR/lsdalton.x
MPIRUN=@MPIEXEC@
INSTALL_BASDIR=$SCRIPT_DIR/basis

if [ -z "$DALTON_TMPDIR" ]; then
    scratch_dir_candidates="/global/work/$USER /scratch/$USER /work /scratch /scr /temp /tmp"
    for dir in $scratch_dir_candidates; do
        if [ -d "$dir" ]; then
            DALTON_TMPDIR=$dir
            echo "found $dir and DALTON_TMPDIR set to $DALTON_TMPDIR"
            break
        fi
    done
fi

WRKDIR=`pwd`; export WRKDIR
# always search for basis sets in job work directory
# (before standard dalton basis library in INSTALL_BASDIR, appended below)
BASDIR=$WRKDIR
#
paramlist="$*"
# default extensions
OUTEXT="out"
DALEXT="dal"
MOLEXT="mol"
AUXEXT="MOL NCA ORB IRC TRJ CM HES MOPUN WLK"
#deafult values for options
opt_lslib_test=0
opt_restart=0
opt_nobackup=0
opt_noarch=0
optd=0
optdens=0
optpg=0
optD=1
optf=
optn=0
opto=0
#
# Define usage message
#
usage (){
      echo
      echo "Usage:    lsdalton [-b directory] [-d] [-D] [-ext log | -o file] [-f] [-m mem | -M mem]"
      echo  "[-N cores] [-o file] [-t directory] [-w directory] dal{.$DALEXT} mol{.$MOLEXT}"
      echo
      echo 'Options:'
      echo ' -b dir    change directory where basis sets are searched for to dir'
      echo ' -d        delete DALTON_TMPDIR before calculation starts'
      echo ' -pg       do profiling'
      echo ' -dens     copy dens.restart and maybe fock.restart lcm_orbitals.u'
      echo ' -restart  run the calc twice to test restart option'
      echo ' -lslib_test run lslib test'
      echo ' -D        do not delete DALTON_TMPDIR after calculation stops'
      echo ' -ext log  change output extension from ".out" to ".log"'
      echo ' -o FILE   redirect output from program to FILE in WRKDIR'
      echo ' -f FILE   extract content of FILE.tar.gz from WRKDIR in DALTON_TMPDIR before calculation starts'
      echo ' -m mem    set scratch memory to mem Mwords'
      echo ' -M mem    set scratch memory to mem Mb'
      echo ' -N num    use num MPI procs (defaults to DALTON_NUM_MPI_PROCS)'
      echo ' -t dir    change DALTON_TMPDIR from default to dir'
      echo ' -w dir    change WRKDIR from default to dir'
      echo " -exe exec change the executable from default ($LSDALTON_EXECUTABLE) to exec"
      echo " -nobackup do not backup files, simply overwrite outputs"
      echo " -noarch   do not create tar.gz archive"

      echo
      echo "Environment variables understood by the $0 script:"
      echo '    DALTON_TMPDIR             : scratch directory'
      echo '    DALTON_LAUNCHER           : launcher for the dalton.x binary'
     }
#
# Define backup function
#
backup () {
  if [ $opt_nobackup -eq 0 ]; then
    if [ "$1" = "-v" ]; then ekko=1; shift
    else ekko=0;
    fi
    for i in $* ; do
       if [ -f "${i}" ]; then
          for j in 6 5 4 3 2 1 0 ; do
             jp=`expr $j + 1`
             if [ -f "${i}.${j}" ]; then
                [ $ekko -eq 1 ] && echo "Backup: renaming ${i}.${j} to ${i}.${jp}"
                mv -f "${i}.${j}" "${i}.${jp}"
             fi
          done
          if [ $ekko -eq 1 ]; then echo "Backup: renaming ${i} to ${i}.0"; fi
          mv -f "${i}" "${i}.0"
       fi
    done
  fi
}
#
# Interpret input
#
while [ -n "`echo $1 | grep '^-'`" ]; do
    case $1 in
      -b ) BASDIR="$2:$BASDIR"; shift;;
      -d ) optd=1;;
      -D ) optD=0;;
      -pg ) optpg=1;;
      -lslib_test ) opt_lslib_test=1;;
      -restart ) opt_restart=1;;
      -dens ) optdens=1;;
      -ext ) OUTEXT=$2; shift;;
      -f ) optf="$2"; shift;;
      -N ) optn=$2; shift;;
      -m ) WRKMEM=$2; export WRKMEM; shift;;
      -M ) WRKMEM=`expr $2 "*" 128000`; export WRKMEM; shift;;
      -o ) OUTFIL=$2; export OUTFIL; opto=1; shift;;
      -t ) DALTON_TMPDIR=$2; shift;;
      -w ) WRKDIR=$2; shift;;
      -exe ) LSDALTON_EXECUTABLE=$2; shift;;
      -nobackup ) opt_nobackup=1;;
      -noarch ) opt_noarch=1;;
      * ) usage; exit 1;;
   esac
   shift
done

# append default basis set directory
len_INSTALL_BASDIR=`echo $INSTALL_BASDIR | wc -c`
if [ $len_INSTALL_BASDIR -gt 1 ]; then
   # do not count newline char
   BASDIR="$BASDIR:$INSTALL_BASDIR"
fi
export BASDIR

# check for correct input
if [ -z "$1" ]; then
   echo 'Input file[s] not specified'
   usage
   exit 1
fi

if [ -z "$DALTON_TMPDIR" ]; then
    # DALTON_TMPDIR is still not set, better stop here
    echo "ERROR: searched for suitable scratch directories"
    echo "       among $scratch_dir_candidates"
    echo "       but none of them exists"
    echo "       please either set the DALTON_TMPDIR environment variable"
    echo "       or use -t to set the scratch directory"
    exit 1
fi

if [ -z "$2" ]; then
#  remove .mol, if added by user
   molfil=`basename $1 .mol`
   dalfil=$molfil
   outnam=$molfil
else
#  remove .mol and .dal, if added by user
   molfil=`basename $2 .mol`
   dalfil=`basename $1 .dal`
   if [ "$molfil" = "$dalfil" ]; then
      outnam=$molfil
   else
      outnam=${dalfil}_${molfil}
   fi
fi
#
export DALTON_TMPDIR
#
echo
echo "   ******************************************* "
echo "   **** OUTPUT FROM LSDALTON SHELL SCRIPT **** "
echo "   ****        Release 2013               **** "
echo "   ******************************************* "
echo; echo "   Invocation: $0 $paramlist"
echo; echo "   `date`"
echo;
echo "   Calculation: $outnam  (input files: $dalfil and $molfil)"
echo "   PID        : $$"
echo "   Input dir  : $WRKDIR"
echo "   Scratch dir: $DALTON_TMPDIR/$outnam"
echo;
#
if [ ! -d "$DALTON_TMPDIR" ]; then
   mkdir -p $DALTON_TMPDIR
fi

SCRATCHDIR=$DALTON_TMPDIR/$2;

if [ -d "$DALTON_TMPDIR" -a -w "$DALTON_TMPDIR" ]; then
   if [ $optd -eq 1 ] ; then
      rm -rf $DALTON_TMPDIR/$outnam
   fi
   if [ ! -d "$DALTON_TMPDIR/$outnam" ]; then
      mkdir -p $DALTON_TMPDIR/$outnam
   fi
   cd $DALTON_TMPDIR/$outnam
   if [ -s $WRKDIR/$dalfil.$DALEXT -a -r $WRKDIR/$dalfil.$DALEXT ]; then
      cp $WRKDIR/$dalfil.$DALEXT LSDALTON.INP
   else
      echo "$WRKDIR/$dalfil.$DALEXT does not exist or is not readable"
      exit 1
   fi
   if [ -s $WRKDIR/$molfil.$MOLEXT -a -r $WRKDIR/$molfil.$MOLEXT ]; then
      cp $WRKDIR/$molfil.$MOLEXT MOLECULE.INP
   else
      echo "$WRKDIR/$molfil.$MOLEXT does not exist or is not readable"
      echo "===> assuming single-input file calculation."
      cp $WRKDIR/$dalfil.$DALEXT MOLECULE.INP
   fi
   if [ $optdens -eq 1 ] ; then
      echo "copy $WRKDIR/$molfil.dens.restart"
      [ -f $WRKDIR/$molfil.dens.restart ] && cp -f $WRKDIR/$molfil.dens.restart dens.restart
      [ -f $WRKDIR/$molfil.fock.restart ] && cp -f $WRKDIR/$molfil.fock.restart fock.restart
      [ -f $WRKDIR/$molfil.lcm_orbitals.u ] && cp -f $WRKDIR/$molfil.lcm_orbitals.u lcm_orbitals.u
   fi
   if [ "$optf" != "" ] ; then
      if [ -s $WRKDIR/$optf.tar.gz -a -r $WRKDIR/$optf.tar.gz ] ; then
         echo "Unpacking restart files..."
     gunzip < $WRKDIR/$optf.tar.gz | tar xvf -
      else
     echo "$WRKDIR/$optf.tar.gz does not exist or is not readable"
     exit 1
      fi
   fi
   if [ $opt_restart -eq 1 ] ; then
    if [ -s $WRKDIR/$dalfil.$DALEXT.2 -a -r $WRKDIR/$dalfil.$DALEXT.2 ]; then
       cp $WRKDIR/$dalfil.$DALEXT.2 LSDALTON.INP.2
    else
       echo "$WRKDIR/$dalfil.$DALEXT.2 does not exist or is not readable"
       exit 1
    fi
   fi
else
   echo "$DALTON_TMPDIR does not exist or is not writeable"
   exit 1
fi

if [ -n "$DALTON_NUM_MPI_PROCS" ]; then
    if [ $optn -eq 0 ] ; then
        # DALTON_NUM_MPI_PROCS is set but -N is not
        # in this case default -N to DALTON_NUM_MPI_PROCS
        optn=$DALTON_NUM_MPI_PROCS
    fi
fi

if [ $optn -gt 1 ] ; then
   if [ $opt_lslib_test -eq 1 ]; then
      MPI=$LSLIB_TEST
   else
      MPI=$LSDALTON_EXECUTABLE
   fi
   if [ -s $MPIRUN -a -x $MPIRUN ]; then
      if [ -a $MPI -a -x $MPI ]; then
        $MPIRUN -np $optn $MPI
        lsdalton_exitcode=$?
        if [ $opt_restart -eq 1 ] ; then
           cp LSDALTON.INP.2 LSDALTON.INP
           $MPIRUN -np $optn $MPI
        fi
      else
     echo "$MPI does not exist or is not executeable"
     exit 1
      fi
   else
      echo "$MPIRUN does not exist or is not executeable"
      exit 1
   fi
else
    if ! [ -s $LSDALTON_EXECUTABLE -a -x $LSDALTON_EXECUTABLE ]; then
       echo; echo  "FATAL ERROR:"
       echo "$LSDALTON_EXECUTABLE does not exist or is not executeable"
       exit 1
    fi
    
    if [ $opt_lslib_test -eq 1 ]; then
        $LSLIB_TEST
        lsdalton_exitcode=$?
    else
        if [ -n "$LSDALTON_LAUNCHER" ]; then
           LSDALTON_EXE="$LSDALTON_LAUNCHER $LSDALTON_EXECUTABLE"
        else
           LSDALTON_EXE=$LSDALTON_EXECUTABLE
        fi

        $LSDALTON_EXE
        lsdalton_exitcode=$?
        if [ $opt_restart -eq 1 ] ; then
            cp LSDALTON.INP.2 LSDALTON.INP
            $LSDALTON_EXE
            restart_exitcode=$?
            if [ $lsdalton_exitcode -eq 0 ] ; then
                lsdalton_exitcode=$restart_exitcode
            fi
        fi
    fi

    if [ $optpg -eq 1 ] ; then
        gprof $LSDALTON_EXECUTABLE gmon.out > PROFILE
    fi

    if [ $optdens -eq 1 ] ; then
        echo "copy dens.restart to $WRKDIR/$molfil.dens.restart back"
        [ -f dens.restart ] && cp -f dens.restart $WRKDIR/$molfil.dens.restart
        [ -f fock.restart ] && cp -f fock.restart $WRKDIR/$molfil.fock.restart
        [ -f lcm_orbitals.u ] && cp -f lcm_orbitals.u $WRKDIR/$molfil.lcm_orbitals.u
    fi
fi

if [ $lsdalton_exitcode -ne 0 ] ; then
   echo; echo  "SERIOUS ERROR:"
   echo "LSDALTON finished with non-zero exit code: $lsdalton_exitcode"
   echo; echo "File list in scratch directory:";echo
   ls -lt
   du -h
fi

filelist="LSDALTON.ERR SIRIUS.RST RESULTS.RSP RSPVEC SIRIFC DALTON.NCA UNIT1 UNIT2 DALTON.MOL DALTON.ORB DALTON.IRC DALTON.BAS DALTON.TRJ DALTON.CM DALTON.HES DALTON.MOPUN DALTON.PHS DALTON.PHS DALTON.WLK molden.inp dens.restart fock.restart lcm_orbitals.u runopt.history"

for i in $filelist ; do
   if [ -s $i -a -r $i ] ; then
      tarfilelist=$tarfilelist" "$i
   fi
done

if [ $opt_noarch -eq 0 ]; then
    if [ -s "first.wrl" -a -r "first.wrl" ] ; then
       tar cf - $tarfilelist *wrl | gzip -9 > $outnam.tar.gz
    else
       tar cf - $tarfilelist | gzip -9 > $outnam.tar.gz
    fi
fi

if [ -s $outnam.tar.gz ] ; then
   backup -v $WRKDIR/$outnam.tar.gz
   cp $outnam.tar.gz $WRKDIR
   echo "$outnam.tar.gz has been copied to $WRKDIR"
else
    echo "$outnam.tar.gz has not been created and has thus not been copied to $WRKDIR"
fi

   if [ $opto -eq 1 ] ; then
      if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
         echo "Output is in $WRKDIR/$OUTFIL as requested in input."
      else
         echo "$WRKDIR/$OUTFIL has not been created from the present run"
         if [ $optD -eq 1 ] ; then
            echo "$DALTON_TMPDIR/$outnam is therefore not deleted by this script."
         fi
         exit 2
      fi
   else
      backup -v $WRKDIR/$outnam.$OUTEXT
      if [ -s LSDALTON.OUT -a -r LSDALTON.OUT ]; then
         cp LSDALTON.OUT $WRKDIR/$outnam.$OUTEXT
         [ -f PROFILE ] && cp -f PROFILE $WRKDIR/$outnam.prof.$OUTEXT
      else
         echo "LSDALTON.OUT has not been created from the present run."
         if [ $optD -eq 1 ] ; then
            echo "$DALTON_TMPDIR/$outnam is therefore not deleted by this script."
         fi
         echo "List of created files in $DALTON_TMPDIR/$outnam :"
         ls -sltr
         exit 2
      fi
   fi
cd $WRKDIR
if [ $optD -eq 1 ] ; then
   rm -rf $DALTON_TMPDIR/$outnam
fi

exit $lsdalton_exitcode
