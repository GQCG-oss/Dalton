LSDALTON=@PROJECT_BINARY_DIR@/lsdalton.x
EXTERNLOC=@PROJECT_BINARY_DIR@/externloc.x
GRIDGEN=@PROJECT_BINARY_DIR@/gridgen.x
LSLIB_TEST=@PROJECT_BINARY_DIR@/lslib_tester.x
DALMPI=@PROJECT_BINARY_DIR@/lsdalton.x
MPIRUN=@MPIEXEC@
INSTALL_BASDIR=@BASIS_DIR@
[ -z "$TMPDIR" ] && TMPDIR=@SCRATCH_DIR@
WRKDIR=`pwd`
export WRKDIR
#
paramlist="$*"
# default extensions
OUTEXT="out"
DALEXT="dal"
MOLEXT="mol"
AUXEXT="MOL NCA ORB IRC TRJ CM HES MOPUN WLK"
#deafult values for options
opt_valgrind=0
opt_externloc=0
opt_lslib_test=0
opt_gridgen=0
opta=0
optA=0
optd=0
optgeo1=0
optgeo2=0
optdens=0
optpg=0
optD=1
optf=
optF=0
optn=0
optlam=0
opti=0
opto=0
optstex=0
optvib=0
opthes=0
optloc=0
optI=0
optv=0
optw=0
frl=rel
#
# Define usage message
#
usage (){
	  echo
	  echo "Usage:    lsdalton [-b directory] [-d] [-D] [-ext log | -o file] [-f] [-m mem | -M mem]"
	  echo  "[-N nodes] [-lam file] [-o file] [-t directory] [-w directory] dal{.$DALEXT} mol{.$MOLEXT}"
	  echo
	  echo 'Options:'
	  echo ' -b dir    change directory where basis sets are searched for to dir'
	  echo ' -d        delete TMPDIR before calculation starts'
	  echo ' -pg       do profiling'
	  echo ' -dens     copy dens.restart and maybe fock.restart lcm_orbitals.u'
	  echo ' -valgrind run with valgrind'
	  echo ' -externloc run with externloc'	  
	  echo ' -lslib_test run lslib test'	  
	  echo ' -gridgen run with gridgen'	  
	  echo ' -D        do not delete TMPDIR after calculation stops'
	  echo ' -ext log  change output extension from ".out" to ".log"'
	  echo ' -o FILE   redirect output from program to FILE in WRKDIR'
	  echo ' -f FILE   extract content of FILE.tar.gz from WRKDIR in TMPDIR before calculation starts'
	  echo ' -m mem    set scratch memory to mem Mwords'
	  echo ' -M mem    set scratch memory to mem Mb'
	  echo ' -N num    use MPI version with num nodes'
	  echo ' -lam file call "lamboot file" and "wipe file" before and after mpirun'
	  echo ' -t dir    change TMPDIR from default to dir'
	  echo ' -w dir    change WRKDIR from default to dir'
	  echo ' -exe exec change the DALTON and DALMPI executables from default to exec'
	  echo
	 }
#
# Define backup function
#
backup () {
  if [ "$1" = "-v" ]; then ekko=1; shift
  else ekko=0;
  fi
  for i in $* ; do
     if [ -f "${i}" ]; then
        for j in 6 5 4 3 2 1 0 ; do
           jp=`expr $j + 1`
           if [ -f "${i}.${j}" ]; then 
              [ $ekko -eq 1 ] && echo "Backup: renaming ${i}.${j} to ${i}.${jp}"
              mv -f "${i}.${j}" "${i}.${jp}"
           fi
        done
        if [ $ekko -eq 1 ]; then echo "Backup: renaming ${i} to ${i}.0"; fi
        mv -f "${i}" "${i}.0"
     fi
  done
}
#
# Interpret input
#
while [ -n "`echo $1 | grep '^-'`" ]; do
    case $1 in
      -b ) BASDIR="$2"; export BASDIR; shift;;
      -d ) optd=1;;
      -D ) optD=0;;
      -pg ) optpg=1;;
      -valgrind ) opt_valgrind=1;;
      -externloc ) opt_externloc=1;;
      -lslib_test ) opt_lslib_test=1;;
      -gridgen ) opt_gridgen=1;;
      -geo1 ) optgeo1=1;;
      -geo2 ) optgeo2=1;;
      -dens ) optdens=1;;
      -ext ) OUTEXT=$2; shift;;
      -f ) optf="$2"; shift;;
      -N ) optn=$2; shift;;
      -lam* ) optlam=$2; shift;;
      -m ) WRKMEM=$2; export WRKMEM; shift;;
      -M ) WRKMEM=`expr $2 "*" 128000`; export WRKMEM; shift;;
      -o ) OUTFIL=$2; export OUTFIL; opto=1; shift;;
      -t ) TMPDIR=$2; shift;;
      -w ) WRKDIR="`pwd`/$2"; shift;;
      -exe ) DALTON=$2; DALMPI=$2; shift;;
      * ) usage; exit 1;;
   esac
   shift
done
# check for correct input
if [ -z "$1" ]; then
   echo 'Input file[s] not specified'
   usage
   exit 1
fi
if [ -z "$2" ]; then
#  remove .mol, if added by user
   molfil=`basename $1 .mol`
   dalfil=$molfil
   outnam=$molfil
else
#  remove .mol and .dal, if added by user
   molfil=`basename $2 .mol`
   dalfil=`basename $1 .dal`
   if [ "$molfil" = "$dalfil" ]; then
      outnam=$molfil
   else
      outnam=${dalfil}_${molfil}
   fi
fi
#
export TMPDIR
#
echo
echo "   ******************************************* "
echo "   **** OUTPUT FROM LSDALTON SHELL SCRIPT **** "
echo "   ****        Release 2011               **** "
echo "   ******************************************* "
echo; echo "   Invocation: $0 $paramlist"
echo; echo "   `date`"
echo;
echo "   Calculation: $outnam  (input files: $dalfil and $molfil)"
echo "   PID        : $$"
echo "   Input dir  : $WRKDIR"
echo "   Scratch dir: $TMPDIR/$outnam"
#echo "  Work memory: $WRKMEM"
echo;
#
if [ ! -d "$TMPDIR" ]; then
   mkdir -p $TMPDIR
fi

SCRATCHDIR=$TMPDIR/$2;

if [ -d "$TMPDIR" -a -w "$TMPDIR" ]; then
   if [ $optd -eq 1 ] ; then
      rm -rf $TMPDIR/$outnam
   fi
   if [ ! -d "$TMPDIR/$outnam" ]; then
      mkdir -p $TMPDIR/$outnam
   fi
   cd $TMPDIR/$outnam
   if [ -s $WRKDIR/$dalfil.$DALEXT -a -r $WRKDIR/$dalfil.$DALEXT ]; then
      cp $WRKDIR/$dalfil.$DALEXT DALTON.INP
   else
      echo "$WRKDIR/$dalfil.$DALEXT does not exist or is not readable"
      exit 1
   fi
   if [ -s $WRKDIR/$molfil.$MOLEXT -a -r $WRKDIR/$molfil.$MOLEXT ]; then
      cp $WRKDIR/$molfil.$MOLEXT MOLECULE.INP
   else
      echo "$WRKDIR/$molfil.$MOLEXT does not exist or is not readable"
      echo "===> assuming single-input file calculation."
      cp $WRKDIR/$dalfil.$DALEXT MOLECULE.INP
   fi
   if [ $optdens -eq 1 ] ; then
      echo "copy $WRKDIR/$molfil.dens.restart"
      [ -f $WRKDIR/$molfil.dens.restart ] && cp -f $WRKDIR/$molfil.dens.restart dens.restart
      [ -f $WRKDIR/$molfil.fock.restart ] && cp -f $WRKDIR/$molfil.fock.restart fock.restart
      [ -f $WRKDIR/$molfil.lcm_orbitals.u ] && cp -f $WRKDIR/$molfil.lcm_orbitals.u lcm_orbitals.u
   fi 
   if [ $optgeo2 -eq 1 ] ; then
      [ -f $WRKDIR/$molfil.runopt.history ] && cp -f $WRKDIR/$molfil.runopt.history runopt.history 
      [ -f $WRKDIR/$molfil.$MOLEXT ] && cp -f $WRKDIR/$molfil.$MOLEXT runopt.initMOLECULE
      if [ -s $WRKDIR/$dalfil.$DALEXT.2 -a -r $WRKDIR/$dalfil.$DALEXT.2 ]; then
	  cp $WRKDIR/$dalfil.$DALEXT.2 DALTON.INP
      else
	  echo "$WRKDIR/$dalfil.$DALEXT.2 does not exist or is not readable"
	  exit 1
      fi
   fi
   if [ "$optf" != "" ] ; then
      if [ -s $WRKDIR/$optf.tar.gz -a -r $WRKDIR/$optf.tar.gz ] ; then
         echo "Unpacking restart files..."
	 gunzip < $WRKDIR/$optf.tar.gz | tar xvf -
      else
	 echo "$WRKDIR/$optf.tar.gz does not exist or is not readable"
	 exit 1
      fi
   fi
else
   echo "$TMPDIR does not exist or is not writeable"
   exit 1
fi
#
if [ $optn -gt 1 ] ; then
   if [ $opt_lslib_test -eq 1 ]; then
      MPI=$LSLIB_TEST
   else
      MPI=$DALMPI
   fi
   if [ -s $MPIRUN -a -x $MPIRUN ]; then
      if [ -a $MPI -a -x $MPI ]; then
	 if [ $optlam -eq 0 ] ; then
	    $MPIRUN -np $optn $MPI
	 else
	    lamboot -v  $WRKDIR/$optlam
	    $MPIRUN -np $optn $MPI
	    wipe    -v  $WRKDIR/$optlam
	 fi
      else
	 echo "$MPI does not exist or is not executeable"
	 exit 1
      fi
   else
      echo "$MPIRUN does not exist or is not executeable"
      exit 1
   fi
else
   if [ -s $LSDALTON -a -x $LSDALTON ]; then
      if [ $optgeo1 -eq 1 ] ; then
      	 $LSDALTON
	 lsdalton_exitcode=$?
      else
	if [ $optgeo2 -eq 1 ] ; then
	   $GEOOPT
	   lsdalton_exitcode=$?
        else
	 if [ $opt_valgrind -eq 1 ]; then	
	    valgrind --tool=memcheck --track-origins=yes --leak-check=full --show-reachable=yes $LSDALTON
	    lsdalton_exitcode=$?
	 else	
	     if [ $opt_externloc -eq 1 ]; then	
	         $LSDALTON
		 echo 'EXTERNLOC lcm_orbitals.u something.u'
                 $EXTERNLOC lcm_orbitals.u something.u 1 1 MLO >> EXTERNLOC.OUT
		 lsdalton_exitcode=$?
	     else	  
	      if [ $opt_gridgen -eq 1 ]; then	
	     	$LSDALTON
		echo 'GRIDGEN '
                $GRIDGEN lcm_orbitals.u orbital.plt PLT 1 >> GRIDGEN.OUT
		lsdalton_exitcode=$?
              else
               if [ $opt_lslib_test -eq 1 ]; then
                  $LSLIB_TEST
	          lsdalton_exitcode=$?
	       else	  
	          $LSDALTON	 	
	          lsdalton_exitcode=$?
               fi
              fi
 	     fi
   	 fi		   
	fi
      fi
      if [ $optpg -eq 1 ] ; then
	 gprof $LSDALTON gmon.out > PROFILE
      fi      
      if [ $optdens -eq 1 ] ; then
      	 echo "copy dens.restart to $WRKDIR/$molfil.dens.restart back"
	 [ -f dens.restart ] && cp -f dens.restart $WRKDIR/$molfil.dens.restart
	 [ -f fock.restart ] && cp -f fock.restart $WRKDIR/$molfil.fock.restart
	 [ -f lcm_orbitals.u ] && cp -f lcm_orbitals.u $WRKDIR/$molfil.lcm_orbitals.u
      fi
      if [ $optgeo1 -eq 1 ] ; then
	  [ -f runopt.history ] && cp -f runopt.history $WRKDIR/$molfil.runopt.history
	  [ -f MOLECULE.OUT ] && cp -f MOLECULE.OUT $WRKDIR/$molfil.molout1
      fi
      if [ $optgeo2 -eq 1 ] ; then
	 [ -f MOLECULE.OUT ] && cp -f MOLECULE.OUT $WRKDIR/$molfil.molout2
      fi
   else
      echo; echo  "FATAL ERROR:"
      echo "$LSDALTON does not exist or is not executeable"
      exit 1
   fi
fi

if [ $lsdalton_exitcode -ne 0 ] ; then
   echo; echo  "SERIOUS ERROR:"
   echo "LSDALTON finished with non-zero exit code: $lsdalton_exitcode"
   echo; echo "File list in scratch directory:";echo
   ls -lt
   du -h
fi

filelist="LSDALTON.ERR SIRIUS.RST RESULTS.RSP RSPVEC SIRIFC DALTON.NCA UNIT1 UNIT2 DALTON.MOL DALTON.ORB DALTON.IRC DALTON.BAS DALTON.TRJ DALTON.CM DALTON.HES DALTON.MOPUN DALTON.PHS DALTON.PHS DALTON.WLK molden.inp dens.restart fock.restart lcm_orbitals.u runopt.history"

for i in $filelist ; do
   if [ -s $i -a -r $i ] ; then
      tarfilelist=$tarfilelist" "$i
   fi
done

if [ -s "first.wrl" -a -r "first.wrl" ] ; then
   tar cf - $tarfilelist *wrl | gzip -9 > $outnam.tar.gz
else
   tar cf - $tarfilelist | gzip -9 > $outnam.tar.gz
fi

if [ -s $outnam.tar.gz ] ; then
   backup -v $WRKDIR/$outnam.tar.gz 
   cp $outnam.tar.gz $WRKDIR
   echo "$outnam.tar.gz has been copied to $WRKDIR"
else
    echo "$outnam.tar.gz has not been created and has thus not been copied to $WRKDIR"
fi

   if [ $opto -eq 1 ] ; then
      if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
         echo "Output is in $WRKDIR/$OUTFIL as requested in input."
      else
         echo "$WRKDIR/$OUTFIL has not been created from the present run"
         if [ $optD -eq 1 ] ; then
            echo "$TMPDIR/$outnam is therefore not deleted by this script."
         fi
         exit 2
      fi
   else
      backup -v $WRKDIR/$outnam.$OUTEXT
      if [ -s LSDALTON.OUT -a -r LSDALTON.OUT ]; then
         cp LSDALTON.OUT $WRKDIR/$outnam.$OUTEXT
         [ -f EXTERNLOC.OUT ] && cp -f EXTERNLOC.OUT $WRKDIR/$outnam.ext.$OUTEXT
         [ -f GRIDGEN.OUT ] && cp -f GRIDGEN.OUT $WRKDIR/$outnam.grid.$OUTEXT
         [ -f PROFILE ] && cp -f PROFILE $WRKDIR/$outnam.prof.$OUTEXT
	 if [ $optgeo1 -eq 1 ] ; then
	 	 cp $WRKDIR/$outnam.$OUTEXT $WRKDIR/$outnam.$OUTEXT.original
	 fi
      else
         echo "LSDALTON.OUT has not been created from the present run."
         if [ $optD -eq 1 ] ; then
            echo "$TMPDIR/$outnam is therefore not deleted by this script."
         fi
         echo "List of created files in $TMPDIR/$outnam :"
         ls -sltr
         exit 2
      fi
   fi
cd $WRKDIR
if [ $optD -eq 1 ] ; then
   rm -rf $TMPDIR/$outnam
fi

exit $lsdalton_exitcode

# end of LSDALTON job script

