#!/bin/sh 
#########################################################################
#
# Shell script for running LSDALTON prof suite
#
# by Christof Haettig and Kasper Hald, Sep. 2000
#
#########################################################################

if [ -x '/usr/bin/time' ]; then
 TIMING_OF="/usr/bin/time" #hjaaj sep07: gnu time gives more info than built-in time
else
 TIMING_OF=" "
fi
export BASDIR=/home/tkjaer/DaltonDevelopment2014/DebugMaster/basis
#########################################################################
# define all the different prof suites
#########################################################################
#The SHORT List is calculations around 1min
SHORT="LSint/00024atoms_0246basfunc_gc_K
LSint/00066atoms_0286basfunc_nongc_K
LSint/00066atoms_0286basfunc_gc_K
LSint/00008atoms_0278basfunc_nongc_K
LSint/00008atoms_0278basfunc_gc_K
LSint/00018atoms_0180basfunc_gc_K
LSint/00012atoms_0210basfunc_gc_K
LSint/00006atoms_0166basfunc_gc_K
LSint/00024atoms_0246basfunc_gc_dfJ
LSint/00066atoms_0286basfunc_nongc_dfJ
LSint/00066atoms_0286basfunc_gc_dfJ
LSint/00008atoms_0278basfunc_nongc_dfJ
LSint/00008atoms_0278basfunc_gc_dfJ
LSint/00018atoms_0180basfunc_gc_dfJ
LSint/00024atoms_0246basfunc_gc_J
LSint/00066atoms_0286basfunc_nongc_J
LSint/00066atoms_0286basfunc_gc_J
LSint/00008atoms_0278basfunc_nongc_J
LSint/00008atoms_0278basfunc_gc_J
LSint/00018atoms_0180basfunc_gc_J
LSint/00012atoms_0210basfunc_gc_J
LSint/00006atoms_0166basfunc_gc_J
LSint/00082atoms_0724basfunc_gc_J
LSint/00082atoms_0724basfunc_nongc_J
LSint/00024atoms_0246basfunc_gc_XC
LSint/00066atoms_0286basfunc_nongc_XC
LSint/00066atoms_0286basfunc_gc_XC
LSint/00008atoms_0278basfunc_nongc_XC
LSint/00008atoms_0278basfunc_gc_XC
LSint/00018atoms_0180basfunc_gc_XC
LSint/00012atoms_0210basfunc_gc_XC
LSint/00006atoms_0166basfunc_gc_XC
LSint/00082atoms_0724basfunc_gc_XC
LSint/00082atoms_0724basfunc_nongc_XC"
# WARNING THERE ARE SOME ISSUES WITH THESE CASES
#LSint/00012atoms_0210basfunc_gc_dfJ
#LSint/00082atoms_0724basfunc_gc_K
#LSint/00082atoms_0724basfunc_nongc_K
#LSint/00082atoms_0724basfunc_gc_dfJ
#LSint/00082atoms_0724basfunc_nongc_dfJ
# WARNING THIS CASE IS too fast 0 wall time 
#LSint/00006atoms_0166basfunc_gc_dfJ 

#LSint/00042atoms_0324basfunc_2240auxbasfunc_nongc_pariJ
#The MEDIUM List is calculations limited to around 10min
#MEDIUM="LSint/00012atoms_0341basfunc_gc_K
#LSint/00162atoms_1444basfunc_gc_K
#LSint/00042atoms_0570basfunc_gc_K
#LSint/00053atoms_1160basfunc_gc_K
#LSint/00053atoms_1160basfunc_nongc_K
#LSint/00168atoms_0882basfunc_gc_K
#LSint/00018atoms_0492basfunc_gc_K
#LSint/00203atoms_1113basfunc_gc_K
#LSint/00203atoms_1113basfunc_nongc_K
#LSint/00060atoms_0540basfunc_gc_K
#LSint/00082atoms_1130basfunc_gc_K
#LSint/00012atoms_0341basfunc_gc_dfJ
#LSint/00162atoms_1444basfunc_gc_dfJ
#LSint/00042atoms_0570basfunc_gc_dfJ
#LSint/00053atoms_1160basfunc_gc_dfJ
#LSint/00053atoms_1160basfunc_nongc_dfJ
#LSint/00168atoms_0882basfunc_gc_dfJ
#LSint/00018atoms_0492basfunc_gc_dfJ
#LSint/00203atoms_1113basfunc_gc_dfJ
#LSint/00203atoms_1113basfunc_nongc_dfJ
#LSint/00060atoms_0540basfunc_gc_dfJ
#LSint/00082atoms_1130basfunc_gc_dfJ
#LSint/00012atoms_0341basfunc_gc_J
#LSint/00162atoms_1444basfunc_gc_J"
MEDIUM="LSint/00042atoms_0570basfunc_gc_J
LSint/00053atoms_1160basfunc_gc_J
LSint/00053atoms_1160basfunc_nongc_J
LSint/00168atoms_0882basfunc_gc_J
LSint/00018atoms_0492basfunc_gc_J
LSint/00203atoms_1113basfunc_gc_J
LSint/00203atoms_1113basfunc_nongc_J
LSint/00060atoms_0540basfunc_gc_J
LSint/00082atoms_1130basfunc_gc_J
LSint/00012atoms_0341basfunc_gc_XC
LSint/00162atoms_1444basfunc_gc_XC
LSint/00042atoms_0570basfunc_gc_XC
LSint/00053atoms_1160basfunc_gc_XC
LSint/00053atoms_1160basfunc_nongc_XC
LSint/00168atoms_0882basfunc_gc_XC
LSint/00018atoms_0492basfunc_gc_XC
LSint/00203atoms_1113basfunc_gc_XC
LSint/00203atoms_1113basfunc_nongc_XC
LSint/00060atoms_0540basfunc_gc_XC
LSint/00082atoms_1130basfunc_gc_XC"
#LONG List is calculations limited to around 30min
pariK="LSint/00006atoms_0166basfunc_gc_pariK
LSint/00008atoms_0278basfunc_gc_pariK
LSint/00008atoms_0278basfunc_nongc_pariK
LSint/00012atoms_0210basfunc_gc_pariK
LSint/00012atoms_0341basfunc_gc_pariK
LSint/00018atoms_0180basfunc_gc_pariK
LSint/00018atoms_0492basfunc_gc_pariK
LSint/00024atoms_0246basfunc_gc_pariK
LSint/00042atoms_0570basfunc_gc_pariK
LSint/00053atoms_1160basfunc_gc_pariK
LSint/00053atoms_1160basfunc_nongc_pariK
LSint/00060atoms_0540basfunc_gc_pariK
LSint/00066atoms_0286basfunc_gc_pariK
LSint/00066atoms_0286basfunc_nongc_pariK
LSint/00082atoms_0724basfunc_gc_pariK
LSint/00082atoms_0724basfunc_nongc_pariK
LSint/00082atoms_1130basfunc_gc_pariK
LSint/00162atoms_1444basfunc_gc_pariK
LSint/00168atoms_0882basfunc_gc_pariK
LSint/00203atoms_1113basfunc_gc_pariK
LSint/00203atoms_1113basfunc_nongc_pariK"
K="LSint/00024atoms_0246basfunc_gc_K
LSint/00066atoms_0286basfunc_nongc_K
LSint/00066atoms_0286basfunc_gc_K
LSint/00008atoms_0278basfunc_nongc_K
LSint/00008atoms_0278basfunc_gc_K
LSint/00018atoms_0180basfunc_gc_K
LSint/00012atoms_0210basfunc_gc_K
LSint/00006atoms_0166basfunc_gc_K
LSint/00082atoms_0724basfunc_gc_K
LSint/00082atoms_0724basfunc_nongc_K
LSint/00012atoms_0341basfunc_gc_K
LSint/00162atoms_1444basfunc_gc_K
LSint/00042atoms_0570basfunc_gc_K
LSint/00053atoms_1160basfunc_gc_K
LSint/00053atoms_1160basfunc_nongc_K
LSint/00168atoms_0882basfunc_gc_K
LSint/00018atoms_0492basfunc_gc_K
LSint/00203atoms_1113basfunc_gc_K
LSint/00203atoms_1113basfunc_nongc_K
LSint/00060atoms_0540basfunc_gc_K
LSint/00082atoms_1130basfunc_gc_K"
DFJ="LSint/00066atoms_0286basfunc_nongc_dfJ
LSint/00066atoms_0286basfunc_gc_dfJ
LSint/00008atoms_0278basfunc_nongc_dfJ
LSint/00008atoms_0278basfunc_gc_dfJ
LSint/00018atoms_0180basfunc_gc_dfJ
LSint/00012atoms_0210basfunc_gc_dfJ
LSint/00006atoms_0166basfunc_gc_dfJ
LSint/00082atoms_0724basfunc_gc_dfJ
LSint/00082atoms_0724basfunc_nongc_dfJ
LSint/00024atoms_0246basfunc_gc_dfJ
LSint/00012atoms_0341basfunc_gc_dfJ
LSint/00162atoms_1444basfunc_gc_dfJ
LSint/00042atoms_0570basfunc_gc_dfJ
LSint/00053atoms_1160basfunc_gc_dfJ
LSint/00053atoms_1160basfunc_nongc_dfJ
LSint/00168atoms_0882basfunc_gc_dfJ
LSint/00018atoms_0492basfunc_gc_dfJ
LSint/00203atoms_1113basfunc_gc_dfJ
LSint/00203atoms_1113basfunc_nongc_dfJ
LSint/00060atoms_0540basfunc_gc_dfJ
LSint/00082atoms_1130basfunc_gc_dfJ
LSint/00168atoms_7518basfunc_gc_dfJ"
J="LSint/00024atoms_0246basfunc_gc_J
LSint/00066atoms_0286basfunc_nongc_J
LSint/00066atoms_0286basfunc_gc_J
LSint/00008atoms_0278basfunc_nongc_J
LSint/00008atoms_0278basfunc_gc_J
LSint/00018atoms_0180basfunc_gc_J
LSint/00012atoms_0210basfunc_gc_J
LSint/00006atoms_0166basfunc_gc_J
LSint/00082atoms_0724basfunc_gc_J
LSint/00082atoms_0724basfunc_nongc_J
LSint/00012atoms_0341basfunc_gc_J
LSint/00162atoms_1444basfunc_gc_J
LSint/00042atoms_0570basfunc_gc_J
LSint/00053atoms_1160basfunc_gc_J
LSint/00053atoms_1160basfunc_nongc_J
LSint/00168atoms_0882basfunc_gc_J
LSint/00018atoms_0492basfunc_gc_J
LSint/00203atoms_1113basfunc_gc_J
LSint/00203atoms_1113basfunc_nongc_J
LSint/00060atoms_0540basfunc_gc_J
LSint/00082atoms_1130basfunc_gc_J"
#LSint/00168atoms_7518basfunc_gc_J"
XC="LSint/00024atoms_0246basfunc_gc_XC
LSint/00066atoms_0286basfunc_nongc_XC
LSint/00066atoms_0286basfunc_gc_XC
LSint/00008atoms_0278basfunc_nongc_XC
LSint/00008atoms_0278basfunc_gc_XC
LSint/00018atoms_0180basfunc_gc_XC
LSint/00012atoms_0210basfunc_gc_XC
LSint/00006atoms_0166basfunc_gc_XC
LSint/00082atoms_0724basfunc_gc_XC
LSint/00082atoms_0724basfunc_nongc_XC
LSint/00012atoms_0341basfunc_gc_XC
LSint/00162atoms_1444basfunc_gc_XC
LSint/00042atoms_0570basfunc_gc_XC
LSint/00053atoms_1160basfunc_gc_XC
LSint/00053atoms_1160basfunc_nongc_XC
LSint/00168atoms_0882basfunc_gc_XC
LSint/00018atoms_0492basfunc_gc_XC
LSint/00203atoms_1113basfunc_gc_XC
LSint/00203atoms_1113basfunc_nongc_XC
LSint/00060atoms_0540basfunc_gc_XC
LSint/00082atoms_1130basfunc_gc_XC
LSint/00168atoms_7518basfunc_gc_XC"
LONG="LSint/00120atoms_0912basfunc_gc_K
LSint/00162atoms_2250basfunc_gc_K"
pariKnew="LSint/o_pariK
LSint/n_pariK
LSint/n2_pariK
LSint/hcl_pariK
LSint/h_pariK
LSint/h2co_pariK
LSint/dmabn_pariK
LSint/dipeptide_pariK
LSint/co_pariK
LSint/cl_pariK
LSint/c_pariK
LSint/beta-dipeptide_pariK
LSint/PP_pariK
LSint/tripeptide_pariK
LSint/PA_oligomer_2_pariK
LSint/PA_oligomer_3_pariK
LSint/PA_oligomer_4_pariK
LSint/PA_oligomer_5_pariK
LSint/acene_1_pariK
LSint/acene_2_pariK
LSint/acene_3_pariK
LSint/acene_4_pariK
LSint/acene_5_pariK"
NUMA="00168atoms_7518basfunc_gc_dfJ
00168atoms_7518basfunc_gc_J
00168atoms_7518basfunc_gc_XC
00168atoms_7518basfunc_gc_K"
ALL="$SHORT $MEDIUM $LONG"
ALLS="$SHORT $MEDIUM"
WEEK="$SHORT"
WEEK1="$SHORT"
# THESE TEST CASES IS USED FOR OMP8 
WEEK8="LSint/00168atoms_7518basfunc_gc_dfJ
LSint/00203atoms_1113basfunc_gc_dfJ
LSint/00203atoms_1113basfunc_nongc_dfJ
LSint/00168atoms_0882basfunc_gc_dfJ
LSint/00053atoms_1160basfunc_gc_J
LSint/00053atoms_1160basfunc_nongc_J
LSint/00168atoms_0882basfunc_gc_J
LSint/00018atoms_0492basfunc_gc_J
LSint/00203atoms_1113basfunc_gc_J
LSint/00203atoms_1113basfunc_nongc_J
LSint/00060atoms_0540basfunc_gc_J
LSint/00082atoms_1130basfunc_gc_J
LSint/00168atoms_0882basfunc_gc_XC
LSint/00203atoms_1113basfunc_gc_XC
LSint/00060atoms_0540basfunc_gc_XC
LSint/00042atoms_0570basfunc_gc_K
LSint/00053atoms_1160basfunc_gc_K
LSint/00053atoms_1160basfunc_nongc_K
LSint/00168atoms_0882basfunc_gc_K
LSint/00018atoms_0492basfunc_gc_K
LSint/00203atoms_1113basfunc_gc_K
LSint/00203atoms_1113basfunc_nongc_K
LSint/00060atoms_0540basfunc_gc_K
LSint/00082atoms_1130basfunc_gc_K
DECtest/00023atoms_0214basfunc_DEC
LSint/alanine203atoms
LSint/phenanthreneTZ"

#########################################################################
# function usage(): print usage information 
#########################################################################
usage() {
 cat <<'%EOF%'
usage: PROF [-h|-help|--help] [-keep] [-keepprof] [-refprof] 
            [-param "option list"] [-lsdalton script] [-log logfile] profcase

       -h | -help | --help  : show this help description
       -keep                : keep *.mol, *.dal, *.check and *.log files
       -pure                : make pure profile without S and h1 to build Density
       -keepprof            : keep *.prof.log and *.log files
       -refprof             : prof reference file(s); do not run any
                              calculations
       -param "option list" : pass "option list" to lsdalton-script
       -lsdalton script     : use script instead of the default
                              lsdalton-script "../lsdalton"
       -log logfile         : write output into logfile instead of the
                              default "PROFLOG"

       where profcase might be one of the following:
          all                  -- run all LSDALTON prof cases
          arh                  -- run Augmented Roothaan-Hall prof cases
          csr                  -- run Compressed-Sparse Row prof cases (requires linking to MKL!)
          dec                  -- run Divide-Expand-Consolidate coupled cluster profs
          geo                  -- run prof cases for geometry optimization
          int64                -- run prof cases for code compiled using 64-bit integers
          linsca               -- run profs related to density optimization
          lsdalton             -- run profs for integral code
          <case1 [case2] ...>  -- run only the specified profcase(s)
%EOF%
exit 1
}

#########################################################################
# function myprint(string): print to stdout and $listing
#########################################################################
myprint(){
 echo "$1";
 echo "$1" >> $listing;
}

#########################################################################
# the summary head
#########################################################################
summary_head=`awk "END{printf \"%-32s %14s %14s %14s %10s \\n\", \" Name of Profile_test_case      \",\"  CPU Time (s)\",\" Wall Time (s)\",\"   Memory (MB)\",\"  Passed  \"}"</dev/null`
summary_format="\"%-31s %14.2f %14.0f %14.3f %7s \\n\""
#########################################################################
#########################################################################
# start with real work:
#########################################################################
#########################################################################

#########################################################################
# set defaults and evaluate parameters
#########################################################################
PROFparams="$0 $*"
help=""
pure="false"
keep="false"
keepprof="false"
LSDALTON="../lsdalton"
paramlist=""
refprof=""
listing="PROFLOG"
emptystring="                                "
answer_yes=

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

while echo $1 | egrep -q '^-'; do
   case $1 in
     "-h" | "-help" | "--help" ) help="true" ; break;;
     "-lsdalton" )  shift; LSDALTON=$1; shift;;
     "-log" ) shift; listing=$1; shift;;
     "-pure" ) pure="true"; shift;;
     "-keep" ) keep="true"; shift;;
     "-keepprof" ) keepprof="true"; shift;;
     -param* ) shift; paramlist="$1"; shift;;
     "-refprof" ) refprof="true"; shift;;
     "-y") answer_yes=true; shift;;
     * ) usage;;
   esac
done
if [ $help ]; then
  usage
fi

#########################################################################
# set list of prof cases:
#########################################################################
profcase=$*
if   [ "$profcase" = "" ]; then
  echo '    ***********************************'
  echo '    * ERROR: No profcase(s) specified *'
  echo '    ***********************************'
  usage
else 
  case "$profcase" in
      all)         profcase=$ALL;;
      alls)        profcase=$ALLS;;
      short)       profcase=$SHORT;;
      week)        profcase=$WEEK;;
      week1)       profcase=$WEEK1;;
      week8)       profcase=$WEEK8;;
      medium)      profcase=$MEDIUM;;
      df-J)        profcase=$DFJ;;
      J)           profcase=$J;;
      K)           profcase=$K;;
      pariK)       profcase=$pariK;;
      pariKnew)    profcase=$pariKnew;;
      XC)          profcase=$XC;;
      long)        profcase=$LONG;;
      numa)        profcase=$NUMA;;
  esac
fi


#########################################################################
# check file for prof listing:
#########################################################################
if [  -s $listing -a "$answer_yes" = '' ]; then
   echo "$listing already exists... should it be deleted first? (y/n)"
   read answer
   if [ "$answer" = "yes"  -o  "$answer" = "y" ]; then
     echo > $listing
     echo > $listing.summary
   fi
fi

myprint "#####################################################################"
myprint "                        LSDALTON prof suite"
myprint "#####################################################################"
myprint "invoked with          : $PROFparams"
myprint "date and time         : `date`"
myprint "lsdalton script       : $LSDALTON"
myprint "parameter list passed : $paramlist"
myprint "prof listing          : $listing"
myprint "prof cases            : $profcase"

#########################################################################
# loop over prof cases:
#########################################################################
passedall="ALL PROFS ENDED PROPERLY!"
problems=""
numresult=0
for fitem in ${profcase}
do
  trouble=0
  myprint "###########################################################"
  myprint "start now with prof $fitem:"
  myprint "-----------------------------------------------------------"
  sh $fitem || exit 1
  item=`basename $fitem`
  if [ -f $item.info ]; then
    cat $item.info | tee -a $listing
  fi
  numsteps=1
  multi=0
  rm -f ./$item.log
  chmod +x ./$item.check
# Multi-step profs loop over the different jobsteps, regular profs just
# go through this once
  step=1
  while [ "$step" -le "$numsteps" ]
  do
      molfile=$item
      dalfile=$item
      logfile=./$item.log
      newlogfile=./$item.new.log
      proffile=./$item.prof.log
      checkfile=./$item.check
      reffile=./$item.ref
      moldenfile=./$item.molden
      echo "do first time"
      if [ "$pure" = "true" ]; then
	  $LSDALTON -pg -dens $paramlist -ext log $dalfile $molfile | \
              grep -v '\*\*\**' | \
              grep -v 'OUTPUT FROM' | grep -v 'Version' | grep -v 'PID' | \
              grep -v '^$' | tee -a $listing
	  if [ "$keep" = "false" ]; then
              rm -f $dalfile.tar.gz $proffile
	  fi
	  echo "do it a second time to avoid building of dens.restart"
	  $TIMING_OF $LSDALTON -pg -dens $paramlist -ext log $dalfile $molfile | \
              grep -v '\*\*\**' | \
              grep -v 'OUTPUT FROM' | grep -v 'Version' | grep -v 'PID' | \
              grep -v '^$' | tee -a $listing
	  echo "done second time"
      else
	  $LSDALTON -pg $paramlist -ext log $dalfile $molfile | \
              grep -v '\*\*\**' | \
              grep -v 'OUTPUT FROM' | grep -v 'Version' | grep -v 'PID' | \
              grep -v '^$' | tee -a $listing
      fi
      myprint ""
      myprint "evaluate output file $logfile:"
      myprint "-----------------------------------------------------------"
      if [ `$GREP "CPU Time used in OMPPROF" $logfile | wc -l` = 1 ]; then
          CPU_usage=`$GREP "CPU Time used in OMPPROF" $logfile | sed s/">>>  CPU Time used in OMPPROF * is"/""/ | awk '{if ($2 == "second" ||$2 == "seconds") print $1; else if ($2 == "minute" || $2 == "minutes") print $1*60+$3; else if ($2 == "hour" || $2 == "hours") print $1*3600+$3*60+$5}'`
      else
	  if [ `$GREP "CPU Time used in LSDALTON " $logfile | wc -l` = 1 ]; then
	      CPU_usage=`$GREP "CPU Time used in LSDALTON " $logfile | sed s/">>>  CPU Time used in LSDALTON * is"/""/ | awk '{if ($2 == "second" ||$2 == "seconds") print $1; else if ($2 == "minute" || $2 == "minutes") print $1*60+$3; else if ($2 == "hour" || $2 == "hours") print $1*3600+$3*60+$5}'`
	  else
	      CPU_usage="N/A"
	  fi
      fi
      if [ `$GREP "wall Time used in OMPPROF" $logfile | wc -l` = 1 ]; then
          WALL_usage=`$GREP "wall Time used in OMPPROF" $logfile | sed s/">>> wall Time used in OMPPROF * is"/""/ | awk '{if ($2 == "second" ||$2 == "seconds") print $1; else if ($2 == "minute" || $2 == "minutes") print $1*60+$3; else if ($2 == "hour" || $2 == "hours") print $1*3600+$3*60+$5}'`
      else
	  if [ `$GREP "wall Time used in LSDALTON " $logfile | wc -l` = 1 ]; then
	      WALL_usage=`$GREP "wall Time used in LSDALTON " $logfile | sed s/">>> wall Time used in LSDALTON * is"/""/ | awk '{if ($2 == "second" ||$2 == "seconds") print $1; else if ($2 == "minute" || $2 == "minutes") print $1*60+$3; else if ($2 == "hour" || $2 == "hours") print $1*3600+$3*60+$5}'`
	  else
	      WALL_usage="N/A"
	  fi
      fi
      if [ `$GREP "Max allocated memory\, TOTAL" $logfile | wc -l` = 1 ]; then
          MEM_usage=`$GREP "Max allocated memory\, TOTAL" $logfile | sed s/"Max allocated memory\, TOTAL                 "/""/ | awk '{if ($2 == "Byte") print $1/1000/1000; else if ($2 == "kB") print $1/1000; else if ($2 == "MB") print $1;else if ($2 == "GB") print $1*1000}'`
      else
          MEM_usage="N/A"
      fi

#     Print test result to the screen and the profile log
      echo ""
      sh $checkfile $logfile 
      checkout=`$checkfile $logfile | tee -a $listing`

#     Check if the test passed
      passed=`echo $checkout | grep "PROF ENDED PROPERLY"`
      if [ -n "$passed" ]; then
        if [ "$keep" = "false" ]; then
          rm -f $dalfile.dal $dalfile.BAS $checkfile $newlogfile $item.info $dalfile.tar.gz $molfile.dens.restart
        fi
	if [ "$keepprof" = "false" ]; then
	    rm -f $proffile 
	fi
        pass_item='T'
      else
        trouble=`expr $trouble \+ 1`
        if [ "$bell" = "true" ]; then
          echo "\a"
        fi
        passedall="THERE IS A PROBLEM IN "
        if [ "$trouble" -eq 1 ]; then
            problems="$problems $item"
        fi
        pass_item='F'
      fi

      numresult=`expr $numresult \+ 1`
      testlist[$numresult]="$item"
      timelist[$numresult]="$CPU_usage"
      timwlist[$numresult]="$WALL_usage"
      memlist[$numresult]="$MEM_usage"
      passlist[$numresult]="$pass_item"
      echo "$summary_head"
      awk "END{printf ${summary_format}, \"${testlist[$numresult]}\",\"${timelist[$numresult]}\",\"${timwlist[$numresult]}\",\"${memlist[$numresult]}\",\"${passlist[$numresult]}\"}"</dev/null 

      echo "$summary_head" >> $logfile
      awk "END{printf ${summary_format}, \"${testlist[$numresult]}\",\"${timelist[$numresult]}\",\"${timwlist[$numresult]}\",\"${memlist[$numresult]}\",\"${passlist[$numresult]}\"}"</dev/null >> $logfile

      awk "END{printf ${summary_format}, \"${testlist[$numresult]}\",\"${timelist[$numresult]}\",\"${timwlist[$numresult]}\",\"${memlist[$numresult]}\",\"${passlist[$numresult]}\"}"</dev/null >> $listing.summary

    step=`expr $step \+ 1`
  done
  if [ "$trouble" -eq 0 ]; then
      if [ "$keep" = "false" ]; then
          rm -f $molfile.mol
      fi
  fi
done

#########################################################################
# final result:
#########################################################################

myprint ""
myprint "#####################################################################"
myprint "                              Summary"
myprint "#####################################################################"
myprint ""

if [ "$numresult" -gt 0  ]; then
    echo
    ind=1
    echo "$summary_head"
    echo "$summary_head" >> $listing
    while [ "$ind" -le "$numresult" ]; do
        awk "END{printf ${summary_format}, \"${testlist[$ind]}\",\"${timelist[$ind]}\",\"${timwlist[$ind]}\",\"${memlist[$ind]}\",\"${passlist[$ind]}\"}"</dev/null 
        awk "END{printf ${summary_format}, \"${testlist[$ind]}\",\"${timelist[$ind]}\",\"${timwlist[$ind]}\",\"${memlist[$ind]}\",\"${passlist[$ind]}\"}"</dev/null >> $listing
        ind=`expr $ind \+ 1`
    done
    echo
fi


n=0
for problem in ${problems}
do
  n=`expr $n \+ 1`
done
if [ "$n" -eq 0 ]; then
    myprint "$passedall"
else
    myprint "$passedall $n PROF CASE(S)"
    for problem in ${problems}
    do
      myprint "$problem"
    done
fi

exit 0

