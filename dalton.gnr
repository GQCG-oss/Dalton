WRKDIR=`pwd`
export WRKDIR
#
paramlist="$*"
# default extensions
OUTEXT="out"
DALEXT="dal"
MOLEXT="mol"
AUXEXT="MOL NCA ORB IRC TRJ CM HES MOPUN WLK BAS"
#deafult values for options
opta=0
optA=0
optd=0
optD=1
optf=0
optF=0
optn=0
opti=0
opto=0
optstex=0
optvib=0
opthes=0
optloc=0
optI=0
optv=0
optw=0
frl=rel
#
usage (){
          echo
          echo "Usage:    dalton [-a] [-A] [-b directory] [-d] [-D] [-ext log] [-f] [-F] [-i] [-I]"
          echo  "[-m mem] [-N nodes] [-o file] [-t directory] [-v] [-w directory] dal{.$DALEXT} mol{.$MOLEXT}"
          echo
          echo 'Options:'
          echo ' a        copy auxiliary files from WRKDIR to TMPDIR before calculation starts'
          echo ' A        copy auxiliary files to WRKDIR after calculation stops'
	  echo ' b dir    change directory where basis sets are searched for to dir'
          echo ' d        delete TMPDIR before calculation starts'
          echo ' D        do not delete TMPDIR after calculation stops'
          echo ' ext log  change default output extension to log'
          echo ' f        copy SIRIUS.RST/RESULTS.RSP/RSPVEC from WRKDIR to TMPDIR before calculation starts'
          echo ' F        copy SIRIUS.RST/RESULTS.RSP/RSPVEC from TMPDIR to WRKDIR after calculation stops'
          echo ' i f1 f2  copy SIRIFCs from WRKDIR to TMPDIR before calculation starts'
          echo ' I        copy SIRIFC from TMPDIR to WRKDIR after calculation stops'
          echo ' m mem    set scratch memory to mem words'
          echo ' N num    use MPI version with num nodes'
          echo ' o file   redirect output from program to this file in WRKDIR'
          echo ' t dir    change TMPDIR from default to dir'
          echo ' v        copy Molden and any VRML files from TMPDIR to WRKDIR after the calculation'
          echo ' w dir    change WRKDIR from default to dir'
          echo
         }
while [ -n "`echo $1 | grep '-'`" ]; do
    case $1 in
      -a ) opta=1;;
      -A ) optA=1;;
      -b ) BASDIR=$2
           export BASDIR
	   shift;;
      -d ) optd=1;;
      -D ) optD=0;;
      -ext ) OUTEXT=$2
           shift;;
      -f ) optf=1;;
      -F ) optF=1;;
      -stex ) optstex=1
           sirifc1=$2.ifc
           sirifc2=$3.ifc
           shift
           shift;;
      -fro ) frl=fro;;
      -loc ) optloc=1
           sirifc_gs=$2.ifc
           sirifc_lo=$3.ifc
           shift
           shift;;
      -vibro ) optvib=1
           abavib=$2.nca
           shift;;
      -hes ) opthes=1
           hesres=$2.HES
           shift;;
      -i ) opti=1
           sirifc_i=$2.ifc
           shift;;
      -I ) optI=1;;
      -N ) optn=$2
           shift;;
      -m ) WRKMEM=$2
           export WRKMEM
	   shift;;
      -o ) OUTFIL=$2
           export OUTFIL
	   opto=1
	   shift;;
      -t ) TMPDIR=$2
	   shift;;
      -w ) WRKDIR=`pwd`/$2
	   shift;;
      -v ) optv=1;;
      * ) usage; exit 1;;
   esac
   shift
done
# check for correct input
if [ -z "$1" -o -z "$2" ]; then
   echo 'Input file[s] not specified'
   usage
   exit 1
fi
#
export TMPDIR
#
echo
echo "   ***************************************** "
echo "   **** OUTPUT FROM DALTON SHELL SCRIPT **** "
echo "   ***************************************** "
echo
echo "   Version 1.1 (00/07/21)"
echo;
echo "   Invocation: $0 $paramlist"
echo; echo "   `date`"
echo;
echo "   Calculation: $1_$2  (input files: $1.dal and $2.mol)"
echo "   PID        : $$"
echo "   Input dir  : $WRKDIR"
echo "   Scratch dir: $TMPDIR/$2"
#echo "   Work memory: $WRKMEM"
echo;
#
if [ ! -d "$TMPDIR" ]; then
   mkdir -p $TMPDIR
fi

    SCRATCHDIR=$TMPDIR/$2;

if [ -d "$TMPDIR" -a -w "$TMPDIR" ]; then
   if [ $optd -eq 1 ] ; then
      rm -rf $TMPDIR/$2
   fi
   if [ ! -d "$TMPDIR/$2" ]; then
      mkdir -p $TMPDIR/$2
   fi
   cd $TMPDIR/$2
   if [ -s $WRKDIR/$1.$DALEXT -a -r $WRKDIR/$1.$DALEXT ]; then
      cp $WRKDIR/$1.$DALEXT DALTON.INP
   else
      echo "$WRKDIR/$1.$DALEXT does not exist or is not readable"
      exit 1
   fi
   if [ -s $WRKDIR/$2.$MOLEXT -a -r $WRKDIR/$2.$MOLEXT ]; then
      cp $WRKDIR/$2.$MOLEXT MOLECULE.INP
   else
      echo "$WRKDIR/$2.$MOLEXT does not exist or is not readable"
      exit 1
   fi
   if [ $optf -eq 1 ] ; then
      if [ -s $WRKDIR/SIRIUS.RST -a -r $WRKDIR/SIRIUS.RST ]; then
         cp $WRKDIR/SIRIUS.RST SIRIUS.RST
      else
         echo "$WRKDIR/SIRIUS.RST does not exist or is not readable"
         exit 1
      fi
      if [ -s $WRKDIR/RESULTS.RSP -a -r $WRKDIR/RESULTS.RSP ]; then
         cp $WRKDIR/RESULTS.RSP RESULTS.RSP
      else
         echo "$WRKDIR/RESULTS.RSP does not exist or is not readable"
      fi
      if [ -s $WRKDIR/RSPVEC -a -r $WRKDIR/RSPVEC ]; then
         cp $WRKDIR/RSPVEC RSPVEC
      else
         echo "$WRKDIR/RSPVEC does not exist or is not readable"
      fi
   fi
   if [ $optstex -eq 1 ] ; then
      if [ -s $WRKDIR/$sirifc1 -a -r $WRKDIR/$sirifc1 ]; then
         cp $WRKDIR/$sirifc1 SIRIFC1
      else
         echo "$WRKDIR/$sirifc1 does not exist or is not readable"
         exit 1
      fi
      if [ -s $WRKDIR/$sirifc2 -a -r $WRKDIR/$sirifc2 ]; then
         cp $WRKDIR/$sirifc2 SIRIFC2
      else
         echo "$WRKDIR/$sirifc2 does not exist or is not readable"
         exit 1
      fi
   fi
   if [ $optloc -eq 1 ] ; then
      if [ -s $WRKDIR/$sirifc_gs -a -r $WRKDIR/$sirifc_gs ]; then
         cp $WRKDIR/$sirifc_gs SIRIFC
      else
         echo "$WRKDIR/$sirifc_gs does not exist or is not readable"
         exit 1
      fi
   fi
   if [ $opthes -eq 1 ] ; then
      if [ -s $WRKDIR/$hesres -a -r $WRKDIR/$hesres ]; then
         echo "cp $WRKDIR/$hesres $SCRATCHDIR/DALTON.HES"
         cp $WRKDIR/$hesres $SCRATCHDIR/DALTON.HES
      else
         echo "$WRKDIR/$hesres does not exist or is not readable"
         exit 1
      fi
   fi
   if [ $opti -eq 1 ] ; then
      if [ -s $WRKDIR/$sirifc_i -a -r $WRKDIR/$sirifc_i ]; then
         cp $WRKDIR/$sirifc_i SIRIFC
      else
         echo "$WRKDIR/$sirifc_i does not exist or is not readable"
         exit 1
      fi
   fi
   if [ $optA -eq 1 ]; then
      for ext in $AUXEXT ; do
         if [ "$1" = "$2" ]; then
            if [ -s $WRKDIR/$1.$ext ]; then
               cp $WRKDIR/$1.$ext DALTON.$ext
            fi
	 else
            if [ -s $WRKDIR/$1_$2.$ext ]; then
               cp $WRKDIR/$1_$2.$ext DALTON.$ext
	    fi
         fi
      done
   fi
else
   echo "$TMPDIR does not exist or is not writeable"
   exit 1
fi
#
if [ $optn -gt 1 ] ; then
   if [ -s $MPIRUN -a -x $MPIRUN ]; then
      if [ -a $DALMPI -a -x $DALMPI ]; then
         $MPIRUN -np $optn -x SCRATCHDIR,WRKDIR,BASDIR,WRKMEM $DALMPI
      else
         echo "$DALMPI does not exist or is not executeable"
         exit 1
      fi
   else
      echo "$MPIRUN does not exist or is not executeable"
      exit 1
   fi
else
   if [ -s $DALTON -a -x $DALTON ]; then
      cp $DALTON ./dalton.x
      ./dalton.x
   else
      echo "$DALTON does not exist or is not executeable"
      exit 1
   fi
fi

if [ $optF -eq 1 ] ; then
   if [ -s SIRIUS.RST -a -r SIRIUS.RST ]; then
      cp SIRIUS.RST $WRKDIR/SIRIUS.RST
   else
      echo "SIRIUS.RST does not exist or is not readable"
   fi
   if [ -s RESULTS.RSP -a -r RESULTS.RSP ]; then
      cp RESULTS.RSP $WRKDIR/RESULTS.RSP
   else
      echo "RESULTS.RSP does not exist or is not readable"
   fi
   if [ -s RSPVEC -a -r RSPVEC ]; then
      cp RSPVEC $WRKDIR/RSPVEC
   else
      echo "RSPVEC does not exist or is not readable"
   fi
fi
if [ $optI -eq 1 ] ; then
   if [ -s SIRIFC -a -r SIRIFC ]; then
      cp SIRIFC $WRKDIR/$1_$2.ifc
   else
      echo "SIRIFC does not exist or is not readable"
      exit 1
   fi
fi
if [ $optloc -eq 1 ] ; then
   if [ -s SIRIFC -a -r SIRIFC ]; then
      cp SIRIFC $WRKDIR/$sirifc_lo
   else
      echo "SIRIFC does not exist or is not readable"
      exit 1
   fi
fi
if [ $optvib -eq 1 ] ; then
   if [ -s DALTON.NCA ]; then
      cp DALTON.NCA $WRKDIR/$abavib
      echo "Copying DALTON.NCA to $WRKDIR/$abavib"
   else
      echo "DALTON.NCA does not exist or is not readable"
      exit 1
   fi
fi
if [ $optstex -eq 1 ] ; then
   if [ -s UNIT1 -a -r UNIT1 ]; then
      cp UNIT1 $WRKDIR/$1.$2.$frl.stexint
   else
      echo "UNIT1 does not exist or is not readable"
#     exit 1
   fi
   if [ -s UNIT2 -a -r UNIT2 ]; then
      cp UNIT2 $WRKDIR/$1.$2.$frl.mo
   else 
      echo "UNIT2 does not exist or is not readable"
#     exit 1
   fi
fi
if [ $opta -eq 1 ] ; then
   for ext in $AUXEXT ; do
      if [ -s DALTON.$ext ]; then
         if [ "$1" = "$2" ]; then
            cp DALTON.$ext $WRKDIR/$1.$ext
	 else
            cp DALTON.$ext $WRKDIR/$1_$2.$ext
	 fi
      fi
   done
fi
if [ "$1" = "$2" ]; then
   if [ -s $WRKDIR/$1.$OUTEXT ];then
      cp $WRKDIR/$1.$OUTEXT $WRKDIR/$1.$OUTEXT.bak
      echo "Existing file $WRKDIR/$1.$OUTEXT renamed to  
   $WRKDIR/$1.$OUTEXT.bak"
   fi
   if [ $opto -eq 1 ] ; then
      if [ "$OUTFIL" != "$1.$OUTEXT" ] ; then
         if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
            cp $WRKDIR/$OUTFIL $WRKDIR/$1.$OUTEXT
            rm -rf $WRKDIR/$OUTFIL
         else	
            echo "$WRKDIR/$OUTFIL has not been created from the present run"
         fi
      fi
   else
      if [ -s DALTON.OUT -a -r DALTON.OUT ]; then
         cp DALTON.OUT $WRKDIR/$1.$OUTEXT
      else
         echo "DALTON.OUT has not been created from the present run"
      fi
   fi
   if [ $optv -eq 1 ] ; then
      if [ -s molden.inp -a -r molden.inp ]; then
         cp molden.inp $WRKDIR/$1.molden
      fi
      if [ -s *.wrl -a -r *.wrl ]; then
         cp -f *.wrl $WRKDIR/.
      fi
   fi
else
   if [ -s $WRKDIR/$1_$2.$OUTEXT ];then
      cp $WRKDIR/$1_$2.$OUTEXT $WRKDIR/$1_$2.$OUTEXT.bak
      echo "Existing file $WRKDIR/$1_$2.$OUTEXT renamed to $WRKDIR/$1_$2.$OUTEXT.bak"
   fi
   if [ $opto -eq 1 ] ; then
      if [ "$OUTFIL" != "$1_$2.$OUTEXT" ]; then
         if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
            cp $WRKDIR/$OUTFIL $WRKDIR/$1_$2.$OUTEXT
            rm -rf $WRKDIR/$OUTFIL
         else	
            echo "$WRKDIR/$OUTFIL has not been created from the present run"
         fi
      fi
   else
      if [ -s DALTON.OUT -a -r DALTON.OUT ]; then
         cp DALTON.OUT $WRKDIR/$1_$2.$OUTEXT
      else
         echo "DALTON.OUT has not been created from the present run"
      fi
   fi
   if [ $optv -eq 1 ] ; then
      if [ -s molden.inp -a -r molden.inp ]; then
         cp molden.inp $WRKDIR/$1_$2.molden
      fi
      if [ -s *.wrl -a -r *.wrl ]; then
         cp -f *.wrl $WRKDIR/.
      fi
   fi
fi
cd $WRKDIR
if [ $optD -eq 1 ] ; then
   rm -rf $TMPDIR/$2
fi
