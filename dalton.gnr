WRKDIR=`pwd` ; export WRKDIR
# always search for basis sets in job work directory
# (before standard dalton basis library, predefined in dalton.x)
BASDIR=$WRKDIR ; export BASDIR
#
paramlist="$*"

# default extensions
OUTEXT="out"
DALEXT="dal"
MOLEXT="mol"
POTEXT="pot"

#default values for options
optd=0
optD=1
optf=0
optn=0
optlam=
opti=0
opto=0
potfil=
frl=rel
#
# Define usage message
#
usage (){
	  echo
	  echo "Usage: $0 [-b directory] [-d] [-D] [-ext log | -o file] [-f dalmol] [-M mb | -m mem]"
	  echo  "[-N num] [-lam file] [-o file] [-t directory] [-w directory]"
          echo  " dalinp{.$DALEXT} [molinp{.$MOLEXT} [potinp{.$POTEXT}]]"
          echo
	  echo 'Options:'
	  echo ' -b dir    prepend dir to directory list for basis set searches.'
	  echo '           Current directory and dalton basis library are included automatically.'
	  echo ' -d        delete job scratch directory before calculation starts'
	  echo ' -D        do not delete job scratch directory after calculation stops'
	  echo ' -ext log  change output extension from ".out" to ".log"'
	  echo ' -o file   redirect output from program to this file in WRKDIR'
          echo ' -f dalmol copy dalmol.tar.gz file from WRKDIR to TMPDIR before calculation starts'
	  echo ' -M mb     set scratch memory to mb Megabytes'
	  echo ' -m mem    set scratch memory to mem double precision words'
	  echo ' -N num    use MPI version with num nodes'
	  echo ' -lam file call "lamboot file" and "wipe file" before and after mpirun'
          echo ' -t dir    change TMPDIR to dir. Default: ' $TMPDIR
          echo ' -w dir    change WRKDIR to dir. Default: ' $WRKDIR
	  echo
	 }
#
# Define backup function
#
backup () {
  if [ "$1" = "-v" ]; then ekko=1; shift
  else ekko=0;
  fi
  for i in $* ; do
     if [ -f "${i}" ]; then
        for j in 6 5 4 3 2 1 0 ; do
           jp=`expr $j + 1`
           if [ -f "${i}.${j}" ]; then 
              [ $ekko -eq 1 ] && echo "Backup: renaming ${i}.${j} to ${i}.${jp}"
              mv -f "${i}.${j}" "${i}.${jp}"
           fi
        done
        if [ $ekko -eq 1 ]; then echo "Backup: renaming ${i} to ${i}.0"; fi
        mv -f "${i}" "${i}.0"
     fi
  done
}
#
# Interpret input
#
while [ -n "`echo $1 | grep '^-'`" ]; do
    case $1 in
      -b ) BASDIR="$2:$BASDIR"; export BASDIR; shift;;
      -d ) optd=1;;
      -D ) optD=0;;
      -ext ) OUTEXT=$2; shift;;
      -f ) optf=$2; shift;;
      -N ) optn=$2; shift;;
      -lam* ) optlam=$2; shift;;
      -m ) WRKMEM=$2; export WRKMEM; shift;;
      -M ) WRKMEM=`expr $2 "*" 128000`; export WRKMEM; shift;;
      -o ) OUTFIL=$2; export OUTFIL; opto=1; shift;;
#          OUTFIL and WRKDIR are read from environment inside dalton.x
      -t ) TMPDIR=$2; shift;;
      -w ) WRKDIR=$2; shift;;
       * ) usage; exit 1;;
   esac
   shift
done
# check for correct input
if [ -z "$1" ]; then
   echo 'Input file[s] not specified'
   echo "Your command was: $0 $paramlist"
   usage
   exit 1
fi
#  remove .dal, if added by user
dalfil=`echo $1 | sed "s/\.$DALEXT//"`
if [ -z "$2" ]; then
#  only one input file, check if molfil exist with same base name;
   if [ -r ${dalfil}.mol ]; then
      molfil=$dalfil
    if [ -r ${dalfil}.pot ]; then
      potfil=$dalfil
      input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
    else
      input_files="input files: $dalfil.$DALEXT and $molfil.$MOLEXT"
    fi
   else
      molfil=
      input_files="input file: $dalfil.$DALEXT"
   fi
   outnam=$dalfil
else
#  two input files;
#  remove .mol, if added by user
   molfil=`echo $2 | sed "s/\.$MOLEXT//"`
   if [ "$molfil" = "$dalfil" ]; then
      outnam=$molfil
   else
      outnam=${dalfil}_${molfil}
   fi
   input_files="input files: $dalfil.$DALEXT and $molfil.$MOLEXT"
fi
#  Added option for including a potential.inp file for QM3 calculations
if [ -n "$3" ]; then
#  remove .pot, if added by user
   potfil=`echo $3 | sed "s/\.$POTEXT//"`
   if [ "$potfil" = "$molfil" ] && [ "$potfil" = "$dalfil" ]; then
      outnam=$potfil
   else
      outnam=${dalfil}_${molfil}_${potfil}
   fi
   input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
fi
#
export TMPDIR
if [ ! -d "$TMPDIR" ]; then
   mkdir -p $TMPDIR
fi
if [ $optn -gt 1 ] ; then
  SCRATCHDIR=$TMPDIR
else
  SCRATCHDIR=$TMPDIR/$USER/$outnam
fi
#
echo
echo "   ***************************************** "
echo "   **** OUTPUT FROM DALTON SHELL SCRIPT **** "
echo "   ***************************************** "
echo
echo "   Dalton Release 2.0 (Feb. 2005)"
echo;
echo "   Invocation: $0 $paramlist"
echo; echo "   `date`"
echo;
echo "   Calculation: $outnam  ($input_files)"
echo "   PID        : $$"
echo "   Input dir  : $WRKDIR"
echo "   Scratch dir: $SCRATCHDIR"
#echo "  Work memory: $WRKMEM"
echo;
#


ierr=0
if [ -d "$TMPDIR" -a -w "$TMPDIR" ]; then
   if [ -d "$SCRATCHDIR" ]; then
      if [ $optd -eq 1 ] ; then
         rm -rf $SCRATCHDIR/*
      fi
   else
      mkdir -p $SCRATCHDIR
   fi
   cd $SCRATCHDIR
   if [ -s $WRKDIR/$dalfil.$DALEXT -a -r $WRKDIR/$dalfil.$DALEXT ]; then
      cp $WRKDIR/$dalfil.$DALEXT DALTON.INP
   else
      echo "$WRKDIR/$dalfil.$DALEXT does not exist or is not readable"
      ierr=1
   fi
   if [ -s $WRKDIR/$molfil.$MOLEXT -a -r $WRKDIR/$molfil.$MOLEXT ]; then
      cp $WRKDIR/$molfil.$MOLEXT MOLECULE.INP
   else
      echo "$WRKDIR/$molfil.$MOLEXT does not exist or is not readable"
      echo " => assuming user has written MOLECULE input in dalton input file"
   fi
   if [ "$potfil" != "" ]; then 
     if [ -s $WRKDIR/$potfil.$POTEXT -a -r $WRKDIR/$potfil.$POTEXT ]; then
        cp $WRKDIR/$potfil.$POTEXT POTENTIAL.INP
     else
        echo "$WRKDIR/$potfil.$POTEXT for QM/MM does not exist or is not readable"
        ierr=1
     fi
   fi
   if [ "$optf" != "0" ] ; then
      if [ -s $WRKDIR/$optf.tar.gz -a -r $WRKDIR/$optf.tar.gz ] ; then
         echo "The '-f' option is active, now unpacking $optf.tar.gz into:"
	 gunzip < $WRKDIR/$optf.tar.gz | tar xvf -
      else
         echo "$WRKDIR/$optf.tar.gz does not exist or is not readable"
         ierr=1
      fi
   fi
else
   echo "$TMPDIR does not exist or is not writeable"
   ierr=1
fi
if [ $ierr = 1 ]; then
   exit 1
fi
#
if [ $optn -gt 1 ] ; then
   if [ -s $MPIRUN -a -x $MPIRUN ]; then
      if [ -a $DALMPI -a -x $DALMPI ]; then
	 if [ -n "$optlam" ] ; then
	    lamboot -v  $WRKDIR/$optlam
	    $MPIRUN -wd $TMPDIR -np $optn $DALMPI
            ierr=$?
	    wipe    -v  $WRKDIR/$optlam
	 else
	    $MPIRUN -np $optn $DALMPI
#	    $MPIRUN --prefix /usr/local/lib/openmpi -np $optn $DALMPI
            ierr=$?
	 fi
         if [ $ierr -ne 0 ];then
            echo "Error in $MPIRUN -np $optn $DALMPI, exit code $ierr"
#           No "exit $ierr" here, because we want to save output and 
#           tar-file for restart possibilities !!!!!!
         fi
      else
	 echo "$DALMPI does not exist or is not executable"
	 exit 1
      fi
   else
      echo "$MPIRUN does not exist or is not executable"
      exit 1
   fi
else
   if [ -s $DALTON -a -x $DALTON ]; then
      $DALTON
      ierr=$?
      if [ $ierr -ne 0 ];then
         echo "Error in $DALTON, exit code $ierr"
#        No "exit $ierr" here, because we want to save output and 
#        tar-file for restart possibilities.
      fi
   else
      echo "$DALTON does not exist or is not executable"
      exit 1
   fi
fi

#
# filelist is list of files which will be saved in $outnam.tar.gz
# for subsequent calculations
#

filelist="DALTON.ERR SIRIUS.RST RESULTS.RSP RSPVEC SIRIFC DALTON.NCA DALTON.MOL DALTON.ORB DALTON.IRC DALTON.BAS DALTON.TRJ DALTON.CM DALTON.HES DALTON.MOPUN DALTON.WLK molden.inp"

for i in $filelist ; do
   if [ -s $i -a -r $i ] ; then
      tarfilelist=$tarfilelist" "$i
   fi
done

if [ -s "first.wrl" -a -r "first.wrl" ] ; then
#  include ALL *.wrl files if first.wrl exists
   tar cf - $tarfilelist *wrl | gzip -9 > $outnam.tar.gz
else
   tar cf - $tarfilelist | gzip -9 > $outnam.tar.gz
fi

if [ -s $outnam.tar.gz ] ; then
   backup -v $WRKDIR/$outnam.tar.gz 
   cp $outnam.tar.gz $WRKDIR
   echo "$outnam.tar.gz has been copied to $WRKDIR"
else
    echo "$outnam.tar.gz has not been created and has thus not been copied to $WRKDIR"
fi

if [ $opto -eq 1 ] ; then
   if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
      echo "Output is in $WRKDIR/$OUTFIL as requested in input."
   else
      echo "$WRKDIR/$OUTFIL has not been created from the present run"
      if [ $optD -eq 1 ] ; then
         echo "$SCRATCHDIR is therefore not deleted by this script."
      fi
      exit 2
   fi
else
   if [ -s DALTON.OUT -a -r DALTON.OUT ]; then
      OUTFIL=$outnam.$OUTEXT
      backup -v $WRKDIR/$OUTFIL
      cp DALTON.OUT $WRKDIR/$OUTFIL
   else
      echo "DALTON.OUT has not been created from the present run."
      if [ $optD -eq 1 ] ; then
         echo "$SCRATCHDIR is therefore not deleted by this script."
      fi
      echo "List of created files in $SCRATCHDIR :"
      ls -sltr
      exit 2
   fi
fi

cd $WRKDIR

# check if error exit, warnings, or info messages

NERR=`grep -c ERROR $OUTFIL`
if [ $ierr -ne 0 -o $NERR -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "WARNING for ERROR  (Dalton program stopped with exit code $ierr)"
   if [ $optD -eq 1 ] ; then
      echo "- THEREFORE scratch directory $SCRATCHDIR is not deleted"
      echo "  by this script so you may restart the calculation, if possible"
      echo "  ( $SCRATCHDIR may be deleted by your queueing system )"
      echo "- REMEMBER to delete $SCRATCHDIR yourself !!!"; echo
      optD=0
   fi
   [ $NERR -gt 0 ] && ( echo "Output from 'grep -n ERROR' :"; grep -n ERROR $OUTFIL )
fi

nwrn=`grep -c -i WARNING $OUTFIL`
if [ $nwrn -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "$nwrn WARNINGS have been issued by Dalton,"
   echo "output from 'grep -n -i WARNING'  (max 10 warnings):"
   grep -n -i "WARNING" $OUTFIL | head -10
fi

ninfo=`grep -c '[^"]INFO' $OUTFIL`
if [ $ninfo -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "$ninfo informational messages have been issued by Dalton,"
   echo "output from 'grep -n INFO'  (max 10 lines):"
   grep -n INFO $OUTFIL | grep -v 'Check output, result, and error' | head -10
fi

# Disabled check of DALTON.ERR, it is generally duplication
# of the warnings etc. in DALTON.OUT /hjaaj

#if [ -s DALTON.ERR -a -r DALTON.ERR ]; then
#  if [ `grep -c -i WARNING DALTON.ERR` -gt 0 ] ; then
#   echo; echo "WARNINGS have been issued by Dalton in DALTON.ERR file"
#   echo "output from 'grep -n -i WARNING DALTON.ERR' :"
#   grep -n -i WARNING DALTON.ERR
#  fi
#  if [ `grep -c INFO DALTON.ERR` -gt 0 ] ; then
#   echo; echo "INFO messages have been issued by Dalton in DALTON.ERR file"
#  echo "output from 'grep -n INFO DALTON.ERR' :"
#  grep -n INFO DALTON.ERR
#  fi
#fi


if [ $optD -eq 1 ] ; then
   rm -rf $SCRATCHDIR
fi

if [ $ierr -ne 0 ]; then
   exit $ierr
fi
# last line of dalton job script
