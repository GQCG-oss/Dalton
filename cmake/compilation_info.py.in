#!/usr/bin/env python

import os
import re
import string
import subprocess
import datetime

# this is for git:
# p = subprocess.Popen('git show', shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
# stdout, stderr = p.communicate()
# if stderr:
#     last_commit_rev    = 'unknown'
#     last_commit_author = 'unknown'
#     last_commit_time   = 'unknown'
# else:
#     last_commit_rev    = string.replace(stdout.splitlines()[0], 'commit ', '')
#     last_commit_author = string.replace(re.sub(r'<.*>', '', stdout.splitlines()[1]), 'Author: ', '')
#     last_commit_time   = string.replace(stdout.splitlines()[2], 'Date:   ', '')

p = subprocess.Popen('svn info @CMAKE_SOURCE_DIR@', shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
print stdout
print stderr
if stderr:
    last_commit_rev    = 'unknown'
    last_commit_author = 'unknown'
    last_commit_time   = 'unknown'
else:
    for line in stdout.splitlines():
        if 'Revision:' in line:
            last_commit_rev = line.split()[-1]
        if 'Last Changed Author:' in line:
            last_commit_author = line.split(':')[-1][1:]
        if 'Last Changed Date:' in line:
            last_commit_time = line.split('Last Changed Date:')[-1][1:]

s = []
s.append(['System'                  , r'@CMAKE_SYSTEM_NAME@'          ])
s.append(['Internal math'           , r'@ENABLE_INTERNAL_MATH@'       ])
s.append(['64-bit integers'         , r'@ENABLE_64BIT_INTEGERS@'      ])
s.append(['MPI'                     , r'@ENABLE_MPI@'                 ])
s.append(['XCFun'                   , r'@ENABLE_XCFUN@'               ])
s.append(['Build type'              , r'@CMAKE_BUILD_TYPE@'           ])
s.append(['Fortran compiler'        , r'@CMAKE_Fortran_COMPILER@'     ])
s.append(['Fortran compiler version', r'@Fortran_COMPILER_VERSION@'   ])
s.append(['Fortran flags'           , r'@CMAKE_Fortran_FLAGS@'        ])
s.append(['Fortran flags (debug)'   , r'@CMAKE_Fortran_FLAGS_DEBUG@'  ])
s.append(['Fortran flags (release)' , r'@CMAKE_Fortran_FLAGS_RELEASE@'])
s.append(['C compiler'              , r'@CMAKE_C_COMPILER@'           ])
s.append(['C compiler version'      , r'@C_COMPILER_VERSION@'         ])
s.append(['C flags'                 , r'@CMAKE_C_FLAGS@'              ])
s.append(['C flags (debug)'         , r'@CMAKE_C_FLAGS_DEBUG@'        ])
s.append(['C flags (release)'       , r'@CMAKE_C_FLAGS_RELEASE@'      ])
s.append(['BLAS'                    , r'@BLAS_LIBRARIES@'             ])
s.append(['LAPACK'                  , r'@LAPACK_LIBRARIES@'           ])

print 'subroutine print_compilation_info()'
print '#include "priunit.h"'
print "    write(lupri, '(a)')                   "
print "    write(lupri, '(a)')                   "
print "    write(lupri, '(a)') 'Compilation info'"
print "    write(lupri, '(a)') '----------------'"
print "    write(lupri, '(a)')                   "

def chunkify(l, n):
    return [l[i:i+n] for i in range(0, len(l), n)]

def print_line(l, r):
    empty = ' '
    if l == '':
        print "    write(lupri, '(a)') ' %s | %s'" % (empty.ljust(23), r)
    else:
        print "    write(lupri, '(a)') ' %s | %s'" % (l.ljust(23), r)

for line in s:
    chunk_l = chunkify(line[1], 50)
    for i in range(len(chunk_l)):
        if i == 0:
            print_line(line[0], chunk_l[i])
        else:
            print_line('', chunk_l[i])
print_line('Last commit rev',    last_commit_rev)
print_line('Last commit author', last_commit_author)
print_line('Last commit time',   last_commit_time)
print_line('Configuration time', datetime.datetime.now())

print 'end subroutine'
