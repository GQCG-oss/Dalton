#!/usr/bin/env python

import sys

last_commit_rev    = 'unknown'
last_commit_author = 'unknown'
last_commit_time   = 'unknown'

if sys.version >= '2.4':
    import re
    import string
    import subprocess
    import os
    
    p = subprocess.Popen('cd @CMAKE_SOURCE_DIR@; git show', shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    git_revision_info_file='@CMAKE_SOURCE_DIR@/gp/git_revision_info.F90'
    if stderr:
        if (os.path.isfile(git_revision_info_file) and os.path.getsize(git_revision_info_file) > 0):
            # this is not a git repo but @CMAKE_SOURCE_DIR@/gp/git_revision_info.F90
            # exists - then this is a release or an exported source code
            # in this case do not regenerate the file but exit
            sys.exit('not regenerating gp/git_revision_info.F90...\n')
        else: # file does not exist, or is of zero size - generate it with 'unknown' parameters
            last_commit_rev = 'unknown'
            last_commit_author = 'unknown'
            last_commit_time = 'unknown'
    else:
        last_commit_rev    = string.replace(stdout.splitlines()[0], 'commit ', '')
        if  'Merge:' in stdout.splitlines()[1]:
            last_commit_author = string.replace(re.sub(r'<.*>', '', stdout.splitlines()[2]), 'Author: ', '')
            last_commit_time   = string.replace(stdout.splitlines()[3], 'Date:   ', '')
        else:
            last_commit_author = string.replace(re.sub(r'<.*>', '', stdout.splitlines()[1]), 'Author: ', '')
            last_commit_time   = string.replace(stdout.splitlines()[2], 'Date:   ', '')


print('subroutine print_git_revision_info()')
print('#include "priunit.h"')

def print_line(l, r):
    print("    write(lupri, '(a)') ' %s | %s'" % (l.ljust(24), r))

print_line('Last commit revision',    last_commit_rev)
print_line('Last commit author', last_commit_author)
print_line('Last commit time',   last_commit_time)

print('end subroutine')
