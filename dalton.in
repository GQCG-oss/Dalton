DALTON=@PROJECT_BINARY_DIR@/dalton.x
DALMPI=@PROJECT_BINARY_DIR@/dalton.x
MPIRUN=@MPIEXEC@
INSTALL_BASDIR=@BASIS_DIR@
[ -z "$TMPDIR" ] && TMPDIR=@SCRATCH_DIR@

WRKDIR=`pwd` ; export WRKDIR
# always search for basis sets in job work directory
# (before standard dalton basis library in INSTALL_BASDIR, appended below)
BASDIR=$WRKDIR
#
paramlist="$*"

# default extensions
OUTEXT="out"
DALEXT="dal"
MOLEXT="mol"
POTEXT="pot"

GET_FILES=''
PUT_FILES=''

#default values for options
optd=0
optD=1
optf=0
optn=0
optlam=
opti=0
opto=0
optt=0
potfil=
frl=rel
opt_nobackup=0
opt_noarch=0




#
# Define usage message
#
usage (){
	  echo
	  echo "Usage: $0 [-b directory] [-d] [-D] [-ext log | -o file] [-f dalmol] [-M mb | -m mem]"
	  echo  "[-N num] [-lam file] [-o file] [-t directory] [-w directory]"
        echo  " dalinp{.$DALEXT} [molinp{.$MOLEXT} [potinp{.$POTEXT}]]"
        echo
	  echo 'Options:'
	  echo ' -b dir    prepend dir to directory list for basis set searches.'
	  echo '           Current directory and dalton basis library are included automatically.'
	  echo ' -d        delete job scratch directory before calculation starts'
	  echo ' -D        do not delete job scratch directory after calculation stops'
	  echo ' -nobackup do not backup files, simply overwrite outputs'
	  echo ' -noarch   do not create tar.gz archive'
	  echo ' -ext log  change output extension from ".out" to ".log"'
	  echo ' -get "file1 file2"  get files back from TMPDIR after calculation stops'
	  echo ' -put "file1 file2"  put files to TMPDIR before calculation starts'
	  echo ' -o file   redirect output from program to this file in WRKDIR'
        echo ' -f dalmol copy dalmol.tar.gz file from WRKDIR to TMPDIR before calculation starts'
	  echo ' -M mb     set scratch memory to mb Megabytes'
	  echo ' -m mem    set scratch memory to mem double precision words'
	  echo ' -N num    use MPI version with num nodes'
	  echo ' -lam file call "lamboot file" and "wipe file" before and after mpirun'
        echo ' -t dir    change TMPDIR to dir. Default: ' $TMPDIR
        echo ' -w dir    change WRKDIR to dir. Default: ' $WRKDIR
        echo ' -mmsv file copy relay matrix from $TMPDIR to $WRKDIR/$file'
        echo ' -mmcp file copy relay matrix from $WRKDIR/$file to $TMPDIR'
	  echo
	 }
#
# Define backup function
#
backup () {
  if [ $opt_nobackup -eq 0 ]; then
      if [ "$1" = "-v" ]; then ekko=1; shift
      else ekko=0;
      fi
      for i in $* ; do
         if [ -f "$i" ]; then
            for j in 6 5 4 3 2 1 0 ; do
               jp=`expr $j + 1`
               if [ -f "$i.$j" ]; then 
                  [ $ekko -eq 1 ] && echo "Backup: renaming $i.$j to $i.$jp"
                  mv -f "$i.$j" "$i.$jp"
               fi
            done
            if [ $ekko -eq 1 ]; then echo "Backup: renaming $i to $i.0"; fi
            mv -f "$i" "$i.0"
         fi
      done
  fi
}
#
# Interpret input
#
while [ -n "`echo $1 | grep '^-'`" ]; do
    case $1 in
      -b ) BASDIR="$2:$BASDIR"; shift;;
      -d ) optd=1;;
      -D ) optD=0;;
      -nobackup ) opt_nobackup=1;;
      -noarch ) opt_noarch=1;;
      -ext ) OUTEXT=$2; shift;;
      -get ) GET_FILES=$2; shift;;
      -put ) PUT_FILES=$2; shift;;
      -f ) optf=$2; shift;;
      -N ) optn=$2; shift;;
      -lam* ) optlam=$2; shift;;
      -m ) WRKMEM=$2; export WRKMEM; shift;;
      -M ) WRKMEM=`expr $2 "*" 128000`; export WRKMEM; shift;;
      -o ) OUTFIL=$2; export OUTFIL; opto=1; shift;;
#          OUTFIL and WRKDIR are read from environment inside dalton.x
      -t ) optt=1; TMPDIR=$2; shift;;
      -w ) WRKDIR=$2; shift;;
      -mmcp ) optqmmm=copy; relay=$2; shift;;
      -mmsv ) optqmmm=save; relay=$2; shift;;
       * ) usage; exit 1;;
   esac
   shift
done

# append default basis set directory /hjaaj Apr 2006
len_INSTALL_BASDIR=`echo $INSTALL_BASDIR | wc -c`
if [ $len_INSTALL_BASDIR -gt 1 ]; then
   # do not count newline char
   BASDIR="$BASDIR:$INSTALL_BASDIR"
fi
export BASDIR

# check for correct input
if [ -z "$1" ]; then
   echo 'Fatal error: Input file[s] not specified'
   echo "Your command was: $0 $paramlist"
   usage
   exit 1
fi
#  remove .dal, if added by user
dalfil=`echo $1 | sed "s/\.$DALEXT//"`
if [ -z "$2" ]; then
#  only one input file, check if molfil exist with same base name;
   if [ -r $dalfil.mol ]; then
      molfil=$dalfil
    if [ -s $dalfil.pot ]; then
      potfil=$dalfil
      input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
    else
      input_files="input files: $dalfil.$DALEXT and $molfil.$MOLEXT"
    fi
   else
      molfil=
      input_files="input file: $dalfil.$DALEXT"
   fi
   outnam=$dalfil
else
#  two input files;
#  remove .mol, if added by user
   molfil=`echo $2 | sed "s/\.$MOLEXT//"`
   if [ "$molfil" = "$dalfil" ]; then
      outnam=$molfil
   else
      outnam=$dalfil\_$molfil
   fi
   input_files="input files: $dalfil.$DALEXT and $molfil.$MOLEXT"
fi
#  Added option for including a potential.inp file for QM3 calculations
if [ -n "$3" ]; then
#  remove .pot, if added by user
   potfil=`echo $3 | sed "s/\.$POTEXT//"`
   if [ "$potfil" = "$molfil" ] && [ "$potfil" = "$dalfil" ]; then
      outnam=$potfil
   else
      outnam=$dalfil\_$molfil\_$potfil
   fi
   input_files="input files: $dalfil.$DALEXT, $molfil.$MOLEXT, and $potfil.$POTEXT"
fi
#
export TMPDIR
if [ ! -d "$TMPDIR" ]; then
   mkdir -p $TMPDIR
fi
if [ $optn -gt 1 -o $optt -gt 0 ] ; then
  SCRATCHDIR=$TMPDIR
else
  SCRATCHDIR=$TMPDIR/$USER/$outnam
fi
#
echo
echo "   ***************************************** "
echo "   **** OUTPUT FROM DALTON SHELL SCRIPT **** "
echo "   ***************************************** "
echo
echo "   Dalton Release DALTON2011 (DEVELOPMENT VERSION)"
echo;
echo "   Invocation: $0 $paramlist"
echo; echo "   `date`"
echo;
echo "   Calculation: $outnam  ($input_files)"
echo "   PID        : $$"
echo "   Input dir  : $WRKDIR"
echo "   Scratch dir: $SCRATCHDIR"
#echo "  Work memory: $WRKMEM"
echo;
#


ierr=0
if [ -d "$TMPDIR" -a -w "$TMPDIR" ]; then
   if [ -d "$SCRATCHDIR" ]; then
      if [ $optd -eq 1 ] ; then
         rm -rf $SCRATCHDIR/*
      fi
   else
      mkdir -p $SCRATCHDIR
   fi
   cd $SCRATCHDIR
   if [ -s $WRKDIR/$dalfil.$DALEXT -a -r $WRKDIR/$dalfil.$DALEXT ]; then
      cp $WRKDIR/$dalfil.$DALEXT DALTON.INP
   else
      echo "$WRKDIR/$dalfil.$DALEXT does not exist or is not readable"
      ierr=1
   fi
   if [ -s $WRKDIR/$molfil.$MOLEXT -a -r $WRKDIR/$molfil.$MOLEXT ]; then
      cp $WRKDIR/$molfil.$MOLEXT MOLECULE.INP
   else
      echo "$WRKDIR/$molfil.$MOLEXT does not exist or is not readable"
      echo " => assuming user has written MOLECULE input in dalton input file"
   fi
   if [ "$potfil" != "" ]; then 
     if [ -s $WRKDIR/$potfil.$POTEXT -a -r $WRKDIR/$potfil.$POTEXT ]; then
        cp $WRKDIR/$potfil.$POTEXT POTENTIAL.INP
     else
        echo "$WRKDIR/$potfil.$POTEXT for QM/MM does not exist or is not readable"
        ierr=1
     fi
   fi

   if [ -s $WRKDIR/mep.inp ] ; then
     cp $WRKDIR/mep.inp MEP.INP
   fi

   # put files listed under -put to scratch directory
   if [ "$PUT_FILES" != "" ]; then
      for file in $PUT_FILES; do
          echo copying $file to scratch directory
          cp $WRKDIR/$file $file
      done
   fi

   if [ "$optqmmm" = "copy" -o "$optqmmm" = "both" ]; then
     if [ -s $WRKDIR/$relay -a -r $WRKDIR/$relay ]; then
       echo "Copying the relay matrix to scratch directory..."
       cp $WRKDIR/$relay QMMMIM
       if [ ! -s QMMMIM -a ! -r QMMMIM ] ; then
         echo "Relay matrix not present in scratch directory. Continuing anyway..."
       else
         echo "Done" 
       fi
     else
       echo "Cannot copy relay matrix because it does not exist or is not readable"
     fi
   fi
   if [ "$optf" != "0" ] ; then
      if [ -s $WRKDIR/$optf.tar.gz -a -r $WRKDIR/$optf.tar.gz ] ; then
         echo "====================="
         echo "The '-f' option is active, now unpacking $optf.tar.gz into:"
	   tar -z -x -v -f $WRKDIR/$optf.tar.gz
         echo "====================="
      elif [ -s $WRKDIR/$optf -a -r $WRKDIR/$optf ] ; then
#     hjaaj: at least GNU tar finds out autmatically if tar, tar.gz or
#     tar.bzip2 -- hopefully your tar program also does that!
         echo "====================="
         echo "The '-f' option is active, now unpacking $optf into:"
	   tar -x -v -f $WRKDIR/$optf
         echo "====================="
      else
         echo "$WRKDIR/$optf.tar.gz does not exist or is not readable"
         ierr=1
      fi
   fi
else
   echo "$TMPDIR does not exist or is not writeable"
   ierr=1
fi
if [ $ierr = 1 ]; then
   exit 1
fi

if [ $optn -gt 1 ] ; then
   if [ -s $MPIRUN -a -x $MPIRUN ]; then
      if [ -s $DALMPI -a -x $DALMPI ]; then
	 if [ -n "$optlam" ] ; then
	    lamboot -v  $WRKDIR/$optlam
	    $MPIRUN -wd $TMPDIR -np $optn $DALMPI
            ierr=$?
	    wipe    -v  $WRKDIR/$optlam
	 else
	    $MPIRUN -np $optn $DALMPI
#	    $MPIRUN --prefix /usr/local/lib/openmpi -np $optn $DALMPI
            ierr=$?
	 fi
         if [ $ierr -ne 0 ];then
            echo "Error in $MPIRUN -np $optn $DALMPI, exit code $ierr"
#           No "exit $ierr" here, because we want to save output and 
#           tar-file for restart possibilities !!!!!!
         fi
      else
	 echo "$DALMPI does not exist or is not executable"
	 exit 1
      fi
   else
      echo "$MPIRUN does not exist or is not executable"
      exit 1
   fi
else
   if [ -s $DALTON -a -x $DALTON ]; then
      $DALTON
      ierr=$?
      if [ $ierr -ne 0 ];then
         echo "Error in $DALTON, exit code $ierr"
#        No "exit $ierr" here, because we want to save output and 
#        tar-file for restart possibilities.
      fi
   else
      echo "$DALTON does not exist or is not executable"
      exit 1
   fi
fi

#
# filelist is list of files which will be saved in $outnam.tar.gz
# for subsequent calculations
#

filelist="DALTON.STAT SIRIUS.RST RESULTS.RSP RESPONSE.C8 RSPVEC SIRIFC DALTON.NCA DALTON.MOL DALTON.ORB DALTON.IRC DALTON.BAS DALTON.TRJ DALTON.CM DALTON.HES DALTON.MOPUN DALTON.WLK molden.inp DALTON.PROP LUCITA_CVECS.a LUCITA_CVECS.b LUCITA_CVECS.c LUCITA_CVECS.d LUCITA_CVECS.e LUCITA_CVECS.f LUCITA_CVECS.g LUCITA_CVECS.h"

for i in $filelist ; do
   if [ -s $i -a -r $i ] ; then
      tarfilelist=$tarfilelist" "$i
   fi
done


if [ $opt_noarch -eq 0 ]; then
    if [ -s "first.wrl" -a -r "first.wrl" ] ; then
    #  include ALL *.wrl files if first.wrl exists
       tar cf - $tarfilelist *wrl | gzip -9 > $outnam.tar.gz
    else
       tar cf - $tarfilelist | gzip -9 > $outnam.tar.gz
    fi
fi

if [ -s $outnam.tar.gz ] ; then
   backup -v $WRKDIR/$outnam.tar.gz 
   cp $outnam.tar.gz $WRKDIR
   echo "$outnam.tar.gz has been copied to $WRKDIR"
else
    echo "$outnam.tar.gz has not been created and has thus not been copied to $WRKDIR"
fi


if [ -s MEP.OUT ] ; then
  tar -zcf mep.tar.gz MEP.OUT
  cp mep.tar.gz $WRKDIR
fi

# copy files listed under -get back from scratch directory
if [ "$GET_FILES" != "" ]; then
   for file in $GET_FILES; do
       echo copying $file back from scratch directory
       cp $file $WRKDIR/$outnam.$file
   done
fi

if [ "$optqmmm" = "save" -o "$optqmmm" = "both" ]; then
  if [ -s QMMMIM -a -r QMMMIM ]; then
    echo "Saving the relay matrix in $WRKDIR/$relay"
    cp QMMMIM $WRKDIR/$relay
  else
    echo "Could not save the relay matrix because it does not exist or is not readable"
  fi
fi

if [ $opto -eq 1 ] ; then
   if [ -s $WRKDIR/$OUTFIL -a -r $WRKDIR/$OUTFIL ]; then
      echo "Output is in $WRKDIR/$OUTFIL as requested in input."
   else
      echo "$WRKDIR/$OUTFIL has not been created from the present run"
      if [ $optD -eq 1 ] ; then
         echo "$SCRATCHDIR is therefore not deleted by this script."
      fi
      exit 2
   fi
else
   if [ -s DALTON.OUT -a -r DALTON.OUT ]; then
      OUTFIL=$outnam.$OUTEXT
      backup -v $WRKDIR/$OUTFIL
      cp DALTON.OUT $WRKDIR/$OUTFIL
   else
      echo "DALTON.OUT has not been created from the present run."
      if [ $optD -eq 1 ] ; then
         echo "$SCRATCHDIR is therefore not deleted by this script."
      fi
      echo "List of created files in $SCRATCHDIR :"
      ls -sltr
      exit 2
   fi
fi

cd $WRKDIR

# check if error exit, warnings, or info messages

NERR=`grep -c ERROR $OUTFIL`
if [ $ierr -ne 0 -o $NERR -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "WARNING for ERROR  (Dalton program stopped with exit code $ierr)"
   if [ $optD -eq 1 ] ; then
      echo "- THEREFORE scratch directory $SCRATCHDIR is not deleted"
      echo "  by this script so you may restart the calculation, if possible"
      echo "  ( $SCRATCHDIR may be deleted by your queueing system )"
      echo "- REMEMBER to delete $SCRATCHDIR yourself !!!"; echo
      optD=0
   fi
   [ $NERR -gt 0 ] && ( echo "Output from 'grep -n ERROR' :"; grep -n ERROR $OUTFIL )
fi

nwrn=`grep -c -i WARNING $OUTFIL`
if [ $nwrn -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "$nwrn WARNINGS have been issued by Dalton,"
   echo "output from 'grep -n -i WARNING'  (max 10 warnings):"
   grep -n -i "WARNING" $OUTFIL | head -10
fi

ninfo=`grep -c '[^"]INFO' $OUTFIL`
if [ $ninfo -gt 0 ] ; then
   echo "----------------------------------------------------------"
   echo "$ninfo informational messages have been issued by Dalton,"
   echo "output from 'grep -n INFO'  (max 10 lines):"
   grep -n INFO $OUTFIL | grep -v 'Check output, result, and error' | head -10
fi

if [ $optD -eq 1 ] ; then
   rm -rf $SCRATCHDIR
fi

echo; echo "   `date`"
echo "   ***************************************** "

if [ $ierr -ne 0 ]; then
   exit $ierr
fi
# last line of dalton job script
