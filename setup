#!/usr/bin/env python

# primitive frontend to cmake
# (c) Jonas Juselius <jonas.juselius@uit.no> and Radovan Bast <radovan.bast@uit.no>
# licensed under the GNU Lesser General Public License

import os
import sys
import string
import subprocess
from optparse import OptionParser, OptionGroup

if sys.version < '2.4':
    print('requires python version >= 2.4')
    sys.exit(1)

root_directory = os.path.realpath(__file__)[:-5]
default_path = root_directory + 'build/'

# define example usage

usage = '''
  Typically: ./%prog --fc=gfortran --cc=gcc
  or:        ./%prog --fc=mpif90   --cc=mpicc'''

# initialize parser

parser = OptionParser(usage)

# define options

group = OptionGroup(parser, 'Basic options')
group.add_option('--auto',
                 action='store_true',
                 dest='auto',
                 default=False,
                 help='try to configure --fc, --cc, --cpp, and --math automatically [default: %default]')
group.add_option('--fc',
                 type='string',
                 action='store',
                 dest='fc',
                 default=None,
                 help='set the Fortran compiler [default: pick automatically or based on FC=...]',
                 metavar='STRING')
group.add_option('--cc',
                 type='string',
                 action='store',
                 dest='cc',
                 default=None,
                 help='set the C compiler [default: pick automatically or based on CC=...]',
                 metavar='STRING')
group.add_option('--cpp',
                 type='string',
                 action='store',
                 dest='cpp',
                 default=None,
                 help='set the C++ compiler [default: pick automatically or based on CXX=...]',
                 metavar='STRING')
group.add_option('--math-dir',
                 type='string',
                 action='store',
                 dest='mathdir',
                 default=None,
                 help='directory containing math libraries [default: pick automatically based on MATH_ROOT (see INSTALL.rst)]',
                 metavar='PATH')
group.add_option('--internal-math',
                 action='store_true',
                 dest='nomath',
                 default=False,
                 help='force the use of internal math library [default: %default]')
group.add_option('--int64',
                 action='store_true',
                 dest='int64',
                 default=False,
                 help='build for 64bit integers [default: %default]')
group.add_option('--show',
                 action='store_true',
                 dest='show',
                 default=False,
                 help='show cmake command and exit [default: %default]')
parser.add_option_group(group)

group = OptionGroup(parser, 'Change default paths')
group.add_option('--build',
                 type='string',
                 action='store',
                 dest='build',
                 default=default_path,
                 help='set the build path (you can build several binaries with the same source) [default: %default]',
                 metavar='PATH')
group.add_option('--install',
                 type='string',
                 action='store',
                 dest='install',
                 default=None,
                 help='set the install path for make install [default: %default]',
                 metavar='PATH')
group.add_option('--cmake',
                 type='string',
                 action='store',
                 dest='alternative_cmake',
                 default=None,
                 help='give full path to alternative cmake binary (use this if default cmake is too old)',
                 metavar='PATH')
parser.add_option_group(group)

group = OptionGroup(parser, 'Advanced options')
group.add_option('--math',
                 type='string',
                 action='store',
                 dest='math',
                 default=None,
                 help='explicit linker specification for math library',
                 metavar='STRING')
group.add_option('--debug',
                 action='store_true',
                 dest='debug',
                 default=False,
                 help='build in debug mode (no optimization) [default: %default]')
group.add_option('--check',
                 action='store_true',
                 dest='check',
                 default=False,
                 help='enable bounds checking [default: %default]')
group.add_option('--coverage',
                 action='store_true',
                 dest='coverage',
                 default=False,
                 help='enable code coverage [default: %default]')
group.add_option('--nochecks',
                 action='store_true',
                 dest='nochecks',
                 default=False,
                 help='disable compatibility checks [default: %default]')
group.add_option('--static',
                 action='store_true',
                 dest='static',
                 default=False,
                 help='link statically [default: %default]')
group.add_option('-D',
                 action="append",
                 dest='cmake',
                 default=[],
                 help='forward directly to cmake (example: -D ENABLE_THIS=1 -D ENABLE_THAT=1); \
                       you can also forward CPP defintions all the way to the program \
                       (example: -D CPP="-DDEBUG")',
                 metavar='STRING')
group.add_option('--gen1int-dir',
                 action='store',
                 default=None,
                 help='path to Gen1Int library [default: %default]',
                 metavar='PATH')
parser.add_option_group(group)

# process input

(options, args) = parser.parse_args()

def check_cmake_exists():
    p = subprocess.Popen('cmake --version',
                         shell=True,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE)
    if not ('cmake version' in p.communicate()[0]):
        print('   This code is built using CMake')
        print('')
        print('   CMake is not found')
        print('   get CMake at http://www.cmake.org/')
        print('   on many clusters CMake is installed')
        print('   but you have to load it first:')
        print('   $ module load cmake')
        sys.exit()

def gen_cmake_command():
    # create cmake command from flags

    command = ''
    
    if not options.auto:
        if options.fc:
            command += ' FC=%s' % options.fc
        if options.cc:
            command += ' CC=%s' % options.cc
        if options.cpp:
            command += ' CXX=%s' % options.cpp
   
    if options.alternative_cmake: 
        command += ' %s' % options.alternative_cmake
    else:
        command += ' cmake'
    
    if options.nomath:
        command += ' -DENABLE_INTERNAL_MATH=ON'
    elif options.math:
            command += ' -DUSERDEFINED_MATH="%s"' % options.math
    elif options.mathdir:
            if not os.path.exists(options.mathdir):
                    print("Specified MATH directory does not exist!")
                    sys.exit(1)
            command += ' -DMATH_ROOT="%s"' % options.mathdir

    if (options.fc and options.cc):
        # it is possible to call compilers with long paths
        fc_first_two = os.path.basename(options.fc)[:2].lower()
        cc_first_two = os.path.basename(options.cc)[:2].lower()
        fc_starts_with_mp = (fc_first_two == 'mp')
        cc_starts_with_mp = (cc_first_two == 'mp')
        # if both fc and cc start with 'mp' turn on mpi
        if (fc_starts_with_mp and cc_starts_with_mp):
            command += ' -DENABLE_MPI=ON'
        else:
            if (fc_starts_with_mp or cc_starts_with_mp):
                print("ERROR: you specified --fc=%s and --cc=%s" % (options.fc, options.cc))
                print("       this is inconsistent (both should be MPI compilers if you want MPI)")
                sys.exit(1)
    
    if options.int64:
        command += ' -DENABLE_64BIT_INTEGERS=ON'
    if options.check:
        command += ' -DENABLE_BOUNDS_CHECK=ON'
    if options.coverage:
        command += ' -DENABLE_CODE_COVERAGE=ON'
    if options.nochecks:
        command += ' -DENABLE_SANITY_CHECKS=OFF'
    if options.static:
        command += ' -DENABLE_STATIC_LINKING=ON'
    if options.install:
            command += ' -DCMAKE_INSTALL_PREFIX=' + options.install

    # enables Gen1Int module by defining its path
    if options.gen1int_dir:
        command += ' -DENABLE_GEN1INT=ON'
        command += ' -DLIB_GEN1INT_PATH="%s"' % options.gen1int_dir

    if options.debug:
        command += ' -DCMAKE_BUILD_TYPE=Debug'
    else:
        command += ' -DCMAKE_BUILD_TYPE=Release'
    
    if options.cmake:
        for definition in options.cmake:
            command += ' -D%s' % definition

    command += ' %s' % root_directory
    
    print('%s\n' % command)
    if options.show:
            sys.exit()
    return command

def print_build_help(build_path):
    print('   configure step is done')
    print('   now you need to compile the sources')
    print('')
    print('   to compile with configured parameters (recommended):')
    print('   $ cd ' + build_path)
    print('   $ make')
    print('')
    print('   to modify configured parameters and then compile:')
    print('   $ cd ' + build_path)
    print('   $ ccmake ' + root_directory)
    print('   $ make')

def gen_reconfigure_script(command, build_path):
    file_name = os.path.join(build_path, 'reconfigure')
    f = open(file_name, 'w')
    f.write('#!/bin/sh \n')
    f.write('%s' % command)
    f.close()
    os.system('chmod 700 %s' % file_name)

def save_setup_command(argv, build_path):
    file_name = os.path.join(build_path, 'setup_command')
    f = open(file_name, 'w')
    f.write(" ".join(sys.argv[:]))
    f.close()

def setup_build_path(build_path, only_show_command):
    if os.path.isdir(build_path):
        if not only_show_command:
            print('aborting setup - build directory %s exists already' % build_path)
            print('please first remove it and then rerun setup')
            sys.exit()
    else:
        os.makedirs(build_path, 0755)

def run_cmake(command, build_path):
        topdir = os.getcwd()
        os.chdir(build_path)
        p = subprocess.Popen(command,
                                                 shell=True,
                                                 stdin=subprocess.PIPE,
                                                 stdout=subprocess.PIPE)
        s = p.communicate()[0]
        print(s)
        os.chdir(topdir)
        return s

def main():
        if len(sys.argv) == 1:
                # user has given no arguments: print help and exit
                print(parser.format_help().strip())
                sys.exit()

        check_cmake_exists()
        build_path = options.build
        setup_build_path(build_path, options.show)
        command = gen_cmake_command()
        status = run_cmake(command, build_path)

        if not 'Configuring incomplete' in status:
                gen_reconfigure_script(command, build_path)
                save_setup_command(sys.argv, build_path)
                print_build_help(build_path)

if __name__ == '__main__':
        main()
