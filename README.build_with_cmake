

    Table of contents
    -----------------

 1. Configure vs. cmake for users
 2. Quick start into cmake
 3. Building using the setup script
 4. Building without the setup script
 5. Out of source compilation
 6. Compiling in verbose mode
 7. Compiling on many cores
 8. Running cmake using GUI
 9. Running tests (currently only DIRAC)
10. Building utilities (currently only DIRAC)
11. Make install (currently only DIRAC)


 1. Configure vs. cmake for users
    -----------------------------

You have two methods to build the source code, either using the configure
script:
   $ ./configure; make
or using cmake:
   $ ./setup [--flags]; cd build; make

The configure script configures a prepared Makefile, whereas cmake creates a
new Makefile based on default parameters which can be modified.

Advantages of using cmake:
 - Configuration and build process is truly cross-platform.
 - It is possible to configure and build the source code without having to
   answer questions.
 - Better detection of MPI/OpenMP and math libraries.
 - Cross-platform user interface to modify configuration parameters including a
   GUI.


 2. Quick start into cmake
    ----------------------

First install cmake, on ubuntu/debian:
   $ sudo apt-get install cmake
On many clusters you need to load cmake:
   $ module load cmake

Now:
   $ mkdir build
   $ cd build
   $ cmake ..
   $ make
Try also ccmake to modify parameters and [r]econfigure:
   $ cd build
   $ cmake ..
   $ ccmake ..
   $ make

There is nothing special about the directory "build".
You can do this instead:
   $ mkdir /buildpath
   $ cd /buildpath
   $ cmake /sourcepath
   $ make


 3. Building using the setup script
    -------------------------------

The setup script is a useful front-end to cmake.
It does nothing else than creating the directory "build" and calling
cmake with appropriate environment variables and flags:
   $ ./setup [--flags]
   $ cd build
   $ make
Call setup without flags to see all available options:
   $ ./setup
You can see the command using:
   $ ./setup [--flags] --show
and use it directly to call cmake without setup.


 4. Building without the setup script
    ---------------------------------

The setup script does nothing else than calling cmake with appropriate
environment variables and flags.  The two following strategies are completely
equivalent:

Using cmake directly:
   $ mkdir build
   $ cd build
   $ FC=mpif90 CC=mpicc cmake -DENABLE_MPI=1 -DCMAKE_BUILD_TYPE=Release ..
   $ make

Using setup:
   $ ./setup --fc=mpif90 --cc=mpicc --mpi
   $ cd build
   $ make


 5. Out of source compilation
    -------------------------

By default cmake builds out of source. This is a very good thing.
You can build several binaries with the same source:
   $ cd /sourcepath
   $ ./setup --fc=gfortran --cc=gcc --prefix=/gfortran-buildpath
   $ cd /gfortran-builddir
   $ make
   $ cd /sourcepath
   $ ./setup --fc=ifort --cc=icc --prefix=/ifort-buildpath
   $ cd /ifort-buildpath
   $ make


 6. Compiling in verbose mode
    -------------------------

Sometimes you want to see the actual compiler flags and definitions:
   $ make VERBOSE=1


 7. Compiling on many cores
    -----------------------

Yes, it works. Try:
   $ make -j4


 8. Running cmake using GUI
    -----------------------

You prefer GUI? No problem. You can configure with GUI:
   $ cd build
   $ cmake ..
   $ cmake-gui ..
You may have to install cmake-gui for it, on debian/ubuntu:
   $ sudo apt-get install cmake cmake-gui


 9. Running tests (currently only DIRAC)
    -------------

You can run the test suite with:
   $ make test


10. Building utilities (currently only DIRAC)
    ------------------

   $ cd build
   $ cmake ..
   $ ccmake ..
Now set ENABLE_UTILITIES to ON, [c]onfigure, then [g]enerate and exit, and finally
   $ make
Now you have the utilities!


11. Make install (currently only DIRAC)
    ------------

Make install is very useful to make DIRAC available to other users on the same
machine:
   $ cmake -DCMAKE_INSTALL_PREFIX=/path /path/to/source
   $ make install
