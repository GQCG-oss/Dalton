#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > geoopt_cartsad2.info <<'%EOF%'
   geoopt_cartsad2
   ---------------
   Molecule:         C2H6
   Wave Function:    SCF / STO-3G
   Test Purpose:     First order transition state optimization in Cartesian
                     coordinates. Initial approximate (model) Hessian, updates
                     are done with Bofill's method. The partitioned rational
                     function method controls the steps and Baker's
                     convergence criteria are used
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > geoopt_cartsad2.mol <<'%EOF%'
BASIS
STO-3G
First order saddle point optimization in Cartesian coordinates

Atomtypes=2
Charge=6.0 Atoms=2
C     0.0000000000        0.0000000000        1.4597876282             *
C     0.0000000000        0.0000000000       -1.4597876282             *
Charge=1.0 Atoms=6
H     1.6808445513        0.9704360937        2.1445545504             *
H    -1.6808445513        0.9704360937        2.1445545504             *
H     0.0000000000       -1.9408721894        2.1445545504             *
H    -1.9608445513       -0.4204360937       -2.1445545504             *
H     1.2008445513       -1.4004360937       -2.1445545504             *
H     0.4600000000        1.8308721894       -2.1445545504             *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > geoopt_cartsad2.dal <<'%EOF%'
**DALTON INPUT
.OPTIMIZE
*OPTIMIZE
.CARTES
.INIMOD
.RF
.SADDLE
.BAKER
**WAVE FUNCTION
.HF
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >geoopt_cartsad2.check
cat >>geoopt_cartsad2.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Geometry optimization
CRIT1=`$GREP "Saddle point optimization has been requested\." $log | wc -l`
CRIT2=`$GREP "Default 1st order TS\-method will be used\: * Bofills update\." $log | wc -l`
CRIT3=`$GREP "Optimization will be performed in Cartesian coordinates\." $log | wc -l`
CRIT4=`$GREP "Model Hessian will be used as initial Hessian\." $log | wc -l`
CRIT5=`$GREP "Partitioned rational function method will be used to control step\." $log | wc -l`
CRIT6=`$GREP "The eigenvector corresponding to the lowest eigenvalue is chosen" $log | wc -l`
CRIT7=`$GREP "as reaction mode \(default\)\." $log | wc -l`
CRIT8=`$GREP "Baker.s convergence criteria will be used\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[1]=8
ERROR[1]="GEOMETRY OPTIMIZATION NOT SET UP CORRECTLY"

# Geometry
CRIT1=`$GREP "3 * z * 1\.4598223474" $log | wc -l`
CRIT2=`$GREP "4 * C * x * (0| )\.0201357029" $log | wc -l`
CRIT3=`$GREP "6 * z * \-1\.4596834723" $log | wc -l`
CRIT4=`$GREP "7 * H * x * 1\.6428197329" $log | wc -l`
CRIT5=`$GREP "8 * y * 1\.0258944623" $log | wc -l`
CRIT6=`$GREP "9 * z * 2\.1559360111" $log | wc -l`
CRIT7=`$GREP "10 * H * x * \-1\.7169234124" $log | wc -l`
CRIT8=`$GREP "11 * y * (0| )\.9139003605" $log | wc -l`
CRIT9=`$GREP "12 * z * 2\.1327640108" $log | wc -l`
CRIT10=`$GREP "13 * H * x * (0| )\.0599355947" $log | wc -l`
CRIT11=`$GREP "14 * y * \-1\.9397948248" $log | wc -l`
CRIT12=`$GREP "15 * z * 2\.1450189290" $log | wc -l`
CRIT13=`$GREP "16 * H * x * \-1\.9208446692" $log | wc -l`
CRIT14=`$GREP "17 * y * (\-0|\-)\.4855279159" $log | wc -l`
CRIT15=`$GREP "18 * z * \-2\.1578535369" $log | wc -l`
CRIT16=`$GREP "19 * H * x * 1\.2716620058" $log | wc -l`
CRIT17=`$GREP "20 * y * \-1\.3596527890" $log | wc -l`
CRIT18=`$GREP "21 * z * \-2\.1358349591" $log | wc -l`
CRIT19=`$GREP "22 * H * x * (0| )\.4235983754" $log | wc -l`
CRIT20=`$GREP "23 * y * 1\.8451807069" $log | wc -l`
CRIT21=`$GREP "24 * z * \-2\.1416840166" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17 \+ $CRIT18 \+ \
		$CRIT19 \+ $CRIT20 \+ $CRIT21`
CTRL[2]=21
ERROR[2]="GEOMETRY NOT READ CORRECTLY"

# Initial energy
CRIT1=`$GREP "Final * HF energy\: * \-78\.30080922911[0-9]" $log | wc -l`
TEST[3]=`expr	$CRIT1`
CTRL[3]=1
ERROR[3]="INITIAL ENERGY NOT CORRECT"

# Initial gradient
CRIT1=`$GREP "C * (\-0|\-)\.001190934[0-9] * (0| )\.000022779[0-9] * (0| )\.009427465[0-9]" $log | wc -l`
CRIT2=`$GREP "C * (0| )\.073326980[0-9] * (\-0|\-)\.003654989[0-9] * (\-0|\-)\.022529011[0-9]" $log | wc -l`
CRIT3=`$GREP "H * (0| )\.003321721[0-9] * (0| )\.003265197[0-9] * (\-0|\-)\.003524783[0-9]" $log | wc -l`
CRIT4=`$GREP "H * (\-0|\-)\.004839540[0-9] * (0| )\.001294116[0-9] * (\-0|\-)\.003290332[0-9]" $log | wc -l`
CRIT5=`$GREP "H * (0| )\.001040451[0-9] * (\-0|\-)\.004722929[0-9] * (\-0|\-)\.003214289[0-9]" $log | wc -l`
CRIT6=`$GREP "H * (\-0|\-)\.028201521[0-9] * (\-0|\-)\.003724429[0-9] * (\-0|\-)\.007790710[0-9]" $log | wc -l`
CRIT7=`$GREP "H * (\-0|\-)\.032210012[0-9] * (0| )\.024261712[0-9] * (0| )\.019764135[0-9]" $log | wc -l`
CRIT8=`$GREP "H * (\-0|\-)\.011247146[0-9] * (\-0|\-)\.016741455[0-9] * (0| )\.011157527[0-9]" $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[4]=8
ERROR[4]="INITIAL GRADIENT NOT CORRECT"

# Initial step
CRIT1=`$GREP "C * (\-0|\-)\.011486339[0-9] * (0| )\.004904250[0-9] * 1\.454427315[0-9]" $log | wc -l`
CRIT2=`$GREP "C * (\-0|\-)\.034964944[0-9] * (0| )\.011285892[0-9] * \-1\.463955789[0-9]" $log | wc -l`
CRIT3=`$GREP "H * 1\.547455160[0-9] * 1\.123220145[0-9] * 2\.193615585[0-9]" $log | wc -l`
CRIT4=`$GREP "H * \-1\.761999499[0-9] * (0| )\.780713792[0-9] * 2\.205894284[0-9]" $log | wc -l`
CRIT5=`$GREP "H * (0| )\.191206379[0-9] * \-1\.911604119[0-9] * 2\.172657604[0-9]" $log | wc -l`
CRIT6=`$GREP "H * \-1\.925489601[0-9] * (\-0|\-)\.368682408[0-9] * \-2\.172947687[0-9]" $log | wc -l`
CRIT7=`$GREP "H * 1\.189121971[0-9] * \-1\.467497481[0-9] * \-2\.180524723[0-9]" $log | wc -l`
CRIT8=`$GREP "H * (0| )\.586540204[0-9] * 1\.827659928[0-9] * \-2\.210681276[0-9]" $log | wc -l`
TEST[5]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[5]=8
ERROR[5]="INITIAL STEP NOT CORRECT"

# Second iteration
CRIT1=`$GREP "Energy at this geometry is * \: * \-78\.30428[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * (0| )\.00882[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * (0| )\.34040[0-9]" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[6]=3
ERROR[6]="SECOND ITERATION NOT CORRECT"

# Third iteration
CRIT1=`$GREP "Energy at this geometry is * \: * \-78\.30317[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * (0| )\.01768[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * (0| )\.34190[0-9]" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[7]=3
ERROR[7]="THIRD ITERATION NOT CORRECT"

# Final geometry
CRIT1=`$GREP "C * (\-0| \-)\.01523779[0-9][0-9] * (\-0| \-)\.00013831[0-9][0-9] * 1\.46251473[0-9][0-9]" $log | wc -l`
CRIT2=`$GREP "C * (\-0| \-)\.03962081[0-9][0-9] * (0| )\.00028593[0-9][0-9] * \-1\.46282061[0-9][0-9]" $log | wc -l`
CRIT3=`$GREP "H * 1\.14249510[0-9][0-9] * 1\.52752094[0-9][0-9] * 2\.19270484[0-9][0-9]" $log | wc -l`
CRIT4=`$GREP "H * \-1\.90778063[0-9][0-9] * (0| )\.23282935[0-9][0-9] * 2\.21824520[0-9][0-9]" $log | wc -l`
CRIT5=`$GREP "H * (0| )\.73859795[0-9][0-9] * \-1\.76151311[0-9][0-9] * 2\.19529128[0-9][0-9]" $log | wc -l`
CRIT6=`$GREP "H * \-1\.94729840[0-9][0-9] * (0| )\.21275304[0-9][0-9] * \-2\.18681927[0-9][0-9]" $log | wc -l`
CRIT7=`$GREP "H * (0| )\.72095761[0-9][0-9] * \-1\.75248657[0-9][0-9] * \-2\.20890124[0-9][0-9]" $log | wc -l`
CRIT8=`$GREP "H * 1\.08827030[0-9][0-9] * 1\.54074871[0-9][0-9] * \-2\.21172961[0-9][0-9]" $log | wc -l`
TEST[8]=`expr   $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
                $CRIT7 \+ $CRIT8`
CTRL[8]=32
ERROR[8]="FINAL GEOMETRY NOT CORRECT"

# Geometry convergence
CRIT1=`$GREP "Geometry converged in * 14( |  )iterations\!" $log | wc -l`
CRIT2=`$GREP "Energy at final geometry is * \: * \-78\.30160[0-9] a\.u\." $log | wc -l`
CRIT3=`$GREP "Energy change during optimization \: * (\-0| \-)\.00079[0-9] a\.u\." $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[9]=3
ERROR[9]="GEOMETRY OPTIMIZATION NOT CONVERGED"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
