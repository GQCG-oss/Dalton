#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION                                                   #
#######################################################################
cat > dft_stex.info <<'%EOF%'
   dft_stex
   ---------
   Molecule:         ?
   Wave Function:    ?
   Test Purpose:     ?
%EOF%

#######################################################################
#  MOLECULE INPUT                                                     #
#######################################################################
cat > dft_stex.mol <<'%EOF%'
BASIS
aug-cc-pCVTZ
OCS
===========
Atomtypes=3 Angstrom Generators=2 X Y
Charge=8.0 Atoms=1
O 0.000 0.000 -1.1239
Charge=6.0 Atoms=1
C 0.000 0.000 0.000
Charge=16.0 Atoms=1
S 0.0 0.0 1.5640
%EOF%

#######################################################################
#  DALTON INPUT                                                       #
#######################################################################
cat > dft_stex__1.dal <<'%EOF%'
**DALTON
.RUN WAVE FUNCTIONS
**WAVE FUNCTION
.DFT
 B3LYP
**END OF DALTON INPUT
%EOF%

cat > dft_stex__2.dal <<'%EOF%'
**DALTON
.RUN WAVE FUNCTIONS
**WAVE FUNCTION
.DFT
 B3LYP
*SCF INPUT
.DOUBLY OCCUPIED
 8 3 3 0
.SINGLY OCCUPIED
 1 0 0 0
*ORBITAL INPUT
.MOSTART
 NEWORB
.NOSUPS
.REORDER
 2 0 0 0
 2 9 9 2
.FREEZE
 1 0 0 0 
 9
**END OF DALTON INPUT
%EOF%

cat > dft_stex__3.dal <<'%EOF%'
**DALTON
.RUN WAVE FUNCTIONS
**WAVE FUNCTION
.DFT
 B3LYP
*SCF INPUT
.DOUBLY OCCUPIED
 8 3 3 0
.SINGLY OCCUPIED
 1 0 0 0
*ORBITAL INPUT
.MOSTART
 NEWORB
.NOSUPS
.FREEZE
 8 3 3 0 
 1 2 3 4 5 6 7 8
 1 2 3
 1 2 3 
**END OF DALTON INPUT
%EOF%

cat > dft_stex__4.dal <<'%EOF%'
**DALTON
.RUN WAVE FUNCTIONS
**WAVE FUNCTION
.DFT
 B3LYP
*SCF INPUT
.DOUBLY OCCUPIED
 8 2 3 0
.SINGLY OCCUPIED
 1 1 0 0
*ORBITAL INPUT
.MOSTART
 NEWORB
.NOSUPS
.FREEZE
 1 1 0 0 
 9
 3  
**END OF DALTON INPUT
%EOF%


#######################################################################
#  CHECK SCRIPT                                                       #
#######################################################################
echo $CHECK_SHELL > dft_stex__1.check
cat >> dft_stex__1.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# ?
CRIT1=`$GREP "Final DFT energy\: * \-511\.51127220[0-9][0-9][0-9][0-9]" $log | wc -l`
TEST[1]=`expr	$CRIT1`
CTRL[1]=1
ERROR[1]="? NOT CORRECT"

PASSED=1
for i in 1
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
      echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} );"
      PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
   echo TEST ENDED PROPERLY
   exit 0
else
   echo THERE IS A PROBLEM
   exit 1
fi

%EOF%

echo $CHECK_SHELL > dft_stex__2.check
cat >> dft_stex__2.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# ?
CRIT1=`$GREP "Spin multiplicity\: * 2" $log | wc -l`
CRIT2=`$GREP "Spatial symmetry\: * 1" $log | wc -l`
CRIT3=`$GREP "Total charge of molecule\: * 1" $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[1]=3
ERROR[1]="? NOT CORRECT"

# ?
CRIT1=`$GREP "Final DFT energy\: * \-491\.62797422[0-9][0-9][0-9][0-9]" $log | wc -l`
TEST[2]=`expr	$CRIT1`
CTRL[2]=1
ERROR[2]="? NOT CORRECT"

PASSED=1
for i in 1 2
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
      echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} );"
      PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
   echo TEST ENDED PROPERLY
   exit 0
else
   echo THERE IS A PROBLEM
   exit 1
fi
%EOF%

echo $CHECK_SHELL > dft_stex__3.check
cat >> dft_stex__3.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# ?
CRIT1=`$GREP "Number of orbitals frozen with \"\.FREEZE\" 14" $log | wc -l`
TEST[1]=`expr	$CRIT1`
CTRL[1]=1
ERROR[1]="? NOT CORRECT"

# ?
CRIT1=`$GREP "Final DFT energy\: * \-491\.66356699[0-9][0-9][0-9][0-9]" $log | wc -l`
TEST[2]=`expr	$CRIT1`
CTRL[2]=1
ERROR[2]="? NOT CORRECT"

PASSED=1
for i in 1 2
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
      echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} );"
      PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
   echo TEST ENDED PROPERLY
   exit 0
else
   echo THERE IS A PROBLEM
   exit 1
fi
%EOF%

echo $CHECK_SHELL > dft_stex__4.check
cat >> dft_stex__4.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# ?
CRIT1=`$GREP "Number of orbitals frozen with \"\.FREEZE\" * 2" $log | wc -l`
TEST[1]=`expr	$CRIT1`
CTRL[1]=1
ERROR[1]="? NOT CORRECT"

# ?
CRIT1=`$GREP "Final DFT energy\: * \-49(0| )\.93295933[0-9][0-9][0-9][0-9]" $log | wc -l`
TEST[2]=`expr	$CRIT1`
CTRL[2]=1
ERROR[2]="? NOT CORRECT"

PASSED=1
for i in 1 2
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
      echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} );"
      PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
   echo TEST ENDED PROPERLY
   exit 0
else
   echo THERE IS A PROBLEM
   exit 1
fi
%EOF%
