#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > qmmm_debug1.info <<'%EOF%'
   qmmm_debug1
   -----------
   Molecule:         CH2O(QM)/2 waters(MM)
   Wave Function:    HF / cc-pVDZ  
   Test Purpose:     Test of energy through ABACUS incl. octupole MM contributions
%EOF%
#######################################################################
#  INTEGRAL INPUT
#######################################################################
cat > qmmm_debug1.mol <<'%EOF%'
ATOMBASIS
CH2O PLUS 2 WATERS
------------------------
AtomTypes=3 NoSymmetry Angstrom
        6.0   1    Basis=STO-3G
C           -1.588367    -.770650     .029109 
        8.0   1    Basis=STO-3G
O           -1.657083     .436069    -.009750 
        1.0   2    Basis=STO-3G
H           -.620668   -1.294822      .054251 
H           -2.508043   -1.382001     .040282
%EOF%
#######################################################################
#  QM/MM INTERACTION INPUT
#######################################################################
cat > qmmm_debug1.pot <<'%EOF%'
AU
10 3 2 1
1       -6.2900497831       -0.1950764279       -0.0007861261       -0.7423294438        0.0303539300        0.3280749969        0.0000894127       -3.9516312016       -0.0561791973        0.0008348984       -4.5778807726        0.0000430036       -5.0206878337       -0.0150265431       -0.0987395310       -0.0000662324        0.0267925411       -0.0002404801        0.0219905017        0.0316173819       -0.0000537894        0.2063402594        0.0001754735        1.5931619660        0.0800886126       -0.0012113893        2.5255643422        0.0013486011        3.3670040387
1       -4.7314868231        0.7808745191        0.0006406172        0.3699305781       -0.1005787187       -0.0557286568       -0.0000906399       -0.5774205281       -0.0533068952       -0.0000246837       -0.6043997755       -0.0000510833       -0.5595888419       -0.1619181713        0.0850921795        0.0000929568       -0.1146181832        0.0000703947       -0.1289664836        0.0249611871       -0.0000856861       -0.0002388295       -0.0003063695        0.7929865198        0.1542303414        0.0001503753        0.6015087761        0.0002890322        0.5925152779
1       -7.6330082202        1.0331680746       -0.0016062672        0.3723988657        0.0911510444       -0.0729658327        0.0000575297       -0.5583105371        0.0466697048        0.0000093367       -0.6224134008        0.0000240992       -0.5582982578        0.2225477804        0.0892957698       -0.0000119240        0.0847835272        0.0000788789        0.1297854415       -0.0229222402        0.0000709112       -0.0215875620        0.0002947454        0.7209493065       -0.1783490996        0.0000586528        0.6420261847        0.0000623389        0.5751449171
1       -5.5107683031        0.2928990456       -0.0000727545        0.0000000000       -0.1154554696       -0.1098625035       -0.0001131928        0.6931173508        0.3993825482        0.0004427892        0.4811735442        0.0003651060        0.2335453026        1.1456775180        0.1549332625        0.0007929257        0.4485264365        0.0002257656        0.0913068047        0.1384100831        0.0003985145       -0.0411780894        0.0001923295        3.4974039172        2.1355046659        0.0022286584        1.8455550714        0.0014941130        1.4124398311
1       -6.9615290017        0.4190458234       -0.0011961966        0.0000000000        0.0925537150       -0.1281941897        0.0000470915        0.5497923459       -0.4072157699        0.0001632249        0.6322989679       -0.0002450231        0.2419436597       -1.0679926401        0.1883003226       -0.0006460315       -0.4727878386        0.0000929861       -0.1029722061        0.3945907516       -0.0002891323       -0.0214685564       -0.0002611650        2.6916145417       -2.2463816416        0.0003377505        2.5542051973       -0.0013254304        1.4293331897
2        3.2924641584        4.4245310497       -0.0014078460       -0.7424407021       -0.2840371815        0.1671869101        0.0013661730       -4.4188113058        0.2801417448        0.0002126277       -4.1129942280        0.0039064597       -5.0206529493        0.0330216712        0.0760732530       -0.0003899377        0.0087745562        0.0009840165       -0.1813726316       -0.1218544851       -0.0016261873        0.1033223765        0.0025668497        2.2823444229       -0.4207398269       -0.0006457588        1.8324399300       -0.0069062619        3.3666855109
2        1.5905409054        3.7261752013       -0.0015495754        0.3699635356        0.1039146227        0.0490621032        0.0000401115       -0.6455428297       -0.0041180935        0.0001453595       -0.5362599824        0.0001224056       -0.5596286658        0.0810557396        0.0035896134        0.0001532545       -0.0090165544       -0.0002204117        0.0757377031        0.2842212967        0.0003840935        0.1046774555        0.0011004803        0.8132771942        0.1387943320        0.0004103386        0.5814638105       -0.0000004496        0.5927954021
2        3.0850893929        6.2328855678        0.0078499223        0.3724771666        0.0058194611       -0.1165815150       -0.0005822607       -0.5562677027        0.0450154899        0.0002165578       -0.6244100291       -0.0004104801       -0.5583164804       -0.2048195849       -0.1193833899       -0.0004155498       -0.0283899604        0.0001497946       -0.0584957773       -0.0907038156        0.0007682659       -0.1181777112       -0.0013985302        0.4993246061       -0.0196042351        0.0000571000        0.8612729797        0.0020132268        0.5750737753
2        2.4415025319        4.0753531255       -0.0014787107        0.0000000000        0.1562106237        0.0289341838       -0.0001592549        0.9309922644        0.2280573432       -0.0002276453        0.2429875998       -0.0003906527        0.2330344430       -0.9479164549       -0.3465723180        0.0000503448       -0.2208226146       -0.0005070175       -0.0203355542       -0.7822646206       -0.0024267913       -0.1000074397       -0.0013521451        4.2946372081        1.2694080541        0.0004092117        1.0566337570       -0.0044943748        1.4133256363
2        3.1887767756        5.3287083088        0.0032210382        0.0000000000        0.0501665747       -0.1493857957       -0.0008283012        0.2176177849       -0.1663997493       -0.0007688598        0.9642929866        0.0038606681        0.2416297737        0.3960654724        0.3304373259        0.0011603890        0.0383098210       -0.0006969579        0.0790638970        1.2632196844        0.0054054256        0.0723757018        0.0006068808        0.6174280837       -0.4402546796       -0.0002937434        4.6220075983        0.0174865911        1.4307100148
%EOF%
#
#######################################################################
#  DALTON INPUT
#######################################################################
cat > qmmm_debug1.dal <<'%EOF%'
**DALTON
.RUN PROPERTIES
*QMMM
.QMMM
.MMITER
.MMDIIS
 5
.PRINT
 1 
.MMPROP
**WAVE FUNCTIONS
.HF
**PROPERTIES
.EXCITA
*EXCITA
.NEXCIT
 2
.DIPSTR
.THRESH
 1.0D-7
**END OF
%EOF%
#
#######################################################################
#  CHECK SCRIPT
#######################################################################
#
echo $CHECK_SHELL >qmmm_debug1.check
cat >>qmmm_debug1.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

#
# General and Energy Tests 
#
CRIT1=`$GREP "Anisotropic polarization" $log | wc -l`
CRIT2=`$GREP 'QM/MM "QMMM" calculation converged' $log | wc -l`
CRIT3=`$GREP "Charge contribution: * ( \-|\-0)\.023650685" $log | wc -l`
CRIT4=`$GREP "Dipole contribution: * ( \-|\-0)\.0158848355" $log | wc -l`
CRIT5=`$GREP "Quadrupole contribution: * ( \-|\-0)\.0116817110" $log | wc -l`
CRIT6=`$GREP "Octuple contribution: * ( \-|\-0)\.0194945874" $log | wc -l`
CRIT7=`$GREP "Electronic Pol. energy: * ( |0)\.0866091125" $log | wc -l`
CRIT8=`$GREP "Nuclear pol. energy: * ( \-|\-0)\.110635041" $log | wc -l`
CRIT9=`$GREP "Multipole Pol. energy: * ( |0)\.0001481426" $log | wc -l`
CRIT10=`$GREP "Total QM/MM energy: * ( \-|\-0)\.094589605" $log | wc -l`
CRIT11=`$GREP "Final DFT energy: * \-112\.432515780" $log | wc -l`
TEST[1]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 `
CTRL[1]=11
ERROR[1]="GENERAL QMMM or QMMM ENERGY CONTRIBUTIONS NOT CORRECT"

#
# Test of QMMM dipole moment
#
CRIT1=`$GREP "x * ( \-|\-0)\.048674" $log | wc -l`
CRIT2=`$GREP "y * \-1\.054558" $log | wc -l`
CRIT3=`$GREP "z * ( |0)\.030318" $log | wc -l`
TEST[2]=`expr $CRIT1 \+ $CRIT2 \+ $CRIT3 `
CTRL[2]=3
ERROR[2]="QMMM DIPOLE MOMENT NOT CORRECT"


#
# Test of QMMM excitation energies
#
CRIT1=`$GREP "1        1  *  ( |0)\.250" $log | wc -l`
TEST[3]=`expr $CRIT1 `
CTRL[3]=2
ERROR[3]="QMMM EXCITATION ENERGIES NOT CORRECT"

PASSED=1 
for i in 3
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi                
%EOF%
chmod +x qmmm_debug1.check
#######################################################################
