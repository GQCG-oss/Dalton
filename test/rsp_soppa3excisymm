#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > rsp_soppa3excisymm.info <<'%EOF%'
   rsp_soppa3excisymm
   ------------------
   Molecule:         H2O
   Wave Function:    MP2 (SOPPA) / cc-pVDZ
   Test Purpose:     Triplet excitation energies. Symmetry
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > rsp_soppa3excisymm.mol <<'%EOF%'
BASIS
cc-pVDZ
SOPPA calculation of triplet excitation energies. Symmetry

    2    2  X  Z
        8.    1
O     0.0 -0.2249058930 0.0
        1.    1
H     1.45235 0.899623 0.0
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > rsp_soppa3excisymm.dal <<'%EOF%'
**DALTON INPUT
.RUN RESPONSE
**INTEGRALS
.FC
**WAVE FUNCTION
.HF
.MP2
**RESPONSE
.S0MIX
.NOITRA
.TRPFLG
.SOPPA
*LINEAR
.SINGLE RESIDUE
.ROOTS
 2 2 2 2
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >rsp_soppa3excisymm.check
cat >>rsp_soppa3excisymm.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Integral setup
CRIT1=`$GREP "Calculation of one\- and two\-electron Hamiltonian integrals\." $log | wc -l`
CRIT2=`$GREP "The following one\-electron property integrals are calculated\:" $log | wc -l`
CRIT3=`$GREP "\- overlap integrals" $log | wc -l`
CRIT4=`$GREP "\- Fermi contact integrals" $log | wc -l`
CRIT5=`$GREP "\(Dirac delta function integrals\)" $log | wc -l`
CRIT6=`$GREP "two-electron integrals are transformed to P-supermatrix elements" $log | wc -l`
CRIT7=`$GREP "Integrals for all indirect spin\-spin coupling and/or shielding tensors are calculated\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ $CRIT7`
CTRL[1]=7
ERROR[1]="INTEGRAL CALCULATION NOT SET UP CORRECTLY"

# Basis set
CRIT1=`$GREP "O * 1 * 8\.0000 * 26 * 14 * \[9s4p1d\|3s2p1d\]" $log | wc -l`
CRIT2=`$GREP "H * 2 * 1\.0000 * 7 * 5 * \[4s1p\|2s1p\]" $log | wc -l`
CRIT3=`$GREP "total\: * 3 * 10\.0000 * 40 * 24" $log | wc -l`
CRIT4=`$GREP "Spherical harmonic basis used\." $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[2]=4
ERROR[2]="BASIS SET NOT READ CORRECTLY"

# Geometry
CRIT1=`$GREP "Total number of coordinates\: * 9" $log | wc -l`
CRIT2=`$GREP "1 * x * (0| )\.0000000000" $log | wc -l`
CRIT3=`$GREP "2 * y * (\-0|\-)\.2249058930" $log | wc -l`
CRIT4=`$GREP "3 * z * (0| )\.0000000000" $log | wc -l`
CRIT5=`$GREP "4 * x * 1\.4523500000" $log | wc -l`
CRIT6=`$GREP "5 * y * (0| )\.8996230000" $log | wc -l`
CRIT7=`$GREP "6 * z * (0| )\.0000000000" $log | wc -l`
CRIT8=`$GREP "7 * x * \-1\.4523500000" $log | wc -l`
CRIT9=`$GREP "8 * y * (0| )\.8996230000" $log | wc -l`
CRIT10=`$GREP "9 * z * (0| )\.0000000000" $log | wc -l`
TEST[3]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10`
CTRL[3]=10
ERROR[3]="GEOMETRY NOT READ CORRECTLY"

# Energies
CRIT1=`$GREP "Hartree\-Fock total energy \: * \-76\.025681483" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-76\.2306668" $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2`
CTRL[4]=2
ERROR[4]="ENERGIES NOT CORRECT"

# Response setup
CRIT1=`$GREP "2 Excitation energies are calculated for symmetry no\. * [1-4]" $log | wc -l`
TEST[5]=`expr	$CRIT1`
CTRL[5]=4
ERROR[5]="RESPONSE CALCULATION NOT SET UP CORRECTLY"

# Sym 1 State 1
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.3473645[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.678317 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 96\.29 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 3\.71 \%" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[6]=4
ERROR[6]="STATE 1 (SYM 1) NOT CORRECT"

# Sym 1 State 2
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.5482453[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.477436 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 97\.59 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 2\.41 \%" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[7]=4
ERROR[7]="STATE 2 (SYM 1) NOT CORRECT"

# Sym 2 State 1
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.4219158[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.603766 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 96\.78 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 3\.22 \%" $log | wc -l`
TEST[8]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[8]=4
ERROR[8]="STATE 1 (SYM 2) NOT CORRECT"

# Sym 2 State 2
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.4843853[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.541296 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 97\.14 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 2\.86 \%" $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[9]=4
ERROR[9]="STATE 2 (SYM 2) NOT CORRECT"

# Sym 3 State 1
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.2589028[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.766779 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.75 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.25 \%" $log | wc -l`
TEST[10]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[10]=4
ERROR[10]="STATE 1 (SYM 3) NOT CORRECT"

# Sym 3 State 2
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.8172585[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.208423 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.04 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.96 \%" $log | wc -l`
TEST[11]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[11]=4
ERROR[11]="STATE 2 (SYM 3) NOT CORRECT"

# Sym 4 State 1
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.3434040[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.682277 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.92 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.08 \%" $log | wc -l`
TEST[12]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[12]=4
ERROR[12]="STATE 1 (SYM 4) NOT CORRECT"

# Sym 4 State 2
CRIT1=`$GREP "\@ *Excitation energy \: * (0| )\.7735277[0-9] * au" $log | wc -l`
CRIT2=`$GREP "\@ *Total energy \: * \-75\.252154 * au" $log | wc -l`
CRIT3=`$GREP "\@ *SOPPA * p\-h * weight in excitation operator\: * 95\.19 \%" $log | wc -l`
CRIT4=`$GREP "\@ *SOPPA 2p\-2h weight in excitation operator\: * 4\.81 \%" $log | wc -l`
TEST[13]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[13]=4
ERROR[13]="STATE 2 (SYM 4) NOT CORRECT"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13
do
   if [ ${TEST[i]} -lt ${CTRL[i]} ]; then
     echo "${ERROR[i]} ( test = ${TEST[i]}; control = ${CTRL[i]} ); "
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
