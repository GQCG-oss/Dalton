#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > geoopt_parallel.info <<'%EOF%'
   geoopt_parallel
   ---------------
   Molecule:         Acrolein
   Wave Function:    SCF / 3-21G
   Test Purpose:     Parallel second order transition state optimization
                     in redundant internal coordinates. The partitioned
                     rational function method controls the steps and
                     Baker's convergence criteria are used
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > geoopt_parallel.mol <<'%EOF%'
BASIS
3-21G
Locating the rotational transition state of acrolein

    3    0
        6.    3
C    -1.2039490098         .6299819763       -1.8443710751             *
C     1.2056120532         .0000000000        1.9839551839             *
C      .0666798969        -.9449729645        -.3221285864             *
        8.    1
O      .0000000000         .0000000000        3.9490688445             *
        1.    4
H    -2.0522570986        -.0738599558       -3.5620058833             *
H     3.1211832712         .7038419322        1.9619811778             *
H      .2424607776       -2.9181815653        -.8128813887             *
H    -1.3797298905        2.6031905771       -1.3536182728             *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > geoopt_parallel.dal <<'%EOF%'
**GENERAL
.PARALLEL
.OPTIMIZE
*OPTIMIZE
.REDINT
.NEWTON
.SADDLE
.BAKER
.RF
**WAVE FUNCTION
.HF
*END OF INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >geoopt_parallel.check
cat >>geoopt_parallel.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Geometry optimization
CRIT1=`$GREP "Saddle point optimization has been requested\." $log | wc -l`
CRIT2=`$GREP "2nd order Newton method will be used\." $log | wc -l`
CRIT3=`$GREP "Optimization will be performed in redundant internal coordinates\." $log | wc -l`
CRIT4=`$GREP "Partitioned rational function method will be used to control step\." $log | wc -l`
CRIT5=`$GREP "The eigenvector corresponding to the lowest eigenvalue is chosen" $log | wc -l`
CRIT6=`$GREP "as reaction mode \(default\)\." $log | wc -l`
CRIT7=`$GREP "Baker.s convergence criteria will be used\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7`
CTRL[1]=7
ERROR[1]="GEOMETRY OPTIMIZATION NOT SET UP CORRECTLY"

# Geometry
CRIT1=`$GREP "1 * C * x * \-1\.2039490098" $log | wc -l`
CRIT2=`$GREP "2 * y * (0| )\.6299819763" $log | wc -l`
CRIT3=`$GREP "3 * z * \-1\.8443710751" $log | wc -l`
CRIT4=`$GREP "4 * C * x * 1\.2056120532" $log | wc -l`
CRIT5=`$GREP "6 * z * 1\.9839551839" $log | wc -l`
CRIT6=`$GREP "7 * C * x * (0| )\.0666798969" $log | wc -l`
CRIT7=`$GREP "8 * y * (\-0|\-)\.9449729645" $log | wc -l`
CRIT8=`$GREP "9 * z * (\-0|\-)\.3221285864" $log | wc -l`
CRIT9=`$GREP "12 * z * 3\.9490688445" $log | wc -l`
CRIT10=`$GREP "13 * H * x * \-2\.0522570986" $log | wc -l`
CRIT11=`$GREP "14 * y * (\-0|\-)\.0738599558" $log | wc -l`
CRIT12=`$GREP "15 * z * \-3\.5620058833" $log | wc -l`
CRIT13=`$GREP "16 * H * x * 3\.1211832712" $log | wc -l`
CRIT14=`$GREP "17 * y * (0| )\.7038419322" $log | wc -l`
CRIT15=`$GREP "18 * z * 1\.9619811778" $log | wc -l`
CRIT16=`$GREP "19 * H * x * (0| )\.2424607776" $log | wc -l`
CRIT17=`$GREP "20 * y * \-2\.9181815653" $log | wc -l`
CRIT18=`$GREP "21 * z * (\-0|\-)\.8128813887" $log | wc -l`
CRIT19=`$GREP "22 * H * x * \-1\.3797298905" $log | wc -l`
CRIT20=`$GREP "23 * y * 2\.6031905771" $log | wc -l`
CRIT21=`$GREP "24 * z * \-1\.3536182728" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17 \+ $CRIT18 \+ \
		$CRIT19 \+ $CRIT20 \+ $CRIT21`
CTRL[2]=21
ERROR[2]="GEOMETRY NOT READ CORRECTLY"

# Initial energy
CRIT1=`$GREP "Final * HF energy\: * \-189\.67124158034[0-9]" $log | wc -l`
TEST[3]=`expr	$CRIT1`
CTRL[3]=1
ERROR[3]="INITIAL ENERGY NOT CORRECT"

# Initial gradient
CRIT1=`$GREP "C * (\-0|\-)\.014304872[0-9] * (0| )\.022712736[0-9] * (\-0|\-)\.014875443[0-9]" $log | wc -l`
CRIT2=`$GREP "C * (0| )\.011827367[0-9] * (0| )\.003797100[0-9] * (\-0|\-)\.039692957[0-9]" $log | wc -l`
CRIT3=`$GREP "C * (0| )\.015505537[0-9] * (\-0|\-)\.015599330[0-9] * (0| )\.050478524[0-9]" $log | wc -l`
CRIT4=`$GREP "O * (\-0|\-)\.012501600[0-9] * (\-0|\-)\.004779689[0-9] * (0| )\.001867289[0-9]" $log | wc -l`
CRIT5=`$GREP "H * (0| )\.000201595[0-9] * (\-0|\-)\.006844258[0-9] * (\-0|\-)\.004777373[0-9]" $log | wc -l`
CRIT6=`$GREP "H * (\-0|\-)\.001573967[0-9] * (0| )\.000436351[0-9] * (0| )\.005088828[0-9]" $log | wc -l`
CRIT7=`$GREP "H * (\-0|\-)\.001391950[0-9] * (\-0|\-)\.003771305[0-9] * (\-0|\-)\.004125009[0-9]" $log | wc -l`
CRIT8=`$GREP "H * (0| )\.002237889[0-9] * (0| )\.004048394[0-9] * (0| )\.006036140[0-9]" $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[4]=8
ERROR[4]="INITIAL GRADIENT NOT CORRECT"

# Initial Hessian
CRIT1=`$GREP "C * z * (0| )\.29116[0-9] * (\-0|\-)\.00113[0-9] * (0| )\.64976[0-9]" $log | wc -l`
CRIT2=`$GREP "C * x * (\-0|\-)\.00357[0-9] * (\-0|\-)\.00820[0-9] * (\-0|\-)\.02632[0-9] * (0| )\.73827[0-9]" $log | wc -l`
CRIT3=`$GREP "C * y * (0| )\.01150[0-9] * (0| )\.01576[0-9] * (0| )\.02684[0-9] * (0| )\.12782[0-9] * (0| )\.32052[0-9]" $log | wc -l`
CRIT4=`$GREP "C * z * (\-0|\-)\.01906[0-9] * (\-0|\-)\.00649[0-9] * (\-0|\-)\.02724[0-9] * (\-0|\-)\.19605[0-9] * (0| )\.06939[0-9] * (0| )\.91553[0-9]" $log | wc -l`
CRIT5=`$GREP "C * x * (\-0|\-)\.20744[0-9] * (0| )\.14082[0-9] * (\-0|\-)\.15540[0-9] * (\-0|\-)\.14308[0-9] * (\-0|\-)\.03275[0-9] * (\-0|\-)\.08086[0-9]" $log | wc -l`
CRIT6=`$GREP "C * y * (0| )\.14419[0-9] * (\-0|\-)\.30154[0-9] * (0| )\.15204[0-9] * (\-0|\-)\.02575[0-9] * (\-0|\-)\.13543[0-9] * (\-0|\-)\.04868[0-9]" $log | wc -l`
CRIT7=`$GREP "C * z * (\-0|\-)\.15473[0-9] * (0| )\.14997[0-9] * (\-0|\-)\.28061[0-9] * (\-0|\-)\.07231[0-9] * (\-0|\-)\.05913[0-9] * (\-0|\-)\.21529[0-9]" $log | wc -l`
CRIT8=`$GREP "O * x * (\-0|\-)\.00027[0-9] * (0| )\.00121[0-9] * (0| )\.00103[0-9] * (\-0|\-)\.30087[0-9] * (\-0|\-)\.01174[0-9] * (0| )\.31179[0-9]" $log | wc -l`
CRIT9=`$GREP "H * y * (\-0|\-)\.04215[0-9] * (\-0|\-)\.10800[0-9] * (\-0|\-)\.09397[0-9] * (0| )\.00519[0-9] * (\-0|\-)\.00277[0-9] * (\-0|\-)\.00080[0-9]" $log | wc -l`
CRIT10=`$GREP "H * z * (\-0|\-)\.00595[0-9] * (0| )\.02572[0-9] * (0| )\.01197[0-9] * (0| )\.00272[0-9] * (\-0|\-)\.02914[0-9] * (\-0|\-)\.00033[0-9]" $log | wc -l`
CRIT11=`$GREP "O * x * (0| )\.02319[0-9] * (\-0|\-)\.00153[0-9] * (\-0|\-)\.00802[0-9] * (0| )\.30011[0-9]" $log | wc -l`
CRIT12=`$GREP "H * y * (0| )\.01439[0-9] * (0| )\.01168[0-9] * (0| )\.02516[0-9] * (\-0|\-)\.00114[0-9] * (0| )\.00030[0-9] * (0| )\.00063[0-9]" $log | wc -l`
CRIT13=`$GREP "H * z * (\-0|\-)\.02651[0-9] * (\-0|\-)\.01364[0-9] * (0| )\.00150[0-9] * (0| )\.05396[0-9] * (0| )\.01260[0-9] * (\-0|\-)\.00740[0-9]" $log | wc -l`
CRIT14=`$GREP "H * x * (0| )\.00711[0-9] * (0| )\.02222[0-9] * (0| )\.00197[0-9] * (0| )\.00054[0-9] * (0| )\.00107[0-9] * (0| )\.00219[0-9]" $log | wc -l`
CRIT15=`$GREP "H * y * (0| )\.00029[0-9] * (0| )\.00089[0-9] * (\-0|\-)\.00112[0-9] * (0| )\.11160[0-9] * (0| )\.06768[0-9]" $log | wc -l`
CRIT16=`$GREP "H * z * (0| )\.00513[0-9] * (0| )\.00104[0-9] * (\-0|\-)\.00168[0-9] * (\-0|\-)\.00204[0-9] * (0| )\.00095[0-9] * (\-0|\-)\.00157[0-9]" $log | wc -l`
CRIT17=`$GREP "H * x * (0| )\.00830[0-9] * (0| )\.00381[0-9] * (\-0|\-)\.00794[0-9] * (0| )\.04594[0-9]" $log | wc -l`
TEST[5]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17`
CTRL[5]=17
ERROR[5]="INITIAL HESSIAN NOT CORRECT"

# Initial step
CRIT1=`$GREP "C * \-1\.1935816..[0-9] * (0| )\.6206537..[0-9] * \-1\.8807980..[0-9]" $log | wc -l`
CRIT2=`$GREP "C * 1\.1702690..[0-9] * (\-0|\-)\.0169851..[0-9] * 2\.0688822..[0-9]" $log | wc -l`
CRIT3=`$GREP "C * (0| )\.0293087..[0-9] * (\-0|\-)\.8989335..[0-9] * (\-0|\-)\.3458017..[0-9]" $log | wc -l`
CRIT4=`$GREP "O * (0| )\.106305[1-2]..[0-9] * (\-0|\-)\.060952[6-7]..[0-9] * 4\.096702[5-6]..[0-9]" $log | wc -l`
CRIT5=`$GREP "H * \-2\.0205801..[0-9] * (\-0|\-)\.0483651..[0-9] * \-3\.6061778..[0-9]" $log | wc -l`
CRIT6=`$GREP "H * 3\.0962590..[0-9] * (0| )\.682745[0-2]..[0-9] * 1\.9131553..[0-9]" $log | wc -l`
CRIT7=`$GREP "H * (0| )\.241530[2-3]..[0-9] * \-2\.8748760..[0-9] * (\-0|\-)\.778083[5-6]..[0-9]" $log | wc -l`
CRIT8=`$GREP "H * \-1\.429510[4-5]..[0-9] * 2\.5967137..[0-9] * \-1\.467878[8-9]..[0-9]" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[6]=8
ERROR[6]="INITIAL STEP NOT CORRECT"

# Second iteration
CRIT1=`$GREP "Energy at this geometry is * \: * \-189\.67565[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * (0| )\.00910[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * (0| )\.03338[0-9]" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[7]=3
ERROR[7]="SECOND ITERATION NOT CORRECT"

# Third iteration
CRIT1=`$GREP "Norm of gradient * \: * (0| )\.00023[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of step * \: * (0| )\.00100[0-9]" $log | wc -l`
TEST[8]=`expr	$CRIT1 \+ $CRIT2`
CTRL[8]=2
ERROR[8]="THIRD ITERATION NOT CORRECT"

# Final geometry
CRIT1=`$GREP "C * \-1\.19971964[2-4][0-9] * (0| )\.62538650[3-7][0-9] * \-1\.88969791[6-8][0-9]" $log | wc -l`
CRIT2=`$GREP "C * 1\.16928015[1-3][0-9] * (\-0|\-)\.02067769[2-6][0-9] * 2\.08609183[1-3][0-9]" $log | wc -l`
CRIT3=`$GREP "C * (0| )\.01712319[6-8][0-9] * (\-0|\-)\.88952656[8-9][0-9] * (\-0|\-)\.34196942[1-3][0-9]" $log | wc -l`
CRIT4=`$GREP "O * (0| )\.13233560[0-3][0-9] * (\-0|\-)\.06671352[0-3][0-9] * 4\.12188218[0-1][0-9]" $log | wc -l`
CRIT5=`$GREP "H * \-2\.00288664[2-4][0-9] * (\-0|\-)\.0500947[8-9].[0-9] * \-3\.62384366[0-3][0-9]" $log | wc -l`
CRIT6=`$GREP "H * 3\.09448501[6-9][0-9] * (0| )\.6657957[0-1].[0-9] * 1\.90887997[3-6][0-9]" $log | wc -l`
CRIT7=`$GREP "H * (0| )\.24234448[1-4][0-9] * \-2\.86315954[1-3][0-9] * (\-0|\-)\.7727366[3-4].[0-9]" $log | wc -l`
CRIT8=`$GREP "H * \-1\.45296216[4-7][0-9] * 2\.59898990[0-4][0-9] * \-1\.48860634[4-7][0-9]" $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[9]=32
ERROR[9]="FINAL GEOMETRY NOT CORRECT"

# Optimization converged
CRIT1=`$GREP "Geometry converged in * 4( |  )iterations\!" $log | wc -l`
CRIT2=`$GREP "Energy at final geometry is * \: * \-189\.67574[0-9] a\.u\." $log | wc -l`
CRIT3=`$GREP "Energy change during optimization \: * (\-0|\-)\.00449[0-9] a\.u\." $log | wc -l`
TEST[10]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[10]=3
ERROR[10]="GEOMETRY OPTIMIZATION NOT CONVERGED"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
