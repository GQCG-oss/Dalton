
#######################################################################
#  TEST DESCRIPTION
#######################################################################
#
#*# geoopt_mp2froz
#*# --------------
#*# Molecule:         C6H6
#*# Wave Function:    MP2 with frozen core
#*# Test Purpose:     1st order geometry optimization using MP2 frozen
#*#                   core numerical gradients
#
#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > geoopt_mp2froz.mol <<%EOF%
BASIS
STO-3G
1st order geometry optimization using MP2 frozen core
numerical gradients (test61)
    2    3  X  Y  Z   1.00D-15
        1.0   2    2    1    1    1
H1    0.00000000          4.686595943         0.00000000               *
H2    4.058715599         2.343279074         0.00000000               *
        6.0   2    3    1    1    1    1
C1    0.00000000          2.636205494         0.00000000               *
C2    2.283034611         1.318102747         0.00000000               *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > geoopt_mp2froz.dal <<%EOF%
**GENERAL
.RUN WAVEFUNCTION
.MINIMIZE
*MINIMIZE
.1STORD
**SIRIUS
.HF
.MP2
*HF INPUT
*MP2 INPUT
.MP2 FROZEN
 2 1 2 1 0 0 0 0
*END OF
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo '#!/bin/ksh
log=$1

if [ `uname` = IRIX64 ]; then
   GREP="egrep"
else
   GREP="egrep -a"
fi

# Optimization setup
CRIT1=`$GREP "Default 1st order method will be used\: * BFGS update\." $log | wc -l`
CRIT2=`$GREP "Optimization will be performed in redundant internal coordinates\." $log | wc -l`
CRIT3=`$GREP "Model Hessian will be used as initial Hessian\." $log | wc -l`
CRIT4=`$GREP "Trust region method will be used to control step \(default\)\." $log | wc -l`
CRIT5=`$GREP "1st Order Geometry Optimization" $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5`
CTRL[1]=5
ERROR[1]="GEOMETRY OPTIMIZATION NOT SET UP CORRECTLY"

# Basis set
CRIT1=`$GREP "Basis set used is \"STO\-3G\" from the basis set library\." $log | wc -l`
CRIT2=`$GREP "H1 * 2 * 1 * 3 * 1 * \[3s\|1s\]" $log | wc -l`
CRIT3=`$GREP "H2 * 4 * 1 * 3 * 1 * \[3s\|1s\]" $log | wc -l`
CRIT4=`$GREP "C1 * 2 * 6 * 15 * 5 * \[6s3p\|2s1p\]" $log | wc -l`
CRIT5=`$GREP "C2 * 4 * 6 * 15 * 5 * \[6s3p\|2s1p\]" $log | wc -l`
CRIT6=`$GREP "total\: * 12 * 42 * 108 * 36" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6`
CTRL[2]=84
ERROR[2]="BASIS SET NOT READ CORRECLY"

# Nuclear repulsion
CRIT1=`$GREP "Nuclear repulsion energy \: * 203\.4400431896[0-9][0-9]" $log | wc -l`
TEST[3]=`expr	$CRIT1`
CTRL[3]=2
ERROR[3]="NUCLEAR REPULSION NOT CORRECT"

# Symmatry
CRIT1=`$GREP "Number of coordinates in each symmetry\: * 6 * 6 * 6 * 6 * 4 * 2 * 4 * 2" $log | wc -l`
CRIT2=`$GREP "Number of orbitals in each symmetry\: * 9 * 6 * 9 * 6 * 2 * 1 * 2 * 1" $log | wc -l`
TEST[4]=`expr	$CRIT1 \+ $CRIT2`
CTRL[4]=28
ERROR[4]="SYMMETRY NOT CORRECT"

# MP2 frozen orbitals
CRIT1=`$GREP "MP2 frozen orbitals per symmetry \: * 2 * 1 * 2 * 1 * 0 * 0 * 0 * 0" $log | wc -l`
CRIT2=`$GREP "Total energy and NO\:s calculated with frozen orbitals\." $log | wc -l`
TEST[5]=`expr	$CRIT1 \+ $CRIT2`
CTRL[5]=112
ERROR[5]="MP2 FROZEN ORBITALS NOT CORRECT"

# Initial energies
CRIT1=`$GREP "\= MP2 second order energy \: * \-228\.238786825[0-9]" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-228\.241609824[0-9]" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2`
CTRL[6]=3
ERROR[6]="INITIAL ENERGIES NOT CORRECT"

# Numerical gradient
CRIT1=`$GREP "Derivatives calculated to order * 1" $log | wc -l`
CRIT2=`$GREP "Analytical derivatives from energies to * 0 order\." $log | wc -l`
CRIT3=`$GREP "1\. numerical derivatives from * 0\. order analytical derivatives" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[7]=12
ERROR[7]="NUMERICAL DERIVATIVES NOT SET UP CORRECTLY"

# First displacement
CRIT1=`$GREP "\= MP2 second order energy \: * \-228\.238950987[0-9]" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-228\.241773187[0-9]" $log | wc -l`
TEST[8]=`expr	$CRIT1 \+ $CRIT2`
CTRL[8]=2
ERROR[8]="FIRST DISPLACEMENT NOT CORRECT"

# Second displacement
CRIT1=`$GREP "\= MP2 second order energy \: * \-228\.238575698[0-9]" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-228\.241399494[0-9]" $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2`
CTRL[9]=2
ERROR[9]="SECOND DISPLACEMENT NOT CORRECT"

# Third displacement
CRIT1=`$GREP "\= MP2 second order energy \: * \-228\.238998152[0-9]" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-228\.241820173[0-9]" $log | wc -l`
TEST[10]=`expr	$CRIT1 \+ $CRIT2`
CTRL[10]=2
ERROR[10]="THIRD DISPLACEMENT NOT CORRECT"

# Fourth displacement
CRIT1=`$GREP "\= MP2 second order energy \: * \-228\.238538511[0-9]" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-228\.241362486[0-9]" $log | wc -l`
TEST[11]=`expr	$CRIT1 \+ $CRIT2`
CTRL[11]=2
ERROR[11]="FOURTH DISPLACEMENT NOT CORRECT"

# Fifth displacement
CRIT1=`$GREP "\= MP2 second order energy \: * \-228\.238911341[0-9]" $log | wc -l`
CRIT2=`$GREP "\= MP2 second order energy \: * \-228\.241733775[0-9]" $log | wc -l`
TEST[12]=`expr	$CRIT1 \+ $CRIT2`
CTRL[12]=2
ERROR[12]="FIFTH DISPLACEMENT NOT CORRECT"

# Initial gradient
CRIT1=`$GREP "H1 * y * \-0\.026536963[0-9]" $log | wc -l`
CRIT2=`$GREP "H2 * x * \-0\.045964084[0-9]" $log | wc -l`
CRIT3=`$GREP "H2 * y * \-0\.026536133[0-9]" $log | wc -l`
CRIT4=`$GREP "C1 * y * \-0\.019879112[0-9]" $log | wc -l`
CRIT5=`$GREP "C2 * x * \-0\.034431248[0-9]" $log | wc -l`
CRIT6=`$GREP "C2 * y * \-0\.019994848[0-9]" $log | wc -l`
TEST[13]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6`
CTRL[13]=6
ERROR[13]="INITIAL GRADIENT NOT CORRECT"

# Initial step
CRIT1=`$GREP "H1 * 1 * 0\.0000000000 * 4\.746349102[0-9] * 0\.0000000000" $log | wc -l`
CRIT2=`$GREP "H1 * 2 * 0\.0000000000 * \-4\.746349102[0-9] * 0\.0000000000" $log | wc -l`
CRIT3=`$GREP "H2 * 1 * 4\.110446348[0-9] * 2\.37316423[5-6][0-9] * 0\.0000000000" $log | wc -l`
CRIT4=`$GREP "H2 * 2 * \-4\.110446348[0-9] * 2\.37316423[5-6][0-9] * 0\.0000000000" $log | wc -l`
CRIT5=`$GREP "H2 * 3 * 4\.110446348[0-9] * \-2\.37316423[5-6][0-9] * 0\.0000000000" $log | wc -l`
CRIT6=`$GREP "H2 * 4 * \-4\.110446348[0-9] * \-2\.37316423[5-6][0-9] * 0\.0000000000" $log | wc -l`
CRIT7=`$GREP "C1 * 1 * 0\.0000000000 * 2\.669428356[0-9] * 0\.0000000000" $log | wc -l`
CRIT8=`$GREP "C1 * 2 * 0\.0000000000 * \-2\.669428356[0-9] * 0\.0000000000" $log | wc -l`
CRIT9=`$GREP "C2 * 1 * 2\.311789074[0-9] * 1\.334725241[0-9] * 0\.0000000000" $log | wc -l`
CRIT10=`$GREP "C2 * 2 * \-2\.311789074[0-9] * 1\.334725241[0-9] * 0\.0000000000" $log | wc -l`
CRIT11=`$GREP "C2 * 3 * 2\.311789074[0-9] * \-1\.334725241[0-9] * 0\.0000000000" $log | wc -l`
CRIT12=`$GREP "C2 * 4 * \-2\.311789074[0-9] * \-1\.334725241[0-9] * 0\.0000000000" $log | wc -l`
TEST[14]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12`
CTRL[14]=12
ERROR[14]="INITIAL STEP NOT CORRECT"

# Second energy
CRIT1=`$GREP "Energy at this geometry is * \: * \-228\.24260[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * 0\.00666[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * 0\.04911[0-9]" $log | wc -l`
TEST[15]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[15]=3
ERROR[15]="SECOND ENERGY NOT CORRECT"

# Third energy
CRIT1=`$GREP "Energy at this geometry is * \: * \-228\.24269[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * 0\.00054[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * 0\.00292[0-9]" $log | wc -l`
TEST[16]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[16]=4
ERROR[16]="THIRD ENERGY NOT CORRECT"

# Final energy
CRIT1=`$GREP "Energy at this geometry is * \: * \-228\.24269[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * 0\.00004[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * 0\.00007[0-9]" $log | wc -l`
TEST[17]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[17]=4
ERROR[17]="FINAL ENERGY NOT CORRECT"

# Final geometry
CRIT1=`$GREP "H1 * 1 * 0\.0000000000 * 4\.756665813[0-9] * 0\.0000000000" $log | wc -l`
CRIT2=`$GREP "H1 * 2 * 0\.0000000000 * \-4\.756665813[0-9] * 0\.0000000000" $log | wc -l`
CRIT3=`$GREP "H2 * 1 * 4\.11938781[4-5][0-9] * 2\.378320393[0-9] * 0\.0000000000" $log | wc -l`
CRIT4=`$GREP "H2 * 2 * \-4\.11938781[4-5][0-9] * 2\.378320393[0-9] * 0\.0000000000" $log | wc -l`
CRIT5=`$GREP "H2 * 3 * 4\.11938781[4-5][0-9] * \-2\.378320393[0-9] * 0\.0000000000" $log | wc -l`
CRIT6=`$GREP "H2 * 4 * \-4\.11938781[4-5][0-9] * \-2\.378320393[0-9] * 0\.0000000000" $log | wc -l`
CRIT7=`$GREP "C1 * 1 * 0\.0000000000 * 2\.67619563[7-8][0-9] * 0\.0000000000" $log | wc -l`
CRIT8=`$GREP "C1 * 2 * 0\.0000000000 * \-2\.67619563[7-9][0-9] * 0\.0000000000" $log | wc -l`
CRIT9=`$GREP "C2 * 1 * 2\.317651745[0-9] * 1\.338113167[0-9] * 0\.0000000000" $log | wc -l`
CRIT10=`$GREP "C2 * 2 * \-2\.317651745[0-9] * 1\.338113167[0-9] * 0\.0000000000" $log | wc -l`
CRIT11=`$GREP "C2 * 3 * 2\.317651745[0-9] * \-1\.338113167[0-9] * 0\.0000000000" $log | wc -l`
CRIT12=`$GREP "C2 * 4 * \-2\.317651745[0-9] * \-1\.338113167[0-9] * 0\.0000000000" $log | wc -l`
TEST[18]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12`
CTRL[18]=36
ERROR[18]="FINAL GEOMETRY NOT CORRECT"

# Convergence
CRIT1=`$GREP "Geometry converged in * 4 iterations\!" $log | wc -l`
CRIT2=`$GREP "Energy at final geometry is * \: * \-228\.24269[0-9] a\.u\." $log | wc -l`
CRIT3=`$GREP "Energy change during optimization \: * \-0\.00391[0-9] a\.u\." $log | wc -l`
TEST[19]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[19]=3
ERROR[19]="OPTIMIZATION NOT CONVERGED CORRECTLY"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

' > geoopt_mp2froz.check
#######################################################################
