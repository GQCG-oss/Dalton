#!/bin/sh
#
# This is the script for generating files for a specific Dalton test job.
#
# For the .check file ksh or bash is preferred, otherwise use sh
# (and hope it is not the old Bourne shell, which will not work)
#
if [ -x /bin/ksh ]; then
   CHECK_SHELL='#!/bin/ksh'
elif [ -x /bin/bash ]; then
   CHECK_SHELL='#!/bin/bash'
else
   CHECK_SHELL='#!/bin/sh'
fi


#######################################################################
#  TEST DESCRIPTION
#######################################################################
cat > geoopt_redintmin.info <<'%EOF%'
   geoopt_redintmin
   ----------------
   Molecule:         C2H6
   Wave Function:    SCF / STO-3G
   Test Purpose:     Minimization in redundant internal coordinates using
                     a model Hessian. The BFGS-formula is used for updating
                     the Hessians
%EOF%

#######################################################################
#  MOLECULE INPUT
#######################################################################
cat > geoopt_redintmin.mol <<'%EOF%'
BASIS
STO-3G
First order minimization in redundant internal coordinates

    2
        6.    2
C     0.0000000000        0.0000000000        1.4547876282             *
C     0.0000000000        0.0000000000       -1.4547876282             *
        1.    6
H     1.6808445513        0.9704360937        2.1445545504             *
H    -1.6808445513        0.9704360937        2.1445545504             *
H     0.0000000000       -1.9408721894        2.1445545504             *
H     1.6808445513       -0.9704360937       -2.1445545504             *
H    -1.6808445513       -0.9704360937       -2.1445545504             *
H     0.0000000000        1.9408721894       -2.1445545504             *
%EOF%

#######################################################################
#  DALTON INPUT
#######################################################################
cat > geoopt_redintmin.dal <<'%EOF%'
**DALTON INPUT
.OPTIMIZE
*OPTIMIZE
.REDINT
.INIMOD
**WAVE FUNCTION
.HF
**END OF DALTON INPUT
%EOF%
#######################################################################



#######################################################################

#######################################################################
#  CHECK SCRIPT
#######################################################################
echo $CHECK_SHELL >geoopt_redintmin.check
cat >>geoopt_redintmin.check <<'%EOF%'
log=$1

if [ `uname` = Linux ]; then
   GREP="egrep -a"
else
   GREP="egrep"
fi

# Geometry optimization
CRIT1=`$GREP "Default 1st order method will be used\: * BFGS update\." $log | wc -l`
CRIT2=`$GREP "Optimization will be performed in redundant internal coordinates\." $log | wc -l`
CRIT3=`$GREP "Model Hessian will be used as initial Hessian\." $log | wc -l`
CRIT4=`$GREP "Trust region method will be used to control step \(default\)\." $log | wc -l`
TEST[1]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4`
CTRL[1]=4
ERROR[1]="GEOMETRY OPTIMIZATION NOT SET UP CORRECTLY"

# Symmetry
CRIT1=`$GREP "Symmetry class found\: D\(3d\)" $log | wc -l`
CRIT2=`$GREP "The following elements were found\: * Z * XY" $log | wc -l`
CRIT3=`$GREP "Full group is\: * D\(3d\)" $log | wc -l`
CRIT4=`$GREP "Represented as\: C2h" $log | wc -l`
CRIT5=`$GREP "Reflection in the xy\-plane" $log | wc -l`
CRIT6=`$GREP "Rotation about the z\-axis" $log | wc -l`
CRIT7=`$GREP "Number of coordinates in each symmetry\: * 7 * 5 * 7 * 5" $log | wc -l`
CRIT8=`$GREP "Number of orbitals in each symmetry\: * 6 * 2 * 6 * 2" $log | wc -l`
TEST[2]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[2]=10
ERROR[2]="SYMMETRY NOT CORRECT"

# Geometry
CRIT1=`$GREP "Total number of coordinates\: 24" $log | wc -l`
CRIT2=`$GREP "1 * C * 1 * x * 1\.45478762[0-9][0-9]" $log | wc -l`
CRIT3=`$GREP "4 * C * 2 * x * \-1\.45478762[0-9][0-9]" $log | wc -l`
CRIT4=`$GREP "7 * H * 1 * x * 2\.14455455[0-9][0-9]" $log | wc -l`
CRIT5=`$GREP "8 * y * 1\.94087212[0-9][0-9]" $log | wc -l`
CRIT6=`$GREP "10 * H * 2 * x * \-2\.14455455[0-9][0-9]" $log | wc -l`
CRIT7=`$GREP "11 * y * \-1\.94087212[0-9][0-9]" $log | wc -l`
CRIT8=`$GREP "13 * H * 1 * x * 2\.14455455[0-9][0-9]" $log | wc -l`
CRIT9=`$GREP "14 * y * (\-0| \-)\.97043608[0-9][0-9]" $log | wc -l`
CRIT10=`$GREP "15 * z * 1\.68084462[0-9][0-9]" $log | wc -l`
CRIT11=`$GREP "16 * H * 2 * x * 2\.14455455[0-9][0-9]" $log | wc -l`
CRIT12=`$GREP "17 * y * (\-0| \-)\.97043608[0-9][0-9]" $log | wc -l`
CRIT13=`$GREP "18 * z * \-1\.68084462[0-9][0-9]" $log | wc -l`
CRIT14=`$GREP "19 * H * 3 * x * \-2\.14455455[0-9][0-9]" $log | wc -l`
CRIT15=`$GREP "20 * y * (0| )\.97043608[0-9][0-9]" $log | wc -l`
CRIT16=`$GREP "21 * z * 1\.68084462[0-9][0-9]" $log | wc -l`
CRIT17=`$GREP "22 * H * 4 * x * \-2\.14455455[0-9][0-9]" $log | wc -l`
CRIT18=`$GREP "23 * y * (0| )\.97043608[0-9][0-9]" $log | wc -l`
CRIT19=`$GREP "24 * z * \-1\.68084462[0-9][0-9]" $log | wc -l`
TEST[3]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8 \+ $CRIT9 \+ $CRIT10 \+ $CRIT11 \+ $CRIT12 \+ \
		$CRIT13 \+ $CRIT14 \+ $CRIT15 \+ $CRIT16 \+ $CRIT17 \+ $CRIT18 \+ \
		$CRIT19`
CTRL[3]=19
ERROR[3]="GEOMETRY NOT READ CORRECTLY"

# Initial energy
CRIT1=`$GREP "Final * HF energy\: * \-78\.3055756194[3-4][0-9]" $log | wc -l`
TEST[4]=`expr	$CRIT1`
CTRL[4]=1
ERROR[4]="INITIAL ENERGY NOT CORRECT"

# Initial gradient
CRIT1=`$GREP "C * x * (0| )\.00982706[0-9][0-9]" $log | wc -l`
CRIT2=`$GREP "C * y * (0| )\.00000004[0-9][0-9]" $log | wc -l`
CRIT3=`$GREP "H * x * (\-0| \-)\.00516664[0-9][0-9]" $log | wc -l`
CRIT4=`$GREP "H * y * (0| )\.01013801[0-9][0-9]" $log | wc -l`
CRIT5=`$GREP "H * x * (\-0| \-)\.01033326[0-9][0-9]" $log | wc -l`
CRIT6=`$GREP "H * y * (\-0| \-)\.01013805[0-9][0-9]" $log | wc -l`
CRIT7=`$GREP "H * z * (0| )\.01755964[0-9][0-9]" $log | wc -l`
TEST[5]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7`
CTRL[5]=7
ERROR[5]="INITIAL GRADIENT NOT CORRECT"

# Initial step
CRIT1=`$GREP "C * 1 * 1\.45740402[0-9][0-9] * (\-0| \-)\.00000000[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT2=`$GREP "C * 2 * \-1\.45740402[0-9][0-9] * (0| )\.00000000[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT3=`$GREP "H * 1 * 2\.19458827[0-9][0-9] * 1\.91519100[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT4=`$GREP "H * 2 * \-2\.19458827[0-9][0-9] * \-1\.91519100[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT5=`$GREP "H * 1 * 2\.19458826[0-9][0-9] * (\-0| \-)\.95759552[0-9][0-9] * 1\.65860407[0-9][0-9]" $log | wc -l`
CRIT6=`$GREP "H * 2 * 2\.19458826[0-9][0-9] * (\-0| \-)\.95759552[0-9][0-9] * \-1\.65860407[0-9][0-9]" $log | wc -l`
CRIT7=`$GREP "H * 3 * \-2\.19458826[0-9][0-9] * (0| )\.95759552[0-9][0-9] * 1\.65860407[0-9][0-9]" $log | wc -l`
CRIT8=`$GREP "H * 4 * \-2\.19458826[0-9][0-9] * (0| )\.95759552[0-9][0-9] * \-1\.65860407[0-9][0-9]" $log | wc -l`
TEST[6]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[6]=8
ERROR[6]="INITIAL STEP NOT CORRECT"

# Second iteration
CRIT1=`$GREP "Energy at this geometry is * \: * \-78\.30611[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of gradient * \: * (0| )\.00383[0-9]" $log | wc -l`
CRIT3=`$GREP "Norm of step * \: * (0| )\.04204[0-9]" $log | wc -l`
TEST[7]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[7]=3
ERROR[7]="SECOND ITERATION NOT CORRECT"

# Third iteration
CRIT1=`$GREP "Norm of gradient * \: * (0| )\.00042[0-9]" $log | wc -l`
CRIT2=`$GREP "Norm of step * \: * (0| )\.00199[0-9]" $log | wc -l`
TEST[8]=`expr	$CRIT1 \+ $CRIT2`
CTRL[8]=2
ERROR[8]="THIRD ITERATION NOT CORRECT"

# Final geometry
CRIT1=`$GREP "C * 1 * 1\.45287966[0-9][0-9] * (\-0| \-)\.00000000[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT2=`$GREP "C * 2 * \-1\.45287966[0-9][0-9] * (0| )\.00000000[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT3=`$GREP "H * 1 * 2\.17938072[0-9][0-9] * 1\.91943705[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT4=`$GREP "H * 2 * \-2\.17938072[0-9][0-9] * \-1\.91943705[0-9][0-9] * (0| )\.00000000[0-9][0-9]" $log | wc -l`
CRIT5=`$GREP "H * 1 * 2\.17938070[0-9][0-9] * (\-0| \-)\.95971854[0-9][0-9] * 1\.66228125[0-9][0-9]" $log | wc -l`
CRIT6=`$GREP "H * 2 * 2\.17938070[0-9][0-9] * (\-0| \-)\.95971854[0-9][0-9] * \-1\.66228125[0-9][0-9]" $log | wc -l`
CRIT7=`$GREP "H * 3 * \-2\.17938070[0-9][0-9] * (0| )\.95971854[0-9][0-9] * 1\.66228125[0-9][0-9]" $log | wc -l`
CRIT8=`$GREP "H * 4 * \-2\.17938070[0-9][0-9] * (0| )\.95971854[0-9][0-9] * \-1\.66228125[0-9][0-9]" $log | wc -l`
TEST[9]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3 \+ $CRIT4 \+ $CRIT5 \+ $CRIT6 \+ \
		$CRIT7 \+ $CRIT8`
CTRL[9]=32
ERROR[9]="FINAL GEOMETRY NOT CORRECT"

# Geometry converged
CRIT1=`$GREP "Geometry converged in * 5( |  )iterations\!" $log | wc -l`
CRIT2=`$GREP "Energy at final geometry is * \: * \-78\.30618[0-9] a\.u\." $log | wc -l`
CRIT3=`$GREP "Energy change during optimization \: * (\-0|\-)\.00060[0-9] a\.u\." $log | wc -l`
TEST[10]=`expr	$CRIT1 \+ $CRIT2 \+ $CRIT3`
CTRL[10]=3
ERROR[10]="GEOMETRY OPTIMIZATION NOT CONVERGED CORRECTLY"

PASSED=1
for i in 1 2 3 4 5 6 7 8 9 10
do
   if [ ${TEST[i]} -ne ${CTRL[i]} ]; then
     echo ${ERROR[i]}
     PASSED=0
   fi
done

if [ $PASSED -eq 1 ]
then
  echo TEST ENDED PROPERLY
  exit 0
else
  echo THERE IS A PROBLEM
  exit 1
fi

%EOF%
#######################################################################
