#!/bin/ksh
#########################################################################
#
# Shell script for running DALTON test suite
#
# by Christof Haettig and Kasper Hald, Sep. 2000
#
#########################################################################

#########################################################################
# define all the different test suites
#########################################################################
ESSENTIAL=""
#
SHORT="energy_direct energy_nosymm energy_symm geoopt_exci2 \
geoopt_numgrd geoopt_prop geoopt_prop2 prop_ecd prop_spinspin \
prop_spinspin2 prop_spinspin3 prop_vibvcd rsp_2ndharm rsp_3rdharm \
rsp_3rdmom rsp_dresqr rsp_exci rsp_excipolar2 rsp_hyperpolar rsp_lrso \
rsp_lrso2 rsp_phosph rsp_polar rsp_socorr rsp_soppa1excinosymm \
rsp_soppa1excisymm rsp_soppa3excinosymm rsp_soppa3excisymm \
rsp_soppafcnosymm rsp_soppafcsymm rsp_soppapolar rsp_soppapolarnosymm \
rsp_soppapolarsymm rsp_sreslrso rsp_sresqr walk_polar"
#
MEDIUM="geoopt_dckerr geoopt_exci geoopt_prop3 geoopt_symbrk \
prop_nucquad prop_roa rsp_dckerr rsp_esr rsp_esr2 rsp_solvesr \
walk_polar2"
#
LONG="rsp_excipolar walk_solvmag"
#
PARALLEL="energy_parallel"
#
ALL="$SHORT $MEDIUM $LONG"

#########################################################################
# function usage(): print usage information 
#########################################################################
usage() {
 cat << %EOF%
usage: TEST [-h|-help|--help] [-keep] [-reftest] [-bell] [-bench]
            [-param "option list"] [-dalton script] [-list listing-file] testcase

       -h | -help | --help  : show this help description
       -keep                : keep *.mol *.dal *.log files
       -reftest             : test reference files; do not run any
                              calculations
       -bell                : sound bell each a testcase fails
       -bench               : print CPU time for each test
       -param "option list" : pass "option list" to dalton script
       -dalton script       : use script instead of the default
                              dalton-script "../dalton"
       -list listing-file   : write output into listing-file

       where testcase might be one of the following:
          essential            -- run a minimal set of essential test jobs
          parallel             -- run all parallel test jobs
          short                -- run all short test jobs
          medium               -- run all medium length test jobs
          long                 -- run all long test jobs
          all                  -- run all non-parallel test jobs
                                  (= short + medium + long)
          <case1 [case2] ...>  -- run only the specified test case(s)
%EOF%
exit 1
}

#########################################################################
# function mypring(string): print to stdout and $listing
#########################################################################
myprint(){
 echo "$1";
 echo "$1" >> $listing;
}

#########################################################################
#########################################################################
# start with real work:
#########################################################################
#########################################################################

#########################################################################
# set defaults and evaluate parameters
#########################################################################
help=""
keep="false"
DALTON="../dalton"
paramlist=""
reftest=""
bell=""
benchmark=""
listing="RESULTS"

if [ `uname` = IRIX64 ]; then
   GREP="egrep"
else
   GREP="egrep -a"
fi

while [ -n "`echo $1 | grep '-'`" ]; do
   case $1 in
     "-h" | "-help" | "--help" ) help="true" ; break;;
     "-dalton" )  shift; DALTON=$1; shift;;
     "-list" ) shift; listing=$1; shift;;
     "-keep" ) keep="true"; shift;;
     "-param" ) shift; paramlist="$1"; shift;;
     "-reftest" ) reftest="true"; shift;;
     "-bell" ) bell="true"; shift;;
     "-bench" ) benchmark="true"; shift;;
     * ) usage;;
   esac
done
if [ $help ]; then
  usage
fi

#########################################################################
# set list of test cases:
#########################################################################
testcase=$*
if   [ "$testcase" = "essential" ]; then
  testcase=$ESSENTIAL
elif [ "$testcase" = "short" ]; then
  testcase=$SHORT
elif [ "$testcase" = "medium" ]; then
  testcase=$MEDIUM
elif [ "$testcase" = "long" ]; then
  testcase=$LONG
elif [ "$testcase" = "parallel" ]; then
  testcase=$PARALLEL
elif [ "$testcase" = "all" ]; then
  testcase=$ALL
fi



#########################################################################
# check file for test listing:
#########################################################################
if [  -s $listing ]; then
   echo "$listing already exists... should it be deleted first? (y/n)"
   read answer
   if [ "$answer" = "yes"  -o  "$answer" = "y" ]; then
     echo > $listing
   fi
fi

myprint "#####################################################################"
myprint "                          DALTON test suite"
myprint "#####################################################################"
myprint "dalton script         : $DALTON"
myprint "parameter list passed : $paramlist"
myprint "test listing          : $listing"
myprint "test cases            : $testcase"

#########################################################################
# loop over test cases:
#########################################################################
passedall="ALL TESTS ENDED PROPERLY!"
problems=""
numresult=0
for item in ${testcase}
do
  myprint "###########################################################"
  myprint "start now with test $item:"
  myprint "-----------------------------------------------------------"
  chmod +x $item
  $item
  rm -f $item.log
  chmod +x $item.check

  if [ "$reftest" = "true" ]; then
      myprint ""
      myprint "evaluate reference output file $item.ref:"
      myprint "-----------------------------------------------------------"
      compressed="false"
      if [ ! -e $item.ref ]; then
          if [ -e $item.ref.gz ]; then
              compressed="true"
              gunzip -f $item.ref.gz
          fi
      fi
      checkout=`$item.check $item.ref | tee -a $listing`
      if [ "$benchmark" = "true" ]; then
          if [ `$GREP "CPU  time used in DALTON" $item.ref | wc -l` = 1 ]; then
              CPU_usage=`$GREP "CPU  time used in DALTON" $item.ref | sed s/">>>> Total CPU  time used in DALTON\:"/""/`
          else
              CPU_usage="N/A"
          fi
      fi
      if [ "$compressed" = "true" ]; then
	  gzip -f --best $item.ref
      fi
  else
    $DALTON $paramlist -ext log $item $item | \
      grep -v '\*\*\**' | \
      grep -v 'OUTPUT FROM' | grep -v 'Version' | grep -v 'PID' | \
      grep -v '^$' | tee -a $listing
      myprint ""
      myprint "evaluate output file $item.log:"
      myprint "-----------------------------------------------------------"
      checkout=`$item.check $item.log | tee -a $listing`
      if [ "$benchmark" = "true" ]; then
          if [ `$GREP "CPU  time used in DALTON" $item.log | wc -l` = 1 ]; then
              CPU_usage=`$GREP "CPU  time used in DALTON" $item.log | sed s/">>>> Total CPU  time used in DALTON\:"/""/`
          else
              CPU_usage="N/A"
          fi
      fi
  fi
  if [ "$benchmark" = "true" ]; then
      numresult=`expr $numresult \+ 1`
      testlist[$numresult]="$item"
      timelist[$numresult]="$CPU_usage"
  fi
  echo $checkout
  passed=`echo $checkout | grep "TEST ENDED PROPERLY"`
  if [ -n "$passed" ]; then
    if [ "$keep" = "false" ]; then
      rm -f $item.dal $item.mol $item.check $item.log
    fi
  else
    if [ "$bell" = "true" ]; then
      echo "\a"
    fi
    passedall="THERE IS A PROBLEM IN TEST CASE"
    problems="$problems $item"
  fi
done

#########################################################################
# final result:
#########################################################################

myprint "#####################################################################"
myprint "                              Summary"
myprint "#####################################################################"
myprint ""

if [ "$benchmark" = "true" ]; then
    if [ "$numresult" -gt 0  ]; then
        ind=1
        while [ "$ind" -le "$numresult" ]
        do
          myprint "\t${testlist[$ind]}\t\t\t${timelist[$ind]}"
          ind=`expr $ind \+ 1`
        done
        echo
    fi
fi

echo $passedall | tee -a $listing
echo $problems | tee -a $listing

exit 0
